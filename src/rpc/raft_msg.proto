syntax = "proto3";
option cc_generic_services = true;
import "common_msg.proto";

message raft_configuration
{
    repeated raft_node_info old_nodes = 1;
    repeated raft_node_info new_nodes = 2;
}

// Entry that is stored in the server's entry log. 
message raft_entry_t
{
    /** the entry's term at the point it was created */
    int64 term = 1;

    int64 idx = 2;

    /** type of entry */
    int32 type = 3;
    bytes meta = 4;
    bytes data = 5;
}

/** Appendentries message.
 * This message is used to tell nodes if it's safe to apply entries to the FSM.
 * Can be sent without any entries as a keep alive message.
 * This message could force a leader/candidate to become a follower. */
message msg_appendentries_t
{
    //leader node id
    int32  node_id = 1;  
    uint64 pool_id = 2;
    uint64 pg_id = 3; 

    // currentTerm, to force other leader/candidate to step down 
    int64 term = 4;

    /** the index of the log just before the newest entry for the node who
     * receives this message */
    int64 prev_log_idx = 5;

    /** the term of the log just before the newest entry for the node who
     * receives this message */
    int64 prev_log_term = 6;

    /** the index of the entry that has been appended to the majority of the
     * cluster. Entries up to this index will be applied to the FSM */
    int64 leader_commit = 7;

    // array of entries within this message 
    repeated raft_entry_t entries = 8;
}


/** Appendentries response message.
 * Can be sent without any entries as a keep alive message.
 * This message could force a leader/candidate to become a follower. */
message msg_appendentries_response_t
{
    //The node who sent us this message
    int32  node_id = 1;

    /** currentTerm, to force other leader/candidate to step down */
    int64 term = 2;

    /** true if follower contained entry matching prevLogidx and prevLogTerm */
    int32 success = 3;

    /** lease expiration time */
    int64 lease = 4;

    /* Non-Raft fields follow: */
    /* Having the following fields allows us to do less book keeping in
     * regards to full fledged RPC */

    /** If success, this is the highest log IDX we've received and appended to
     * our log; otherwise, this is the our currentIndex */
    int64 current_idx = 5;

    /** The first idx that we received within the appendentries message */
    int64 first_idx = 6;
}

/** Vote/prevote request message.
 * Sent to nodes when a server wants to become leader.
 * This message could force a leader/candidate to become a follower. */
message msg_requestvote_t
{
    //leader node id
    int32  node_id = 1;
    uint64 pool_id = 2;
    uint64 pg_id = 3;

    /** currentTerm, to force other leader/candidate to step down */
    int64 term = 4;

    /** candidate requesting vote */
    int32 candidate_id = 5;

    /** index of candidate's last log entry */
    int64 last_log_idx = 6;

    /** term of candidate's last log entry */
    int64 last_log_term = 7;

    /** true if this is a prevote request */
    int32 prevote = 8;
}

/** Vote/prevote response message.
 * Indicates if node has accepted, or would accept, the server's vote request. */
message msg_requestvote_response_t
{
    //The node who sent us this message
    int32  node_id = 1;

    /** currentTerm, for candidate to update itself */
    int64 term = 2;

    /** true means candidate received vote */
    int32 vote_granted = 3;

    /** true if this is a prevote response */
    int32 prevote = 4;
}

/** InstallSnapshot request message. */
message msg_installsnapshot_t
{
    //leader node id
    int32  node_id = 1;
    uint64 pool_id = 2;
    uint64 pg_id = 3;

    /** currentTerm, to force other leader/candidate to step down */
    int64 term = 4;

    /** Index of the last entry represented by this snapshot */
    int64 last_idx = 5;

    /** Term of the last entry represented by this snapshot */
    int64 last_term = 6;
}

/** InstallSnapshot response message. */
message msg_installsnapshot_response_t
{
    //The node who sent us this message
    int32  node_id = 1;

    /** currentTerm, to force other leader/candidate to step down */
    int64 term = 2;

    /** Same with the one in the request message */
    int64 last_idx = 3;

    /** True if the snapshot has been fully received */
    int32 complete = 4;

    /** lease expiration time */
    int64 lease = 5;
}

message heartbeat_metadata
{
    //leader node id
    int32  node_id = 1;
    int32  target_node_id = 2;

    uint64 pool_id = 3;
    uint64 pg_id = 4;   

    // currentTerm, to force other leader/candidate to step down 
    int64 term = 5;

    /** the index of the log just before the newest entry for the node who
     * receives this message */
    int64 prev_log_idx = 6;

    /** the term of the log just before the newest entry for the node who
     * receives this message */
    int64 prev_log_term = 7;

    /** the index of the entry that has been appended to the majority of the
     * cluster. Entries up to this index will be applied to the FSM */
    int64 leader_commit = 8;      
}

message heartbeat_request
{
    repeated heartbeat_metadata heartbeats = 1;
}

message heartbeat_response
{
    repeated msg_appendentries_response_t meta = 1;
}

message  timeout_now_request {
    uint64 pool_id = 1;
    uint64 pg_id = 2; 
    //current node
    int32  node_id = 3;     
    int64 term = 4;
}

message  timeout_now_response {
    //The node who sent us this message
    int32  node_id = 1;
    int64 term = 2;
    int32 success = 3;    
}

service rpc_service_raft{
    rpc append_entries(msg_appendentries_t) returns (msg_appendentries_response_t);
    rpc vote(msg_requestvote_t) returns (msg_requestvote_response_t);
    rpc install_snapshot(msg_installsnapshot_t) returns (msg_installsnapshot_response_t);
    rpc heartbeat(heartbeat_request) returns (heartbeat_response);
    rpc timeout_now(timeout_now_request) returns (timeout_now_response);
}