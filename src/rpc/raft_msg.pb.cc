// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: raft_msg.proto

#include "raft_msg.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_raft_5fmsg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_raft_entry_t_raft_5fmsg_2eproto;
class raft_entry_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<raft_entry_t> _instance;
} _raft_entry_t_default_instance_;
class msg_appendentries_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msg_appendentries_t> _instance;
} _msg_appendentries_t_default_instance_;
class msg_appendentries_response_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msg_appendentries_response_t> _instance;
} _msg_appendentries_response_t_default_instance_;
class msg_requestvote_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msg_requestvote_t> _instance;
} _msg_requestvote_t_default_instance_;
class msg_requestvote_response_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msg_requestvote_response_t> _instance;
} _msg_requestvote_response_t_default_instance_;
class msg_installsnapshot_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msg_installsnapshot_t> _instance;
} _msg_installsnapshot_t_default_instance_;
class msg_installsnapshot_response_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msg_installsnapshot_response_t> _instance;
} _msg_installsnapshot_response_t_default_instance_;
static void InitDefaultsscc_info_msg_appendentries_response_t_raft_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_msg_appendentries_response_t_default_instance_;
    new (ptr) ::msg_appendentries_response_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg_appendentries_response_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_msg_appendentries_response_t_raft_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_msg_appendentries_response_t_raft_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_msg_appendentries_t_raft_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_msg_appendentries_t_default_instance_;
    new (ptr) ::msg_appendentries_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg_appendentries_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_msg_appendentries_t_raft_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_msg_appendentries_t_raft_5fmsg_2eproto}, {
      &scc_info_raft_entry_t_raft_5fmsg_2eproto.base,}};

static void InitDefaultsscc_info_msg_installsnapshot_response_t_raft_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_msg_installsnapshot_response_t_default_instance_;
    new (ptr) ::msg_installsnapshot_response_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg_installsnapshot_response_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_msg_installsnapshot_response_t_raft_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_msg_installsnapshot_response_t_raft_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_msg_installsnapshot_t_raft_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_msg_installsnapshot_t_default_instance_;
    new (ptr) ::msg_installsnapshot_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg_installsnapshot_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_msg_installsnapshot_t_raft_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_msg_installsnapshot_t_raft_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_msg_requestvote_response_t_raft_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_msg_requestvote_response_t_default_instance_;
    new (ptr) ::msg_requestvote_response_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg_requestvote_response_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_msg_requestvote_response_t_raft_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_msg_requestvote_response_t_raft_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_msg_requestvote_t_raft_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_msg_requestvote_t_default_instance_;
    new (ptr) ::msg_requestvote_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg_requestvote_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_msg_requestvote_t_raft_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_msg_requestvote_t_raft_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_raft_entry_t_raft_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_raft_entry_t_default_instance_;
    new (ptr) ::raft_entry_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raft_entry_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_raft_entry_t_raft_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_raft_entry_t_raft_5fmsg_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_raft_5fmsg_2eproto[7];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_raft_5fmsg_2eproto = nullptr;
static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* file_level_service_descriptors_raft_5fmsg_2eproto[1];

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_raft_5fmsg_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::raft_entry_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::raft_entry_t, term_),
  PROTOBUF_FIELD_OFFSET(::raft_entry_t, idx_),
  PROTOBUF_FIELD_OFFSET(::raft_entry_t, type_),
  PROTOBUF_FIELD_OFFSET(::raft_entry_t, obj_name_),
  PROTOBUF_FIELD_OFFSET(::raft_entry_t, meta_),
  PROTOBUF_FIELD_OFFSET(::raft_entry_t, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg_appendentries_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::msg_appendentries_t, node_id_),
  PROTOBUF_FIELD_OFFSET(::msg_appendentries_t, pool_id_),
  PROTOBUF_FIELD_OFFSET(::msg_appendentries_t, pg_id_),
  PROTOBUF_FIELD_OFFSET(::msg_appendentries_t, term_),
  PROTOBUF_FIELD_OFFSET(::msg_appendentries_t, prev_log_idx_),
  PROTOBUF_FIELD_OFFSET(::msg_appendentries_t, prev_log_term_),
  PROTOBUF_FIELD_OFFSET(::msg_appendentries_t, leader_commit_),
  PROTOBUF_FIELD_OFFSET(::msg_appendentries_t, entries_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg_appendentries_response_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::msg_appendentries_response_t, node_id_),
  PROTOBUF_FIELD_OFFSET(::msg_appendentries_response_t, term_),
  PROTOBUF_FIELD_OFFSET(::msg_appendentries_response_t, success_),
  PROTOBUF_FIELD_OFFSET(::msg_appendentries_response_t, lease_),
  PROTOBUF_FIELD_OFFSET(::msg_appendentries_response_t, current_idx_),
  PROTOBUF_FIELD_OFFSET(::msg_appendentries_response_t, first_idx_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg_requestvote_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::msg_requestvote_t, node_id_),
  PROTOBUF_FIELD_OFFSET(::msg_requestvote_t, pool_id_),
  PROTOBUF_FIELD_OFFSET(::msg_requestvote_t, pg_id_),
  PROTOBUF_FIELD_OFFSET(::msg_requestvote_t, term_),
  PROTOBUF_FIELD_OFFSET(::msg_requestvote_t, candidate_id_),
  PROTOBUF_FIELD_OFFSET(::msg_requestvote_t, last_log_idx_),
  PROTOBUF_FIELD_OFFSET(::msg_requestvote_t, last_log_term_),
  PROTOBUF_FIELD_OFFSET(::msg_requestvote_t, prevote_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg_requestvote_response_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::msg_requestvote_response_t, node_id_),
  PROTOBUF_FIELD_OFFSET(::msg_requestvote_response_t, term_),
  PROTOBUF_FIELD_OFFSET(::msg_requestvote_response_t, vote_granted_),
  PROTOBUF_FIELD_OFFSET(::msg_requestvote_response_t, prevote_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg_installsnapshot_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::msg_installsnapshot_t, node_id_),
  PROTOBUF_FIELD_OFFSET(::msg_installsnapshot_t, pool_id_),
  PROTOBUF_FIELD_OFFSET(::msg_installsnapshot_t, pg_id_),
  PROTOBUF_FIELD_OFFSET(::msg_installsnapshot_t, term_),
  PROTOBUF_FIELD_OFFSET(::msg_installsnapshot_t, last_idx_),
  PROTOBUF_FIELD_OFFSET(::msg_installsnapshot_t, last_term_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg_installsnapshot_response_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::msg_installsnapshot_response_t, node_id_),
  PROTOBUF_FIELD_OFFSET(::msg_installsnapshot_response_t, term_),
  PROTOBUF_FIELD_OFFSET(::msg_installsnapshot_response_t, last_idx_),
  PROTOBUF_FIELD_OFFSET(::msg_installsnapshot_response_t, complete_),
  PROTOBUF_FIELD_OFFSET(::msg_installsnapshot_response_t, lease_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::raft_entry_t)},
  { 11, -1, sizeof(::msg_appendentries_t)},
  { 24, -1, sizeof(::msg_appendentries_response_t)},
  { 35, -1, sizeof(::msg_requestvote_t)},
  { 48, -1, sizeof(::msg_requestvote_response_t)},
  { 57, -1, sizeof(::msg_installsnapshot_t)},
  { 68, -1, sizeof(::msg_installsnapshot_response_t)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_raft_entry_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_msg_appendentries_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_msg_appendentries_response_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_msg_requestvote_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_msg_requestvote_response_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_msg_installsnapshot_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_msg_installsnapshot_response_t_default_instance_),
};

const char descriptor_table_protodef_raft_5fmsg_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016raft_msg.proto\"e\n\014raft_entry_t\022\014\n\004term"
  "\030\001 \001(\003\022\013\n\003idx\030\002 \001(\003\022\014\n\004type\030\003 \001(\005\022\020\n\010obj"
  "_name\030\004 \001(\014\022\014\n\004meta\030\005 \001(\014\022\014\n\004data\030\006 \001(\014\""
  "\270\001\n\023msg_appendentries_t\022\017\n\007node_id\030\001 \001(\005"
  "\022\017\n\007pool_id\030\002 \001(\004\022\r\n\005pg_id\030\003 \001(\004\022\014\n\004term"
  "\030\004 \001(\003\022\024\n\014prev_log_idx\030\005 \001(\003\022\025\n\rprev_log"
  "_term\030\006 \001(\003\022\025\n\rleader_commit\030\007 \001(\003\022\036\n\007en"
  "tries\030\010 \003(\0132\r.raft_entry_t\"\205\001\n\034msg_appen"
  "dentries_response_t\022\017\n\007node_id\030\001 \001(\005\022\014\n\004"
  "term\030\002 \001(\003\022\017\n\007success\030\003 \001(\005\022\r\n\005lease\030\004 \001"
  "(\003\022\023\n\013current_idx\030\005 \001(\003\022\021\n\tfirst_idx\030\006 \001"
  "(\003\"\246\001\n\021msg_requestvote_t\022\017\n\007node_id\030\001 \001("
  "\005\022\017\n\007pool_id\030\002 \001(\004\022\r\n\005pg_id\030\003 \001(\004\022\014\n\004ter"
  "m\030\004 \001(\003\022\024\n\014candidate_id\030\005 \001(\005\022\024\n\014last_lo"
  "g_idx\030\006 \001(\003\022\025\n\rlast_log_term\030\007 \001(\003\022\017\n\007pr"
  "evote\030\010 \001(\005\"b\n\032msg_requestvote_response_"
  "t\022\017\n\007node_id\030\001 \001(\005\022\014\n\004term\030\002 \001(\003\022\024\n\014vote"
  "_granted\030\003 \001(\005\022\017\n\007prevote\030\004 \001(\005\"{\n\025msg_i"
  "nstallsnapshot_t\022\017\n\007node_id\030\001 \001(\005\022\017\n\007poo"
  "l_id\030\002 \001(\004\022\r\n\005pg_id\030\003 \001(\004\022\014\n\004term\030\004 \001(\003\022"
  "\020\n\010last_idx\030\005 \001(\003\022\021\n\tlast_term\030\006 \001(\003\"r\n\036"
  "msg_installsnapshot_response_t\022\017\n\007node_i"
  "d\030\001 \001(\005\022\014\n\004term\030\002 \001(\003\022\020\n\010last_idx\030\003 \001(\003\022"
  "\020\n\010complete\030\004 \001(\005\022\r\n\005lease\030\005 \001(\0032\337\001\n\020rpc"
  "_service_raft\022E\n\016append_entries\022\024.msg_ap"
  "pendentries_t\032\035.msg_appendentries_respon"
  "se_t\0227\n\004vote\022\022.msg_requestvote_t\032\033.msg_r"
  "equestvote_response_t\022K\n\020install_snapsho"
  "t\022\026.msg_installsnapshot_t\032\037.msg_installs"
  "napshot_response_tB\003\200\001\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_raft_5fmsg_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_raft_5fmsg_2eproto_sccs[7] = {
  &scc_info_msg_appendentries_response_t_raft_5fmsg_2eproto.base,
  &scc_info_msg_appendentries_t_raft_5fmsg_2eproto.base,
  &scc_info_msg_installsnapshot_response_t_raft_5fmsg_2eproto.base,
  &scc_info_msg_installsnapshot_t_raft_5fmsg_2eproto.base,
  &scc_info_msg_requestvote_response_t_raft_5fmsg_2eproto.base,
  &scc_info_msg_requestvote_t_raft_5fmsg_2eproto.base,
  &scc_info_raft_entry_t_raft_5fmsg_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_raft_5fmsg_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_raft_5fmsg_2eproto = {
  false, false, descriptor_table_protodef_raft_5fmsg_2eproto, "raft_msg.proto", 1191,
  &descriptor_table_raft_5fmsg_2eproto_once, descriptor_table_raft_5fmsg_2eproto_sccs, descriptor_table_raft_5fmsg_2eproto_deps, 7, 0,
  schemas, file_default_instances, TableStruct_raft_5fmsg_2eproto::offsets,
  file_level_metadata_raft_5fmsg_2eproto, 7, file_level_enum_descriptors_raft_5fmsg_2eproto, file_level_service_descriptors_raft_5fmsg_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_raft_5fmsg_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_raft_5fmsg_2eproto)), true);

// ===================================================================

void raft_entry_t::InitAsDefaultInstance() {
}
class raft_entry_t::_Internal {
 public:
};

raft_entry_t::raft_entry_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:raft_entry_t)
}
raft_entry_t::raft_entry_t(const raft_entry_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  obj_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_obj_name().empty()) {
    obj_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_obj_name(),
      GetArena());
  }
  meta_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_meta().empty()) {
    meta_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_meta(),
      GetArena());
  }
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_data(),
      GetArena());
  }
  ::memcpy(&term_, &from.term_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&term_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:raft_entry_t)
}

void raft_entry_t::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_raft_entry_t_raft_5fmsg_2eproto.base);
  obj_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  meta_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&term_)) + sizeof(type_));
}

raft_entry_t::~raft_entry_t() {
  // @@protoc_insertion_point(destructor:raft_entry_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void raft_entry_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  obj_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  meta_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void raft_entry_t::ArenaDtor(void* object) {
  raft_entry_t* _this = reinterpret_cast< raft_entry_t* >(object);
  (void)_this;
}
void raft_entry_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void raft_entry_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const raft_entry_t& raft_entry_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_raft_entry_t_raft_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void raft_entry_t::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_entry_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  obj_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  meta_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&term_)) + sizeof(type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* raft_entry_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 term = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          term_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 idx = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes obj_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_obj_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes meta = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_meta();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes data = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* raft_entry_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft_entry_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 term = 1;
  if (this->term() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_term(), target);
  }

  // int64 idx = 2;
  if (this->idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_idx(), target);
  }

  // int32 type = 3;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_type(), target);
  }

  // bytes obj_name = 4;
  if (this->obj_name().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_obj_name(), target);
  }

  // bytes meta = 5;
  if (this->meta().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_meta(), target);
  }

  // bytes data = 6;
  if (this->data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_entry_t)
  return target;
}

size_t raft_entry_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_entry_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes obj_name = 4;
  if (this->obj_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_obj_name());
  }

  // bytes meta = 5;
  if (this->meta().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_meta());
  }

  // bytes data = 6;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // int64 term = 1;
  if (this->term() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_term());
  }

  // int64 idx = 2;
  if (this->idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_idx());
  }

  // int32 type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void raft_entry_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_entry_t)
  GOOGLE_DCHECK_NE(&from, this);
  const raft_entry_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<raft_entry_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_entry_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_entry_t)
    MergeFrom(*source);
  }
}

void raft_entry_t::MergeFrom(const raft_entry_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_entry_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.obj_name().size() > 0) {
    _internal_set_obj_name(from._internal_obj_name());
  }
  if (from.meta().size() > 0) {
    _internal_set_meta(from._internal_meta());
  }
  if (from.data().size() > 0) {
    _internal_set_data(from._internal_data());
  }
  if (from.term() != 0) {
    _internal_set_term(from._internal_term());
  }
  if (from.idx() != 0) {
    _internal_set_idx(from._internal_idx());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void raft_entry_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_entry_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void raft_entry_t::CopyFrom(const raft_entry_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_entry_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool raft_entry_t::IsInitialized() const {
  return true;
}

void raft_entry_t::InternalSwap(raft_entry_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  obj_name_.Swap(&other->obj_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  meta_.Swap(&other->meta_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(raft_entry_t, type_)
      + sizeof(raft_entry_t::type_)
      - PROTOBUF_FIELD_OFFSET(raft_entry_t, term_)>(
          reinterpret_cast<char*>(&term_),
          reinterpret_cast<char*>(&other->term_));
}

::PROTOBUF_NAMESPACE_ID::Metadata raft_entry_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msg_appendentries_t::InitAsDefaultInstance() {
}
class msg_appendentries_t::_Internal {
 public:
};

msg_appendentries_t::msg_appendentries_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  entries_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:msg_appendentries_t)
}
msg_appendentries_t::msg_appendentries_t(const msg_appendentries_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      entries_(from.entries_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&pool_id_, &from.pool_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&node_id_) -
    reinterpret_cast<char*>(&pool_id_)) + sizeof(node_id_));
  // @@protoc_insertion_point(copy_constructor:msg_appendentries_t)
}

void msg_appendentries_t::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_msg_appendentries_t_raft_5fmsg_2eproto.base);
  ::memset(&pool_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&node_id_) -
      reinterpret_cast<char*>(&pool_id_)) + sizeof(node_id_));
}

msg_appendentries_t::~msg_appendentries_t() {
  // @@protoc_insertion_point(destructor:msg_appendentries_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void msg_appendentries_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void msg_appendentries_t::ArenaDtor(void* object) {
  msg_appendentries_t* _this = reinterpret_cast< msg_appendentries_t* >(object);
  (void)_this;
}
void msg_appendentries_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void msg_appendentries_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msg_appendentries_t& msg_appendentries_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msg_appendentries_t_raft_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void msg_appendentries_t::Clear() {
// @@protoc_insertion_point(message_clear_start:msg_appendentries_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entries_.Clear();
  ::memset(&pool_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&node_id_) -
      reinterpret_cast<char*>(&pool_id_)) + sizeof(node_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* msg_appendentries_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 node_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          node_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 pool_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          pool_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 pg_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          pg_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 term = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          term_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 prev_log_idx = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          prev_log_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 prev_log_term = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          prev_log_term_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 leader_commit = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          leader_commit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .raft_entry_t entries = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msg_appendentries_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg_appendentries_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 node_id = 1;
  if (this->node_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_node_id(), target);
  }

  // uint64 pool_id = 2;
  if (this->pool_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_pool_id(), target);
  }

  // uint64 pg_id = 3;
  if (this->pg_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_pg_id(), target);
  }

  // int64 term = 4;
  if (this->term() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_term(), target);
  }

  // int64 prev_log_idx = 5;
  if (this->prev_log_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_prev_log_idx(), target);
  }

  // int64 prev_log_term = 6;
  if (this->prev_log_term() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_prev_log_term(), target);
  }

  // int64 leader_commit = 7;
  if (this->leader_commit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_leader_commit(), target);
  }

  // repeated .raft_entry_t entries = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_entries_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_entries(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg_appendentries_t)
  return target;
}

size_t msg_appendentries_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg_appendentries_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .raft_entry_t entries = 8;
  total_size += 1UL * this->_internal_entries_size();
  for (const auto& msg : this->entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint64 pool_id = 2;
  if (this->pool_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_pool_id());
  }

  // uint64 pg_id = 3;
  if (this->pg_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_pg_id());
  }

  // int64 term = 4;
  if (this->term() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_term());
  }

  // int64 prev_log_idx = 5;
  if (this->prev_log_idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_prev_log_idx());
  }

  // int64 prev_log_term = 6;
  if (this->prev_log_term() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_prev_log_term());
  }

  // int64 leader_commit = 7;
  if (this->leader_commit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_leader_commit());
  }

  // int32 node_id = 1;
  if (this->node_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_node_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msg_appendentries_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg_appendentries_t)
  GOOGLE_DCHECK_NE(&from, this);
  const msg_appendentries_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msg_appendentries_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg_appendentries_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg_appendentries_t)
    MergeFrom(*source);
  }
}

void msg_appendentries_t::MergeFrom(const msg_appendentries_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg_appendentries_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entries_.MergeFrom(from.entries_);
  if (from.pool_id() != 0) {
    _internal_set_pool_id(from._internal_pool_id());
  }
  if (from.pg_id() != 0) {
    _internal_set_pg_id(from._internal_pg_id());
  }
  if (from.term() != 0) {
    _internal_set_term(from._internal_term());
  }
  if (from.prev_log_idx() != 0) {
    _internal_set_prev_log_idx(from._internal_prev_log_idx());
  }
  if (from.prev_log_term() != 0) {
    _internal_set_prev_log_term(from._internal_prev_log_term());
  }
  if (from.leader_commit() != 0) {
    _internal_set_leader_commit(from._internal_leader_commit());
  }
  if (from.node_id() != 0) {
    _internal_set_node_id(from._internal_node_id());
  }
}

void msg_appendentries_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg_appendentries_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_appendentries_t::CopyFrom(const msg_appendentries_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg_appendentries_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_appendentries_t::IsInitialized() const {
  return true;
}

void msg_appendentries_t::InternalSwap(msg_appendentries_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  entries_.InternalSwap(&other->entries_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(msg_appendentries_t, node_id_)
      + sizeof(msg_appendentries_t::node_id_)
      - PROTOBUF_FIELD_OFFSET(msg_appendentries_t, pool_id_)>(
          reinterpret_cast<char*>(&pool_id_),
          reinterpret_cast<char*>(&other->pool_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata msg_appendentries_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msg_appendentries_response_t::InitAsDefaultInstance() {
}
class msg_appendentries_response_t::_Internal {
 public:
};

msg_appendentries_response_t::msg_appendentries_response_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:msg_appendentries_response_t)
}
msg_appendentries_response_t::msg_appendentries_response_t(const msg_appendentries_response_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&term_, &from.term_,
    static_cast<size_t>(reinterpret_cast<char*>(&first_idx_) -
    reinterpret_cast<char*>(&term_)) + sizeof(first_idx_));
  // @@protoc_insertion_point(copy_constructor:msg_appendentries_response_t)
}

void msg_appendentries_response_t::SharedCtor() {
  ::memset(&term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&first_idx_) -
      reinterpret_cast<char*>(&term_)) + sizeof(first_idx_));
}

msg_appendentries_response_t::~msg_appendentries_response_t() {
  // @@protoc_insertion_point(destructor:msg_appendentries_response_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void msg_appendentries_response_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void msg_appendentries_response_t::ArenaDtor(void* object) {
  msg_appendentries_response_t* _this = reinterpret_cast< msg_appendentries_response_t* >(object);
  (void)_this;
}
void msg_appendentries_response_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void msg_appendentries_response_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msg_appendentries_response_t& msg_appendentries_response_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msg_appendentries_response_t_raft_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void msg_appendentries_response_t::Clear() {
// @@protoc_insertion_point(message_clear_start:msg_appendentries_response_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&first_idx_) -
      reinterpret_cast<char*>(&term_)) + sizeof(first_idx_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* msg_appendentries_response_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 node_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          node_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 term = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          term_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 success = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 lease = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          lease_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 current_idx = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          current_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 first_idx = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          first_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msg_appendentries_response_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg_appendentries_response_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 node_id = 1;
  if (this->node_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_node_id(), target);
  }

  // int64 term = 2;
  if (this->term() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_term(), target);
  }

  // int32 success = 3;
  if (this->success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_success(), target);
  }

  // int64 lease = 4;
  if (this->lease() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_lease(), target);
  }

  // int64 current_idx = 5;
  if (this->current_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_current_idx(), target);
  }

  // int64 first_idx = 6;
  if (this->first_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_first_idx(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg_appendentries_response_t)
  return target;
}

size_t msg_appendentries_response_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg_appendentries_response_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 term = 2;
  if (this->term() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_term());
  }

  // int32 node_id = 1;
  if (this->node_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_node_id());
  }

  // int32 success = 3;
  if (this->success() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_success());
  }

  // int64 lease = 4;
  if (this->lease() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_lease());
  }

  // int64 current_idx = 5;
  if (this->current_idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_current_idx());
  }

  // int64 first_idx = 6;
  if (this->first_idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_first_idx());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msg_appendentries_response_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg_appendentries_response_t)
  GOOGLE_DCHECK_NE(&from, this);
  const msg_appendentries_response_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msg_appendentries_response_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg_appendentries_response_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg_appendentries_response_t)
    MergeFrom(*source);
  }
}

void msg_appendentries_response_t::MergeFrom(const msg_appendentries_response_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg_appendentries_response_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.term() != 0) {
    _internal_set_term(from._internal_term());
  }
  if (from.node_id() != 0) {
    _internal_set_node_id(from._internal_node_id());
  }
  if (from.success() != 0) {
    _internal_set_success(from._internal_success());
  }
  if (from.lease() != 0) {
    _internal_set_lease(from._internal_lease());
  }
  if (from.current_idx() != 0) {
    _internal_set_current_idx(from._internal_current_idx());
  }
  if (from.first_idx() != 0) {
    _internal_set_first_idx(from._internal_first_idx());
  }
}

void msg_appendentries_response_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg_appendentries_response_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_appendentries_response_t::CopyFrom(const msg_appendentries_response_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg_appendentries_response_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_appendentries_response_t::IsInitialized() const {
  return true;
}

void msg_appendentries_response_t::InternalSwap(msg_appendentries_response_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(msg_appendentries_response_t, first_idx_)
      + sizeof(msg_appendentries_response_t::first_idx_)
      - PROTOBUF_FIELD_OFFSET(msg_appendentries_response_t, term_)>(
          reinterpret_cast<char*>(&term_),
          reinterpret_cast<char*>(&other->term_));
}

::PROTOBUF_NAMESPACE_ID::Metadata msg_appendentries_response_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msg_requestvote_t::InitAsDefaultInstance() {
}
class msg_requestvote_t::_Internal {
 public:
};

msg_requestvote_t::msg_requestvote_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:msg_requestvote_t)
}
msg_requestvote_t::msg_requestvote_t(const msg_requestvote_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&pool_id_, &from.pool_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&prevote_) -
    reinterpret_cast<char*>(&pool_id_)) + sizeof(prevote_));
  // @@protoc_insertion_point(copy_constructor:msg_requestvote_t)
}

void msg_requestvote_t::SharedCtor() {
  ::memset(&pool_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&prevote_) -
      reinterpret_cast<char*>(&pool_id_)) + sizeof(prevote_));
}

msg_requestvote_t::~msg_requestvote_t() {
  // @@protoc_insertion_point(destructor:msg_requestvote_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void msg_requestvote_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void msg_requestvote_t::ArenaDtor(void* object) {
  msg_requestvote_t* _this = reinterpret_cast< msg_requestvote_t* >(object);
  (void)_this;
}
void msg_requestvote_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void msg_requestvote_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msg_requestvote_t& msg_requestvote_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msg_requestvote_t_raft_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void msg_requestvote_t::Clear() {
// @@protoc_insertion_point(message_clear_start:msg_requestvote_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&pool_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&prevote_) -
      reinterpret_cast<char*>(&pool_id_)) + sizeof(prevote_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* msg_requestvote_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 node_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          node_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 pool_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          pool_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 pg_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          pg_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 term = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          term_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 candidate_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          candidate_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 last_log_idx = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          last_log_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 last_log_term = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          last_log_term_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 prevote = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          prevote_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msg_requestvote_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg_requestvote_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 node_id = 1;
  if (this->node_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_node_id(), target);
  }

  // uint64 pool_id = 2;
  if (this->pool_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_pool_id(), target);
  }

  // uint64 pg_id = 3;
  if (this->pg_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_pg_id(), target);
  }

  // int64 term = 4;
  if (this->term() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_term(), target);
  }

  // int32 candidate_id = 5;
  if (this->candidate_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_candidate_id(), target);
  }

  // int64 last_log_idx = 6;
  if (this->last_log_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_last_log_idx(), target);
  }

  // int64 last_log_term = 7;
  if (this->last_log_term() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_last_log_term(), target);
  }

  // int32 prevote = 8;
  if (this->prevote() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_prevote(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg_requestvote_t)
  return target;
}

size_t msg_requestvote_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg_requestvote_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 pool_id = 2;
  if (this->pool_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_pool_id());
  }

  // uint64 pg_id = 3;
  if (this->pg_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_pg_id());
  }

  // int32 node_id = 1;
  if (this->node_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_node_id());
  }

  // int32 candidate_id = 5;
  if (this->candidate_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_candidate_id());
  }

  // int64 term = 4;
  if (this->term() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_term());
  }

  // int64 last_log_idx = 6;
  if (this->last_log_idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_last_log_idx());
  }

  // int64 last_log_term = 7;
  if (this->last_log_term() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_last_log_term());
  }

  // int32 prevote = 8;
  if (this->prevote() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_prevote());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msg_requestvote_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg_requestvote_t)
  GOOGLE_DCHECK_NE(&from, this);
  const msg_requestvote_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msg_requestvote_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg_requestvote_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg_requestvote_t)
    MergeFrom(*source);
  }
}

void msg_requestvote_t::MergeFrom(const msg_requestvote_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg_requestvote_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pool_id() != 0) {
    _internal_set_pool_id(from._internal_pool_id());
  }
  if (from.pg_id() != 0) {
    _internal_set_pg_id(from._internal_pg_id());
  }
  if (from.node_id() != 0) {
    _internal_set_node_id(from._internal_node_id());
  }
  if (from.candidate_id() != 0) {
    _internal_set_candidate_id(from._internal_candidate_id());
  }
  if (from.term() != 0) {
    _internal_set_term(from._internal_term());
  }
  if (from.last_log_idx() != 0) {
    _internal_set_last_log_idx(from._internal_last_log_idx());
  }
  if (from.last_log_term() != 0) {
    _internal_set_last_log_term(from._internal_last_log_term());
  }
  if (from.prevote() != 0) {
    _internal_set_prevote(from._internal_prevote());
  }
}

void msg_requestvote_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg_requestvote_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_requestvote_t::CopyFrom(const msg_requestvote_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg_requestvote_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_requestvote_t::IsInitialized() const {
  return true;
}

void msg_requestvote_t::InternalSwap(msg_requestvote_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(msg_requestvote_t, prevote_)
      + sizeof(msg_requestvote_t::prevote_)
      - PROTOBUF_FIELD_OFFSET(msg_requestvote_t, pool_id_)>(
          reinterpret_cast<char*>(&pool_id_),
          reinterpret_cast<char*>(&other->pool_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata msg_requestvote_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msg_requestvote_response_t::InitAsDefaultInstance() {
}
class msg_requestvote_response_t::_Internal {
 public:
};

msg_requestvote_response_t::msg_requestvote_response_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:msg_requestvote_response_t)
}
msg_requestvote_response_t::msg_requestvote_response_t(const msg_requestvote_response_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&term_, &from.term_,
    static_cast<size_t>(reinterpret_cast<char*>(&prevote_) -
    reinterpret_cast<char*>(&term_)) + sizeof(prevote_));
  // @@protoc_insertion_point(copy_constructor:msg_requestvote_response_t)
}

void msg_requestvote_response_t::SharedCtor() {
  ::memset(&term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&prevote_) -
      reinterpret_cast<char*>(&term_)) + sizeof(prevote_));
}

msg_requestvote_response_t::~msg_requestvote_response_t() {
  // @@protoc_insertion_point(destructor:msg_requestvote_response_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void msg_requestvote_response_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void msg_requestvote_response_t::ArenaDtor(void* object) {
  msg_requestvote_response_t* _this = reinterpret_cast< msg_requestvote_response_t* >(object);
  (void)_this;
}
void msg_requestvote_response_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void msg_requestvote_response_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msg_requestvote_response_t& msg_requestvote_response_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msg_requestvote_response_t_raft_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void msg_requestvote_response_t::Clear() {
// @@protoc_insertion_point(message_clear_start:msg_requestvote_response_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&prevote_) -
      reinterpret_cast<char*>(&term_)) + sizeof(prevote_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* msg_requestvote_response_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 node_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          node_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 term = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          term_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 vote_granted = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          vote_granted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 prevote = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          prevote_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msg_requestvote_response_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg_requestvote_response_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 node_id = 1;
  if (this->node_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_node_id(), target);
  }

  // int64 term = 2;
  if (this->term() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_term(), target);
  }

  // int32 vote_granted = 3;
  if (this->vote_granted() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_vote_granted(), target);
  }

  // int32 prevote = 4;
  if (this->prevote() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_prevote(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg_requestvote_response_t)
  return target;
}

size_t msg_requestvote_response_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg_requestvote_response_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 term = 2;
  if (this->term() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_term());
  }

  // int32 node_id = 1;
  if (this->node_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_node_id());
  }

  // int32 vote_granted = 3;
  if (this->vote_granted() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_vote_granted());
  }

  // int32 prevote = 4;
  if (this->prevote() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_prevote());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msg_requestvote_response_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg_requestvote_response_t)
  GOOGLE_DCHECK_NE(&from, this);
  const msg_requestvote_response_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msg_requestvote_response_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg_requestvote_response_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg_requestvote_response_t)
    MergeFrom(*source);
  }
}

void msg_requestvote_response_t::MergeFrom(const msg_requestvote_response_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg_requestvote_response_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.term() != 0) {
    _internal_set_term(from._internal_term());
  }
  if (from.node_id() != 0) {
    _internal_set_node_id(from._internal_node_id());
  }
  if (from.vote_granted() != 0) {
    _internal_set_vote_granted(from._internal_vote_granted());
  }
  if (from.prevote() != 0) {
    _internal_set_prevote(from._internal_prevote());
  }
}

void msg_requestvote_response_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg_requestvote_response_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_requestvote_response_t::CopyFrom(const msg_requestvote_response_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg_requestvote_response_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_requestvote_response_t::IsInitialized() const {
  return true;
}

void msg_requestvote_response_t::InternalSwap(msg_requestvote_response_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(msg_requestvote_response_t, prevote_)
      + sizeof(msg_requestvote_response_t::prevote_)
      - PROTOBUF_FIELD_OFFSET(msg_requestvote_response_t, term_)>(
          reinterpret_cast<char*>(&term_),
          reinterpret_cast<char*>(&other->term_));
}

::PROTOBUF_NAMESPACE_ID::Metadata msg_requestvote_response_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msg_installsnapshot_t::InitAsDefaultInstance() {
}
class msg_installsnapshot_t::_Internal {
 public:
};

msg_installsnapshot_t::msg_installsnapshot_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:msg_installsnapshot_t)
}
msg_installsnapshot_t::msg_installsnapshot_t(const msg_installsnapshot_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&pool_id_, &from.pool_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&node_id_) -
    reinterpret_cast<char*>(&pool_id_)) + sizeof(node_id_));
  // @@protoc_insertion_point(copy_constructor:msg_installsnapshot_t)
}

void msg_installsnapshot_t::SharedCtor() {
  ::memset(&pool_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&node_id_) -
      reinterpret_cast<char*>(&pool_id_)) + sizeof(node_id_));
}

msg_installsnapshot_t::~msg_installsnapshot_t() {
  // @@protoc_insertion_point(destructor:msg_installsnapshot_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void msg_installsnapshot_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void msg_installsnapshot_t::ArenaDtor(void* object) {
  msg_installsnapshot_t* _this = reinterpret_cast< msg_installsnapshot_t* >(object);
  (void)_this;
}
void msg_installsnapshot_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void msg_installsnapshot_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msg_installsnapshot_t& msg_installsnapshot_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msg_installsnapshot_t_raft_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void msg_installsnapshot_t::Clear() {
// @@protoc_insertion_point(message_clear_start:msg_installsnapshot_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&pool_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&node_id_) -
      reinterpret_cast<char*>(&pool_id_)) + sizeof(node_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* msg_installsnapshot_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 node_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          node_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 pool_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          pool_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 pg_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          pg_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 term = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          term_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 last_idx = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          last_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 last_term = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          last_term_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msg_installsnapshot_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg_installsnapshot_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 node_id = 1;
  if (this->node_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_node_id(), target);
  }

  // uint64 pool_id = 2;
  if (this->pool_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_pool_id(), target);
  }

  // uint64 pg_id = 3;
  if (this->pg_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_pg_id(), target);
  }

  // int64 term = 4;
  if (this->term() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_term(), target);
  }

  // int64 last_idx = 5;
  if (this->last_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_last_idx(), target);
  }

  // int64 last_term = 6;
  if (this->last_term() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_last_term(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg_installsnapshot_t)
  return target;
}

size_t msg_installsnapshot_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg_installsnapshot_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 pool_id = 2;
  if (this->pool_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_pool_id());
  }

  // uint64 pg_id = 3;
  if (this->pg_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_pg_id());
  }

  // int64 term = 4;
  if (this->term() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_term());
  }

  // int64 last_idx = 5;
  if (this->last_idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_last_idx());
  }

  // int64 last_term = 6;
  if (this->last_term() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_last_term());
  }

  // int32 node_id = 1;
  if (this->node_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_node_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msg_installsnapshot_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg_installsnapshot_t)
  GOOGLE_DCHECK_NE(&from, this);
  const msg_installsnapshot_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msg_installsnapshot_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg_installsnapshot_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg_installsnapshot_t)
    MergeFrom(*source);
  }
}

void msg_installsnapshot_t::MergeFrom(const msg_installsnapshot_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg_installsnapshot_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pool_id() != 0) {
    _internal_set_pool_id(from._internal_pool_id());
  }
  if (from.pg_id() != 0) {
    _internal_set_pg_id(from._internal_pg_id());
  }
  if (from.term() != 0) {
    _internal_set_term(from._internal_term());
  }
  if (from.last_idx() != 0) {
    _internal_set_last_idx(from._internal_last_idx());
  }
  if (from.last_term() != 0) {
    _internal_set_last_term(from._internal_last_term());
  }
  if (from.node_id() != 0) {
    _internal_set_node_id(from._internal_node_id());
  }
}

void msg_installsnapshot_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg_installsnapshot_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_installsnapshot_t::CopyFrom(const msg_installsnapshot_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg_installsnapshot_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_installsnapshot_t::IsInitialized() const {
  return true;
}

void msg_installsnapshot_t::InternalSwap(msg_installsnapshot_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(msg_installsnapshot_t, node_id_)
      + sizeof(msg_installsnapshot_t::node_id_)
      - PROTOBUF_FIELD_OFFSET(msg_installsnapshot_t, pool_id_)>(
          reinterpret_cast<char*>(&pool_id_),
          reinterpret_cast<char*>(&other->pool_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata msg_installsnapshot_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msg_installsnapshot_response_t::InitAsDefaultInstance() {
}
class msg_installsnapshot_response_t::_Internal {
 public:
};

msg_installsnapshot_response_t::msg_installsnapshot_response_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:msg_installsnapshot_response_t)
}
msg_installsnapshot_response_t::msg_installsnapshot_response_t(const msg_installsnapshot_response_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&term_, &from.term_,
    static_cast<size_t>(reinterpret_cast<char*>(&lease_) -
    reinterpret_cast<char*>(&term_)) + sizeof(lease_));
  // @@protoc_insertion_point(copy_constructor:msg_installsnapshot_response_t)
}

void msg_installsnapshot_response_t::SharedCtor() {
  ::memset(&term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lease_) -
      reinterpret_cast<char*>(&term_)) + sizeof(lease_));
}

msg_installsnapshot_response_t::~msg_installsnapshot_response_t() {
  // @@protoc_insertion_point(destructor:msg_installsnapshot_response_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void msg_installsnapshot_response_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void msg_installsnapshot_response_t::ArenaDtor(void* object) {
  msg_installsnapshot_response_t* _this = reinterpret_cast< msg_installsnapshot_response_t* >(object);
  (void)_this;
}
void msg_installsnapshot_response_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void msg_installsnapshot_response_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msg_installsnapshot_response_t& msg_installsnapshot_response_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msg_installsnapshot_response_t_raft_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void msg_installsnapshot_response_t::Clear() {
// @@protoc_insertion_point(message_clear_start:msg_installsnapshot_response_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lease_) -
      reinterpret_cast<char*>(&term_)) + sizeof(lease_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* msg_installsnapshot_response_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 node_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          node_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 term = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          term_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 last_idx = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          last_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 complete = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          complete_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 lease = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          lease_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msg_installsnapshot_response_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg_installsnapshot_response_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 node_id = 1;
  if (this->node_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_node_id(), target);
  }

  // int64 term = 2;
  if (this->term() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_term(), target);
  }

  // int64 last_idx = 3;
  if (this->last_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_last_idx(), target);
  }

  // int32 complete = 4;
  if (this->complete() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_complete(), target);
  }

  // int64 lease = 5;
  if (this->lease() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_lease(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg_installsnapshot_response_t)
  return target;
}

size_t msg_installsnapshot_response_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg_installsnapshot_response_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 term = 2;
  if (this->term() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_term());
  }

  // int32 node_id = 1;
  if (this->node_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_node_id());
  }

  // int32 complete = 4;
  if (this->complete() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_complete());
  }

  // int64 last_idx = 3;
  if (this->last_idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_last_idx());
  }

  // int64 lease = 5;
  if (this->lease() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_lease());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msg_installsnapshot_response_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg_installsnapshot_response_t)
  GOOGLE_DCHECK_NE(&from, this);
  const msg_installsnapshot_response_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msg_installsnapshot_response_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg_installsnapshot_response_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg_installsnapshot_response_t)
    MergeFrom(*source);
  }
}

void msg_installsnapshot_response_t::MergeFrom(const msg_installsnapshot_response_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg_installsnapshot_response_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.term() != 0) {
    _internal_set_term(from._internal_term());
  }
  if (from.node_id() != 0) {
    _internal_set_node_id(from._internal_node_id());
  }
  if (from.complete() != 0) {
    _internal_set_complete(from._internal_complete());
  }
  if (from.last_idx() != 0) {
    _internal_set_last_idx(from._internal_last_idx());
  }
  if (from.lease() != 0) {
    _internal_set_lease(from._internal_lease());
  }
}

void msg_installsnapshot_response_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg_installsnapshot_response_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_installsnapshot_response_t::CopyFrom(const msg_installsnapshot_response_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg_installsnapshot_response_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_installsnapshot_response_t::IsInitialized() const {
  return true;
}

void msg_installsnapshot_response_t::InternalSwap(msg_installsnapshot_response_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(msg_installsnapshot_response_t, lease_)
      + sizeof(msg_installsnapshot_response_t::lease_)
      - PROTOBUF_FIELD_OFFSET(msg_installsnapshot_response_t, term_)>(
          reinterpret_cast<char*>(&term_),
          reinterpret_cast<char*>(&other->term_));
}

::PROTOBUF_NAMESPACE_ID::Metadata msg_installsnapshot_response_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

rpc_service_raft::~rpc_service_raft() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* rpc_service_raft::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_raft_5fmsg_2eproto);
  return file_level_service_descriptors_raft_5fmsg_2eproto[0];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* rpc_service_raft::GetDescriptor() {
  return descriptor();
}

void rpc_service_raft::append_entries(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::msg_appendentries_t*,
                         ::msg_appendentries_response_t*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method append_entries() not implemented.");
  done->Run();
}

void rpc_service_raft::vote(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::msg_requestvote_t*,
                         ::msg_requestvote_response_t*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method vote() not implemented.");
  done->Run();
}

void rpc_service_raft::install_snapshot(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::msg_installsnapshot_t*,
                         ::msg_installsnapshot_response_t*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method install_snapshot() not implemented.");
  done->Run();
}

void rpc_service_raft::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_raft_5fmsg_2eproto[0]);
  switch(method->index()) {
    case 0:
      append_entries(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::msg_appendentries_t*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::msg_appendentries_response_t*>(
                 response),
             done);
      break;
    case 1:
      vote(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::msg_requestvote_t*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::msg_requestvote_response_t*>(
                 response),
             done);
      break;
    case 2:
      install_snapshot(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::msg_installsnapshot_t*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::msg_installsnapshot_response_t*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& rpc_service_raft::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::msg_appendentries_t::default_instance();
    case 1:
      return ::msg_requestvote_t::default_instance();
    case 2:
      return ::msg_installsnapshot_t::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& rpc_service_raft::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::msg_appendentries_response_t::default_instance();
    case 1:
      return ::msg_requestvote_response_t::default_instance();
    case 2:
      return ::msg_installsnapshot_response_t::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

rpc_service_raft_Stub::rpc_service_raft_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
rpc_service_raft_Stub::rpc_service_raft_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
rpc_service_raft_Stub::~rpc_service_raft_Stub() {
  if (owns_channel_) delete channel_;
}

void rpc_service_raft_Stub::append_entries(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::msg_appendentries_t* request,
                              ::msg_appendentries_response_t* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void rpc_service_raft_Stub::vote(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::msg_requestvote_t* request,
                              ::msg_requestvote_response_t* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void rpc_service_raft_Stub::install_snapshot(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::msg_installsnapshot_t* request,
                              ::msg_installsnapshot_response_t* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::raft_entry_t* Arena::CreateMaybeMessage< ::raft_entry_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::raft_entry_t >(arena);
}
template<> PROTOBUF_NOINLINE ::msg_appendentries_t* Arena::CreateMaybeMessage< ::msg_appendentries_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg_appendentries_t >(arena);
}
template<> PROTOBUF_NOINLINE ::msg_appendentries_response_t* Arena::CreateMaybeMessage< ::msg_appendentries_response_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg_appendentries_response_t >(arena);
}
template<> PROTOBUF_NOINLINE ::msg_requestvote_t* Arena::CreateMaybeMessage< ::msg_requestvote_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg_requestvote_t >(arena);
}
template<> PROTOBUF_NOINLINE ::msg_requestvote_response_t* Arena::CreateMaybeMessage< ::msg_requestvote_response_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg_requestvote_response_t >(arena);
}
template<> PROTOBUF_NOINLINE ::msg_installsnapshot_t* Arena::CreateMaybeMessage< ::msg_installsnapshot_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg_installsnapshot_t >(arena);
}
template<> PROTOBUF_NOINLINE ::msg_installsnapshot_response_t* Arena::CreateMaybeMessage< ::msg_installsnapshot_response_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg_installsnapshot_response_t >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
