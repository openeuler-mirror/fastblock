// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: osd_msg.proto

#include "osd_msg.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace osd {
class write_requestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<write_request> _instance;
} _write_request_default_instance_;
class write_replyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<write_reply> _instance;
} _write_reply_default_instance_;
class read_requestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<read_request> _instance;
} _read_request_default_instance_;
class read_replyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<read_reply> _instance;
} _read_reply_default_instance_;
class delete_requestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<delete_request> _instance;
} _delete_request_default_instance_;
class delete_replyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<delete_reply> _instance;
} _delete_reply_default_instance_;
class write_cmdDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<write_cmd> _instance;
} _write_cmd_default_instance_;
class read_cmdDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<read_cmd> _instance;
} _read_cmd_default_instance_;
class delete_cmdDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<delete_cmd> _instance;
} _delete_cmd_default_instance_;
class bench_requestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<bench_request> _instance;
} _bench_request_default_instance_;
class bench_responseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<bench_response> _instance;
} _bench_response_default_instance_;
class pg_leader_requestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<pg_leader_request> _instance;
} _pg_leader_request_default_instance_;
class pg_leader_responseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<pg_leader_response> _instance;
} _pg_leader_response_default_instance_;
}  // namespace osd
static void InitDefaultsscc_info_bench_request_osd_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::osd::_bench_request_default_instance_;
    new (ptr) ::osd::bench_request();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osd::bench_request::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_bench_request_osd_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_bench_request_osd_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_bench_response_osd_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::osd::_bench_response_default_instance_;
    new (ptr) ::osd::bench_response();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osd::bench_response::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_bench_response_osd_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_bench_response_osd_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_delete_cmd_osd_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::osd::_delete_cmd_default_instance_;
    new (ptr) ::osd::delete_cmd();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osd::delete_cmd::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_delete_cmd_osd_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_delete_cmd_osd_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_delete_reply_osd_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::osd::_delete_reply_default_instance_;
    new (ptr) ::osd::delete_reply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osd::delete_reply::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_delete_reply_osd_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_delete_reply_osd_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_delete_request_osd_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::osd::_delete_request_default_instance_;
    new (ptr) ::osd::delete_request();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osd::delete_request::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_delete_request_osd_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_delete_request_osd_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_pg_leader_request_osd_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::osd::_pg_leader_request_default_instance_;
    new (ptr) ::osd::pg_leader_request();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osd::pg_leader_request::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_pg_leader_request_osd_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_pg_leader_request_osd_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_pg_leader_response_osd_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::osd::_pg_leader_response_default_instance_;
    new (ptr) ::osd::pg_leader_response();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osd::pg_leader_response::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_pg_leader_response_osd_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_pg_leader_response_osd_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_read_cmd_osd_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::osd::_read_cmd_default_instance_;
    new (ptr) ::osd::read_cmd();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osd::read_cmd::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_read_cmd_osd_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_read_cmd_osd_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_read_reply_osd_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::osd::_read_reply_default_instance_;
    new (ptr) ::osd::read_reply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osd::read_reply::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_read_reply_osd_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_read_reply_osd_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_read_request_osd_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::osd::_read_request_default_instance_;
    new (ptr) ::osd::read_request();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osd::read_request::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_read_request_osd_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_read_request_osd_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_write_cmd_osd_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::osd::_write_cmd_default_instance_;
    new (ptr) ::osd::write_cmd();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osd::write_cmd::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_write_cmd_osd_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_write_cmd_osd_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_write_reply_osd_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::osd::_write_reply_default_instance_;
    new (ptr) ::osd::write_reply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osd::write_reply::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_write_reply_osd_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_write_reply_osd_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_write_request_osd_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::osd::_write_request_default_instance_;
    new (ptr) ::osd::write_request();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osd::write_request::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_write_request_osd_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_write_request_osd_5fmsg_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_osd_5fmsg_2eproto[13];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_osd_5fmsg_2eproto = nullptr;
static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* file_level_service_descriptors_osd_5fmsg_2eproto[1];

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_osd_5fmsg_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::osd::write_request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::osd::write_request, pool_id_),
  PROTOBUF_FIELD_OFFSET(::osd::write_request, pg_id_),
  PROTOBUF_FIELD_OFFSET(::osd::write_request, object_name_),
  PROTOBUF_FIELD_OFFSET(::osd::write_request, offset_),
  PROTOBUF_FIELD_OFFSET(::osd::write_request, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::osd::write_reply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::osd::write_reply, state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::osd::read_request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::osd::read_request, pool_id_),
  PROTOBUF_FIELD_OFFSET(::osd::read_request, pg_id_),
  PROTOBUF_FIELD_OFFSET(::osd::read_request, object_name_),
  PROTOBUF_FIELD_OFFSET(::osd::read_request, offset_),
  PROTOBUF_FIELD_OFFSET(::osd::read_request, length_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::osd::read_reply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::osd::read_reply, state_),
  PROTOBUF_FIELD_OFFSET(::osd::read_reply, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::osd::delete_request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::osd::delete_request, pool_id_),
  PROTOBUF_FIELD_OFFSET(::osd::delete_request, pg_id_),
  PROTOBUF_FIELD_OFFSET(::osd::delete_request, object_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::osd::delete_reply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::osd::delete_reply, state_),
  PROTOBUF_FIELD_OFFSET(::osd::delete_reply, str_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::osd::write_cmd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::osd::write_cmd, object_name_),
  PROTOBUF_FIELD_OFFSET(::osd::write_cmd, offset_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::osd::read_cmd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::osd::read_cmd, object_name_),
  PROTOBUF_FIELD_OFFSET(::osd::read_cmd, offset_),
  PROTOBUF_FIELD_OFFSET(::osd::read_cmd, length_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::osd::delete_cmd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::osd::delete_cmd, object_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::osd::bench_request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::osd::bench_request, req_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::osd::bench_response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::osd::bench_response, resp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::osd::pg_leader_request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::osd::pg_leader_request, pool_id_),
  PROTOBUF_FIELD_OFFSET(::osd::pg_leader_request, pg_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::osd::pg_leader_response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::osd::pg_leader_response, state_),
  PROTOBUF_FIELD_OFFSET(::osd::pg_leader_response, leader_id_),
  PROTOBUF_FIELD_OFFSET(::osd::pg_leader_response, leader_addr_),
  PROTOBUF_FIELD_OFFSET(::osd::pg_leader_response, leader_port_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::osd::write_request)},
  { 10, -1, sizeof(::osd::write_reply)},
  { 16, -1, sizeof(::osd::read_request)},
  { 26, -1, sizeof(::osd::read_reply)},
  { 33, -1, sizeof(::osd::delete_request)},
  { 41, -1, sizeof(::osd::delete_reply)},
  { 48, -1, sizeof(::osd::write_cmd)},
  { 55, -1, sizeof(::osd::read_cmd)},
  { 63, -1, sizeof(::osd::delete_cmd)},
  { 69, -1, sizeof(::osd::bench_request)},
  { 75, -1, sizeof(::osd::bench_response)},
  { 81, -1, sizeof(::osd::pg_leader_request)},
  { 88, -1, sizeof(::osd::pg_leader_response)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osd::_write_request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osd::_write_reply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osd::_read_request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osd::_read_reply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osd::_delete_request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osd::_delete_reply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osd::_write_cmd_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osd::_read_cmd_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osd::_delete_cmd_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osd::_bench_request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osd::_bench_response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osd::_pg_leader_request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osd::_pg_leader_response_default_instance_),
};

const char descriptor_table_protodef_osd_5fmsg_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rosd_msg.proto\022\003osd\"b\n\rwrite_request\022\017\n"
  "\007pool_id\030\001 \001(\004\022\r\n\005pg_id\030\002 \001(\004\022\023\n\013object_"
  "name\030\003 \001(\014\022\016\n\006offset\030\004 \001(\004\022\014\n\004data\030\005 \001(\014"
  "\"\034\n\013write_reply\022\r\n\005state\030\001 \001(\005\"c\n\014read_r"
  "equest\022\017\n\007pool_id\030\001 \001(\004\022\r\n\005pg_id\030\002 \001(\004\022\023"
  "\n\013object_name\030\003 \001(\014\022\016\n\006offset\030\004 \001(\004\022\016\n\006l"
  "ength\030\005 \001(\004\")\n\nread_reply\022\r\n\005state\030\001 \001(\005"
  "\022\014\n\004data\030\002 \001(\014\"E\n\016delete_request\022\017\n\007pool"
  "_id\030\001 \001(\004\022\r\n\005pg_id\030\002 \001(\004\022\023\n\013object_name\030"
  "\003 \001(\014\"*\n\014delete_reply\022\r\n\005state\030\001 \001(\005\022\013\n\003"
  "str\030\002 \001(\014\"0\n\twrite_cmd\022\023\n\013object_name\030\001 "
  "\001(\014\022\016\n\006offset\030\002 \001(\004\"\?\n\010read_cmd\022\023\n\013objec"
  "t_name\030\001 \001(\014\022\016\n\006offset\030\002 \001(\004\022\016\n\006length\030\003"
  " \001(\004\"!\n\ndelete_cmd\022\023\n\013object_name\030\001 \001(\014\""
  "\034\n\rbench_request\022\013\n\003req\030\001 \001(\014\"\036\n\016bench_r"
  "esponse\022\014\n\004resp\030\001 \001(\014\"3\n\021pg_leader_reque"
  "st\022\017\n\007pool_id\030\001 \001(\004\022\r\n\005pg_id\030\002 \001(\004\"`\n\022pg"
  "_leader_response\022\r\n\005state\030\001 \001(\005\022\021\n\tleade"
  "r_id\030\002 \001(\005\022\023\n\013leader_addr\030\003 \001(\014\022\023\n\013leade"
  "r_port\030\004 \001(\0052\273\002\n\017rpc_service_osd\0225\n\rproc"
  "ess_write\022\022.osd.write_request\032\020.osd.writ"
  "e_reply\0222\n\014process_read\022\021.osd.read_reque"
  "st\032\017.osd.read_reply\0228\n\016process_delete\022\023."
  "osd.delete_request\032\021.osd.delete_reply\022<\n"
  "\021process_rpc_bench\022\022.osd.bench_request\032\023"
  ".osd.bench_response\022E\n\022process_get_leade"
  "r\022\026.osd.pg_leader_request\032\027.osd.pg_leade"
  "r_responseB\003\200\001\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_osd_5fmsg_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_osd_5fmsg_2eproto_sccs[13] = {
  &scc_info_bench_request_osd_5fmsg_2eproto.base,
  &scc_info_bench_response_osd_5fmsg_2eproto.base,
  &scc_info_delete_cmd_osd_5fmsg_2eproto.base,
  &scc_info_delete_reply_osd_5fmsg_2eproto.base,
  &scc_info_delete_request_osd_5fmsg_2eproto.base,
  &scc_info_pg_leader_request_osd_5fmsg_2eproto.base,
  &scc_info_pg_leader_response_osd_5fmsg_2eproto.base,
  &scc_info_read_cmd_osd_5fmsg_2eproto.base,
  &scc_info_read_reply_osd_5fmsg_2eproto.base,
  &scc_info_read_request_osd_5fmsg_2eproto.base,
  &scc_info_write_cmd_osd_5fmsg_2eproto.base,
  &scc_info_write_reply_osd_5fmsg_2eproto.base,
  &scc_info_write_request_osd_5fmsg_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_osd_5fmsg_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_osd_5fmsg_2eproto = {
  false, false, descriptor_table_protodef_osd_5fmsg_2eproto, "osd_msg.proto", 1103,
  &descriptor_table_osd_5fmsg_2eproto_once, descriptor_table_osd_5fmsg_2eproto_sccs, descriptor_table_osd_5fmsg_2eproto_deps, 13, 0,
  schemas, file_default_instances, TableStruct_osd_5fmsg_2eproto::offsets,
  file_level_metadata_osd_5fmsg_2eproto, 13, file_level_enum_descriptors_osd_5fmsg_2eproto, file_level_service_descriptors_osd_5fmsg_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_osd_5fmsg_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_osd_5fmsg_2eproto)), true);
namespace osd {

// ===================================================================

void write_request::InitAsDefaultInstance() {
}
class write_request::_Internal {
 public:
};

write_request::write_request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:osd.write_request)
}
write_request::write_request(const write_request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  object_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_object_name().empty()) {
    object_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_object_name(),
      GetArena());
  }
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_data(),
      GetArena());
  }
  ::memcpy(&pool_id_, &from.pool_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&offset_) -
    reinterpret_cast<char*>(&pool_id_)) + sizeof(offset_));
  // @@protoc_insertion_point(copy_constructor:osd.write_request)
}

void write_request::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_write_request_osd_5fmsg_2eproto.base);
  object_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&pool_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&offset_) -
      reinterpret_cast<char*>(&pool_id_)) + sizeof(offset_));
}

write_request::~write_request() {
  // @@protoc_insertion_point(destructor:osd.write_request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void write_request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  object_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void write_request::ArenaDtor(void* object) {
  write_request* _this = reinterpret_cast< write_request* >(object);
  (void)_this;
}
void write_request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void write_request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const write_request& write_request::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_write_request_osd_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void write_request::Clear() {
// @@protoc_insertion_point(message_clear_start:osd.write_request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  object_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&pool_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&offset_) -
      reinterpret_cast<char*>(&pool_id_)) + sizeof(offset_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* write_request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 pool_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          pool_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 pg_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          pg_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes object_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_object_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 offset = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes data = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* write_request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osd.write_request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 pool_id = 1;
  if (this->pool_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_pool_id(), target);
  }

  // uint64 pg_id = 2;
  if (this->pg_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_pg_id(), target);
  }

  // bytes object_name = 3;
  if (this->object_name().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_object_name(), target);
  }

  // uint64 offset = 4;
  if (this->offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_offset(), target);
  }

  // bytes data = 5;
  if (this->data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osd.write_request)
  return target;
}

size_t write_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osd.write_request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes object_name = 3;
  if (this->object_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_object_name());
  }

  // bytes data = 5;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // uint64 pool_id = 1;
  if (this->pool_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_pool_id());
  }

  // uint64 pg_id = 2;
  if (this->pg_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_pg_id());
  }

  // uint64 offset = 4;
  if (this->offset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_offset());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void write_request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osd.write_request)
  GOOGLE_DCHECK_NE(&from, this);
  const write_request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<write_request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osd.write_request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osd.write_request)
    MergeFrom(*source);
  }
}

void write_request::MergeFrom(const write_request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osd.write_request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.object_name().size() > 0) {
    _internal_set_object_name(from._internal_object_name());
  }
  if (from.data().size() > 0) {
    _internal_set_data(from._internal_data());
  }
  if (from.pool_id() != 0) {
    _internal_set_pool_id(from._internal_pool_id());
  }
  if (from.pg_id() != 0) {
    _internal_set_pg_id(from._internal_pg_id());
  }
  if (from.offset() != 0) {
    _internal_set_offset(from._internal_offset());
  }
}

void write_request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osd.write_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void write_request::CopyFrom(const write_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osd.write_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool write_request::IsInitialized() const {
  return true;
}

void write_request::InternalSwap(write_request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  object_name_.Swap(&other->object_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(write_request, offset_)
      + sizeof(write_request::offset_)
      - PROTOBUF_FIELD_OFFSET(write_request, pool_id_)>(
          reinterpret_cast<char*>(&pool_id_),
          reinterpret_cast<char*>(&other->pool_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata write_request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void write_reply::InitAsDefaultInstance() {
}
class write_reply::_Internal {
 public:
};

write_reply::write_reply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:osd.write_reply)
}
write_reply::write_reply(const write_reply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:osd.write_reply)
}

void write_reply::SharedCtor() {
  state_ = 0;
}

write_reply::~write_reply() {
  // @@protoc_insertion_point(destructor:osd.write_reply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void write_reply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void write_reply::ArenaDtor(void* object) {
  write_reply* _this = reinterpret_cast< write_reply* >(object);
  (void)_this;
}
void write_reply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void write_reply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const write_reply& write_reply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_write_reply_osd_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void write_reply::Clear() {
// @@protoc_insertion_point(message_clear_start:osd.write_reply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  state_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* write_reply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* write_reply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osd.write_reply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 state = 1;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osd.write_reply)
  return target;
}

size_t write_reply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osd.write_reply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 state = 1;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_state());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void write_reply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osd.write_reply)
  GOOGLE_DCHECK_NE(&from, this);
  const write_reply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<write_reply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osd.write_reply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osd.write_reply)
    MergeFrom(*source);
  }
}

void write_reply::MergeFrom(const write_reply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osd.write_reply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
}

void write_reply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osd.write_reply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void write_reply::CopyFrom(const write_reply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osd.write_reply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool write_reply::IsInitialized() const {
  return true;
}

void write_reply::InternalSwap(write_reply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(state_, other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata write_reply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void read_request::InitAsDefaultInstance() {
}
class read_request::_Internal {
 public:
};

read_request::read_request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:osd.read_request)
}
read_request::read_request(const read_request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  object_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_object_name().empty()) {
    object_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_object_name(),
      GetArena());
  }
  ::memcpy(&pool_id_, &from.pool_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&length_) -
    reinterpret_cast<char*>(&pool_id_)) + sizeof(length_));
  // @@protoc_insertion_point(copy_constructor:osd.read_request)
}

void read_request::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_read_request_osd_5fmsg_2eproto.base);
  object_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&pool_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&length_) -
      reinterpret_cast<char*>(&pool_id_)) + sizeof(length_));
}

read_request::~read_request() {
  // @@protoc_insertion_point(destructor:osd.read_request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void read_request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  object_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void read_request::ArenaDtor(void* object) {
  read_request* _this = reinterpret_cast< read_request* >(object);
  (void)_this;
}
void read_request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void read_request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const read_request& read_request::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_read_request_osd_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void read_request::Clear() {
// @@protoc_insertion_point(message_clear_start:osd.read_request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  object_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&pool_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&length_) -
      reinterpret_cast<char*>(&pool_id_)) + sizeof(length_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* read_request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 pool_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          pool_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 pg_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          pg_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes object_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_object_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 offset = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 length = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* read_request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osd.read_request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 pool_id = 1;
  if (this->pool_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_pool_id(), target);
  }

  // uint64 pg_id = 2;
  if (this->pg_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_pg_id(), target);
  }

  // bytes object_name = 3;
  if (this->object_name().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_object_name(), target);
  }

  // uint64 offset = 4;
  if (this->offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_offset(), target);
  }

  // uint64 length = 5;
  if (this->length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_length(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osd.read_request)
  return target;
}

size_t read_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osd.read_request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes object_name = 3;
  if (this->object_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_object_name());
  }

  // uint64 pool_id = 1;
  if (this->pool_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_pool_id());
  }

  // uint64 pg_id = 2;
  if (this->pg_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_pg_id());
  }

  // uint64 offset = 4;
  if (this->offset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_offset());
  }

  // uint64 length = 5;
  if (this->length() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_length());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void read_request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osd.read_request)
  GOOGLE_DCHECK_NE(&from, this);
  const read_request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<read_request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osd.read_request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osd.read_request)
    MergeFrom(*source);
  }
}

void read_request::MergeFrom(const read_request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osd.read_request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.object_name().size() > 0) {
    _internal_set_object_name(from._internal_object_name());
  }
  if (from.pool_id() != 0) {
    _internal_set_pool_id(from._internal_pool_id());
  }
  if (from.pg_id() != 0) {
    _internal_set_pg_id(from._internal_pg_id());
  }
  if (from.offset() != 0) {
    _internal_set_offset(from._internal_offset());
  }
  if (from.length() != 0) {
    _internal_set_length(from._internal_length());
  }
}

void read_request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osd.read_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void read_request::CopyFrom(const read_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osd.read_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool read_request::IsInitialized() const {
  return true;
}

void read_request::InternalSwap(read_request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  object_name_.Swap(&other->object_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(read_request, length_)
      + sizeof(read_request::length_)
      - PROTOBUF_FIELD_OFFSET(read_request, pool_id_)>(
          reinterpret_cast<char*>(&pool_id_),
          reinterpret_cast<char*>(&other->pool_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata read_request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void read_reply::InitAsDefaultInstance() {
}
class read_reply::_Internal {
 public:
};

read_reply::read_reply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:osd.read_reply)
}
read_reply::read_reply(const read_reply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_data(),
      GetArena());
  }
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:osd.read_reply)
}

void read_reply::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_read_reply_osd_5fmsg_2eproto.base);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  state_ = 0;
}

read_reply::~read_reply() {
  // @@protoc_insertion_point(destructor:osd.read_reply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void read_reply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void read_reply::ArenaDtor(void* object) {
  read_reply* _this = reinterpret_cast< read_reply* >(object);
  (void)_this;
}
void read_reply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void read_reply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const read_reply& read_reply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_read_reply_osd_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void read_reply::Clear() {
// @@protoc_insertion_point(message_clear_start:osd.read_reply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  state_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* read_reply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* read_reply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osd.read_reply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 state = 1;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_state(), target);
  }

  // bytes data = 2;
  if (this->data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osd.read_reply)
  return target;
}

size_t read_reply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osd.read_reply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 2;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // int32 state = 1;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_state());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void read_reply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osd.read_reply)
  GOOGLE_DCHECK_NE(&from, this);
  const read_reply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<read_reply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osd.read_reply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osd.read_reply)
    MergeFrom(*source);
  }
}

void read_reply::MergeFrom(const read_reply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osd.read_reply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {
    _internal_set_data(from._internal_data());
  }
  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
}

void read_reply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osd.read_reply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void read_reply::CopyFrom(const read_reply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osd.read_reply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool read_reply::IsInitialized() const {
  return true;
}

void read_reply::InternalSwap(read_reply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(state_, other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata read_reply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void delete_request::InitAsDefaultInstance() {
}
class delete_request::_Internal {
 public:
};

delete_request::delete_request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:osd.delete_request)
}
delete_request::delete_request(const delete_request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  object_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_object_name().empty()) {
    object_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_object_name(),
      GetArena());
  }
  ::memcpy(&pool_id_, &from.pool_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&pg_id_) -
    reinterpret_cast<char*>(&pool_id_)) + sizeof(pg_id_));
  // @@protoc_insertion_point(copy_constructor:osd.delete_request)
}

void delete_request::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_delete_request_osd_5fmsg_2eproto.base);
  object_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&pool_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pg_id_) -
      reinterpret_cast<char*>(&pool_id_)) + sizeof(pg_id_));
}

delete_request::~delete_request() {
  // @@protoc_insertion_point(destructor:osd.delete_request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void delete_request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  object_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void delete_request::ArenaDtor(void* object) {
  delete_request* _this = reinterpret_cast< delete_request* >(object);
  (void)_this;
}
void delete_request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void delete_request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const delete_request& delete_request::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_delete_request_osd_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void delete_request::Clear() {
// @@protoc_insertion_point(message_clear_start:osd.delete_request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  object_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&pool_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pg_id_) -
      reinterpret_cast<char*>(&pool_id_)) + sizeof(pg_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* delete_request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 pool_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          pool_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 pg_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          pg_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes object_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_object_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* delete_request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osd.delete_request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 pool_id = 1;
  if (this->pool_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_pool_id(), target);
  }

  // uint64 pg_id = 2;
  if (this->pg_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_pg_id(), target);
  }

  // bytes object_name = 3;
  if (this->object_name().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_object_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osd.delete_request)
  return target;
}

size_t delete_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osd.delete_request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes object_name = 3;
  if (this->object_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_object_name());
  }

  // uint64 pool_id = 1;
  if (this->pool_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_pool_id());
  }

  // uint64 pg_id = 2;
  if (this->pg_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_pg_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void delete_request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osd.delete_request)
  GOOGLE_DCHECK_NE(&from, this);
  const delete_request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<delete_request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osd.delete_request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osd.delete_request)
    MergeFrom(*source);
  }
}

void delete_request::MergeFrom(const delete_request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osd.delete_request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.object_name().size() > 0) {
    _internal_set_object_name(from._internal_object_name());
  }
  if (from.pool_id() != 0) {
    _internal_set_pool_id(from._internal_pool_id());
  }
  if (from.pg_id() != 0) {
    _internal_set_pg_id(from._internal_pg_id());
  }
}

void delete_request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osd.delete_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void delete_request::CopyFrom(const delete_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osd.delete_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool delete_request::IsInitialized() const {
  return true;
}

void delete_request::InternalSwap(delete_request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  object_name_.Swap(&other->object_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(delete_request, pg_id_)
      + sizeof(delete_request::pg_id_)
      - PROTOBUF_FIELD_OFFSET(delete_request, pool_id_)>(
          reinterpret_cast<char*>(&pool_id_),
          reinterpret_cast<char*>(&other->pool_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata delete_request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void delete_reply::InitAsDefaultInstance() {
}
class delete_reply::_Internal {
 public:
};

delete_reply::delete_reply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:osd.delete_reply)
}
delete_reply::delete_reply(const delete_reply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_str().empty()) {
    str_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_str(),
      GetArena());
  }
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:osd.delete_reply)
}

void delete_reply::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_delete_reply_osd_5fmsg_2eproto.base);
  str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  state_ = 0;
}

delete_reply::~delete_reply() {
  // @@protoc_insertion_point(destructor:osd.delete_reply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void delete_reply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  str_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void delete_reply::ArenaDtor(void* object) {
  delete_reply* _this = reinterpret_cast< delete_reply* >(object);
  (void)_this;
}
void delete_reply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void delete_reply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const delete_reply& delete_reply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_delete_reply_osd_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void delete_reply::Clear() {
// @@protoc_insertion_point(message_clear_start:osd.delete_reply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  str_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  state_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* delete_reply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes str = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_str();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* delete_reply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osd.delete_reply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 state = 1;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_state(), target);
  }

  // bytes str = 2;
  if (this->str().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_str(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osd.delete_reply)
  return target;
}

size_t delete_reply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osd.delete_reply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes str = 2;
  if (this->str().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_str());
  }

  // int32 state = 1;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_state());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void delete_reply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osd.delete_reply)
  GOOGLE_DCHECK_NE(&from, this);
  const delete_reply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<delete_reply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osd.delete_reply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osd.delete_reply)
    MergeFrom(*source);
  }
}

void delete_reply::MergeFrom(const delete_reply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osd.delete_reply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.str().size() > 0) {
    _internal_set_str(from._internal_str());
  }
  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
}

void delete_reply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osd.delete_reply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void delete_reply::CopyFrom(const delete_reply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osd.delete_reply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool delete_reply::IsInitialized() const {
  return true;
}

void delete_reply::InternalSwap(delete_reply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  str_.Swap(&other->str_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(state_, other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata delete_reply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void write_cmd::InitAsDefaultInstance() {
}
class write_cmd::_Internal {
 public:
};

write_cmd::write_cmd(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:osd.write_cmd)
}
write_cmd::write_cmd(const write_cmd& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  object_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_object_name().empty()) {
    object_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_object_name(),
      GetArena());
  }
  offset_ = from.offset_;
  // @@protoc_insertion_point(copy_constructor:osd.write_cmd)
}

void write_cmd::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_write_cmd_osd_5fmsg_2eproto.base);
  object_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  offset_ = PROTOBUF_ULONGLONG(0);
}

write_cmd::~write_cmd() {
  // @@protoc_insertion_point(destructor:osd.write_cmd)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void write_cmd::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  object_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void write_cmd::ArenaDtor(void* object) {
  write_cmd* _this = reinterpret_cast< write_cmd* >(object);
  (void)_this;
}
void write_cmd::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void write_cmd::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const write_cmd& write_cmd::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_write_cmd_osd_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void write_cmd::Clear() {
// @@protoc_insertion_point(message_clear_start:osd.write_cmd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  object_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  offset_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* write_cmd::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes object_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_object_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 offset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* write_cmd::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osd.write_cmd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes object_name = 1;
  if (this->object_name().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_object_name(), target);
  }

  // uint64 offset = 2;
  if (this->offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_offset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osd.write_cmd)
  return target;
}

size_t write_cmd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osd.write_cmd)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes object_name = 1;
  if (this->object_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_object_name());
  }

  // uint64 offset = 2;
  if (this->offset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_offset());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void write_cmd::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osd.write_cmd)
  GOOGLE_DCHECK_NE(&from, this);
  const write_cmd* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<write_cmd>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osd.write_cmd)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osd.write_cmd)
    MergeFrom(*source);
  }
}

void write_cmd::MergeFrom(const write_cmd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osd.write_cmd)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.object_name().size() > 0) {
    _internal_set_object_name(from._internal_object_name());
  }
  if (from.offset() != 0) {
    _internal_set_offset(from._internal_offset());
  }
}

void write_cmd::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osd.write_cmd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void write_cmd::CopyFrom(const write_cmd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osd.write_cmd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool write_cmd::IsInitialized() const {
  return true;
}

void write_cmd::InternalSwap(write_cmd* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  object_name_.Swap(&other->object_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(offset_, other->offset_);
}

::PROTOBUF_NAMESPACE_ID::Metadata write_cmd::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void read_cmd::InitAsDefaultInstance() {
}
class read_cmd::_Internal {
 public:
};

read_cmd::read_cmd(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:osd.read_cmd)
}
read_cmd::read_cmd(const read_cmd& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  object_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_object_name().empty()) {
    object_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_object_name(),
      GetArena());
  }
  ::memcpy(&offset_, &from.offset_,
    static_cast<size_t>(reinterpret_cast<char*>(&length_) -
    reinterpret_cast<char*>(&offset_)) + sizeof(length_));
  // @@protoc_insertion_point(copy_constructor:osd.read_cmd)
}

void read_cmd::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_read_cmd_osd_5fmsg_2eproto.base);
  object_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&offset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&length_) -
      reinterpret_cast<char*>(&offset_)) + sizeof(length_));
}

read_cmd::~read_cmd() {
  // @@protoc_insertion_point(destructor:osd.read_cmd)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void read_cmd::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  object_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void read_cmd::ArenaDtor(void* object) {
  read_cmd* _this = reinterpret_cast< read_cmd* >(object);
  (void)_this;
}
void read_cmd::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void read_cmd::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const read_cmd& read_cmd::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_read_cmd_osd_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void read_cmd::Clear() {
// @@protoc_insertion_point(message_clear_start:osd.read_cmd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  object_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&offset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&length_) -
      reinterpret_cast<char*>(&offset_)) + sizeof(length_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* read_cmd::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes object_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_object_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 offset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 length = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* read_cmd::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osd.read_cmd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes object_name = 1;
  if (this->object_name().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_object_name(), target);
  }

  // uint64 offset = 2;
  if (this->offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_offset(), target);
  }

  // uint64 length = 3;
  if (this->length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_length(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osd.read_cmd)
  return target;
}

size_t read_cmd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osd.read_cmd)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes object_name = 1;
  if (this->object_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_object_name());
  }

  // uint64 offset = 2;
  if (this->offset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_offset());
  }

  // uint64 length = 3;
  if (this->length() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_length());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void read_cmd::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osd.read_cmd)
  GOOGLE_DCHECK_NE(&from, this);
  const read_cmd* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<read_cmd>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osd.read_cmd)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osd.read_cmd)
    MergeFrom(*source);
  }
}

void read_cmd::MergeFrom(const read_cmd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osd.read_cmd)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.object_name().size() > 0) {
    _internal_set_object_name(from._internal_object_name());
  }
  if (from.offset() != 0) {
    _internal_set_offset(from._internal_offset());
  }
  if (from.length() != 0) {
    _internal_set_length(from._internal_length());
  }
}

void read_cmd::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osd.read_cmd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void read_cmd::CopyFrom(const read_cmd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osd.read_cmd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool read_cmd::IsInitialized() const {
  return true;
}

void read_cmd::InternalSwap(read_cmd* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  object_name_.Swap(&other->object_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(read_cmd, length_)
      + sizeof(read_cmd::length_)
      - PROTOBUF_FIELD_OFFSET(read_cmd, offset_)>(
          reinterpret_cast<char*>(&offset_),
          reinterpret_cast<char*>(&other->offset_));
}

::PROTOBUF_NAMESPACE_ID::Metadata read_cmd::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void delete_cmd::InitAsDefaultInstance() {
}
class delete_cmd::_Internal {
 public:
};

delete_cmd::delete_cmd(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:osd.delete_cmd)
}
delete_cmd::delete_cmd(const delete_cmd& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  object_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_object_name().empty()) {
    object_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_object_name(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:osd.delete_cmd)
}

void delete_cmd::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_delete_cmd_osd_5fmsg_2eproto.base);
  object_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

delete_cmd::~delete_cmd() {
  // @@protoc_insertion_point(destructor:osd.delete_cmd)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void delete_cmd::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  object_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void delete_cmd::ArenaDtor(void* object) {
  delete_cmd* _this = reinterpret_cast< delete_cmd* >(object);
  (void)_this;
}
void delete_cmd::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void delete_cmd::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const delete_cmd& delete_cmd::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_delete_cmd_osd_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void delete_cmd::Clear() {
// @@protoc_insertion_point(message_clear_start:osd.delete_cmd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  object_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* delete_cmd::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes object_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_object_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* delete_cmd::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osd.delete_cmd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes object_name = 1;
  if (this->object_name().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_object_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osd.delete_cmd)
  return target;
}

size_t delete_cmd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osd.delete_cmd)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes object_name = 1;
  if (this->object_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_object_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void delete_cmd::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osd.delete_cmd)
  GOOGLE_DCHECK_NE(&from, this);
  const delete_cmd* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<delete_cmd>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osd.delete_cmd)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osd.delete_cmd)
    MergeFrom(*source);
  }
}

void delete_cmd::MergeFrom(const delete_cmd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osd.delete_cmd)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.object_name().size() > 0) {
    _internal_set_object_name(from._internal_object_name());
  }
}

void delete_cmd::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osd.delete_cmd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void delete_cmd::CopyFrom(const delete_cmd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osd.delete_cmd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool delete_cmd::IsInitialized() const {
  return true;
}

void delete_cmd::InternalSwap(delete_cmd* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  object_name_.Swap(&other->object_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata delete_cmd::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void bench_request::InitAsDefaultInstance() {
}
class bench_request::_Internal {
 public:
};

bench_request::bench_request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:osd.bench_request)
}
bench_request::bench_request(const bench_request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  req_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_req().empty()) {
    req_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_req(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:osd.bench_request)
}

void bench_request::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_bench_request_osd_5fmsg_2eproto.base);
  req_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

bench_request::~bench_request() {
  // @@protoc_insertion_point(destructor:osd.bench_request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void bench_request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  req_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void bench_request::ArenaDtor(void* object) {
  bench_request* _this = reinterpret_cast< bench_request* >(object);
  (void)_this;
}
void bench_request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void bench_request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const bench_request& bench_request::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_bench_request_osd_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void bench_request::Clear() {
// @@protoc_insertion_point(message_clear_start:osd.bench_request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  req_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* bench_request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes req = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_req();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* bench_request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osd.bench_request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes req = 1;
  if (this->req().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_req(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osd.bench_request)
  return target;
}

size_t bench_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osd.bench_request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes req = 1;
  if (this->req().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_req());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void bench_request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osd.bench_request)
  GOOGLE_DCHECK_NE(&from, this);
  const bench_request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<bench_request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osd.bench_request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osd.bench_request)
    MergeFrom(*source);
  }
}

void bench_request::MergeFrom(const bench_request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osd.bench_request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.req().size() > 0) {
    _internal_set_req(from._internal_req());
  }
}

void bench_request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osd.bench_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void bench_request::CopyFrom(const bench_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osd.bench_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool bench_request::IsInitialized() const {
  return true;
}

void bench_request::InternalSwap(bench_request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  req_.Swap(&other->req_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata bench_request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void bench_response::InitAsDefaultInstance() {
}
class bench_response::_Internal {
 public:
};

bench_response::bench_response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:osd.bench_response)
}
bench_response::bench_response(const bench_response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  resp_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_resp().empty()) {
    resp_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_resp(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:osd.bench_response)
}

void bench_response::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_bench_response_osd_5fmsg_2eproto.base);
  resp_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

bench_response::~bench_response() {
  // @@protoc_insertion_point(destructor:osd.bench_response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void bench_response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  resp_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void bench_response::ArenaDtor(void* object) {
  bench_response* _this = reinterpret_cast< bench_response* >(object);
  (void)_this;
}
void bench_response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void bench_response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const bench_response& bench_response::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_bench_response_osd_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void bench_response::Clear() {
// @@protoc_insertion_point(message_clear_start:osd.bench_response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  resp_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* bench_response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes resp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_resp();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* bench_response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osd.bench_response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes resp = 1;
  if (this->resp().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_resp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osd.bench_response)
  return target;
}

size_t bench_response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osd.bench_response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes resp = 1;
  if (this->resp().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_resp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void bench_response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osd.bench_response)
  GOOGLE_DCHECK_NE(&from, this);
  const bench_response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<bench_response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osd.bench_response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osd.bench_response)
    MergeFrom(*source);
  }
}

void bench_response::MergeFrom(const bench_response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osd.bench_response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.resp().size() > 0) {
    _internal_set_resp(from._internal_resp());
  }
}

void bench_response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osd.bench_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void bench_response::CopyFrom(const bench_response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osd.bench_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool bench_response::IsInitialized() const {
  return true;
}

void bench_response::InternalSwap(bench_response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  resp_.Swap(&other->resp_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata bench_response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void pg_leader_request::InitAsDefaultInstance() {
}
class pg_leader_request::_Internal {
 public:
};

pg_leader_request::pg_leader_request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:osd.pg_leader_request)
}
pg_leader_request::pg_leader_request(const pg_leader_request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&pool_id_, &from.pool_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&pg_id_) -
    reinterpret_cast<char*>(&pool_id_)) + sizeof(pg_id_));
  // @@protoc_insertion_point(copy_constructor:osd.pg_leader_request)
}

void pg_leader_request::SharedCtor() {
  ::memset(&pool_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pg_id_) -
      reinterpret_cast<char*>(&pool_id_)) + sizeof(pg_id_));
}

pg_leader_request::~pg_leader_request() {
  // @@protoc_insertion_point(destructor:osd.pg_leader_request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void pg_leader_request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void pg_leader_request::ArenaDtor(void* object) {
  pg_leader_request* _this = reinterpret_cast< pg_leader_request* >(object);
  (void)_this;
}
void pg_leader_request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void pg_leader_request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const pg_leader_request& pg_leader_request::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_pg_leader_request_osd_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void pg_leader_request::Clear() {
// @@protoc_insertion_point(message_clear_start:osd.pg_leader_request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&pool_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pg_id_) -
      reinterpret_cast<char*>(&pool_id_)) + sizeof(pg_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* pg_leader_request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 pool_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          pool_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 pg_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          pg_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* pg_leader_request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osd.pg_leader_request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 pool_id = 1;
  if (this->pool_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_pool_id(), target);
  }

  // uint64 pg_id = 2;
  if (this->pg_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_pg_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osd.pg_leader_request)
  return target;
}

size_t pg_leader_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osd.pg_leader_request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 pool_id = 1;
  if (this->pool_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_pool_id());
  }

  // uint64 pg_id = 2;
  if (this->pg_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_pg_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void pg_leader_request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osd.pg_leader_request)
  GOOGLE_DCHECK_NE(&from, this);
  const pg_leader_request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<pg_leader_request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osd.pg_leader_request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osd.pg_leader_request)
    MergeFrom(*source);
  }
}

void pg_leader_request::MergeFrom(const pg_leader_request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osd.pg_leader_request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pool_id() != 0) {
    _internal_set_pool_id(from._internal_pool_id());
  }
  if (from.pg_id() != 0) {
    _internal_set_pg_id(from._internal_pg_id());
  }
}

void pg_leader_request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osd.pg_leader_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pg_leader_request::CopyFrom(const pg_leader_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osd.pg_leader_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pg_leader_request::IsInitialized() const {
  return true;
}

void pg_leader_request::InternalSwap(pg_leader_request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(pg_leader_request, pg_id_)
      + sizeof(pg_leader_request::pg_id_)
      - PROTOBUF_FIELD_OFFSET(pg_leader_request, pool_id_)>(
          reinterpret_cast<char*>(&pool_id_),
          reinterpret_cast<char*>(&other->pool_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata pg_leader_request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void pg_leader_response::InitAsDefaultInstance() {
}
class pg_leader_response::_Internal {
 public:
};

pg_leader_response::pg_leader_response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:osd.pg_leader_response)
}
pg_leader_response::pg_leader_response(const pg_leader_response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  leader_addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_leader_addr().empty()) {
    leader_addr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_leader_addr(),
      GetArena());
  }
  ::memcpy(&state_, &from.state_,
    static_cast<size_t>(reinterpret_cast<char*>(&leader_port_) -
    reinterpret_cast<char*>(&state_)) + sizeof(leader_port_));
  // @@protoc_insertion_point(copy_constructor:osd.pg_leader_response)
}

void pg_leader_response::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_pg_leader_response_osd_5fmsg_2eproto.base);
  leader_addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&leader_port_) -
      reinterpret_cast<char*>(&state_)) + sizeof(leader_port_));
}

pg_leader_response::~pg_leader_response() {
  // @@protoc_insertion_point(destructor:osd.pg_leader_response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void pg_leader_response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  leader_addr_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void pg_leader_response::ArenaDtor(void* object) {
  pg_leader_response* _this = reinterpret_cast< pg_leader_response* >(object);
  (void)_this;
}
void pg_leader_response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void pg_leader_response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const pg_leader_response& pg_leader_response::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_pg_leader_response_osd_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void pg_leader_response::Clear() {
// @@protoc_insertion_point(message_clear_start:osd.pg_leader_response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  leader_addr_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&leader_port_) -
      reinterpret_cast<char*>(&state_)) + sizeof(leader_port_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* pg_leader_response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 leader_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          leader_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes leader_addr = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_leader_addr();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 leader_port = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          leader_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* pg_leader_response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osd.pg_leader_response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 state = 1;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_state(), target);
  }

  // int32 leader_id = 2;
  if (this->leader_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_leader_id(), target);
  }

  // bytes leader_addr = 3;
  if (this->leader_addr().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_leader_addr(), target);
  }

  // int32 leader_port = 4;
  if (this->leader_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_leader_port(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osd.pg_leader_response)
  return target;
}

size_t pg_leader_response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osd.pg_leader_response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes leader_addr = 3;
  if (this->leader_addr().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_leader_addr());
  }

  // int32 state = 1;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_state());
  }

  // int32 leader_id = 2;
  if (this->leader_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_leader_id());
  }

  // int32 leader_port = 4;
  if (this->leader_port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_leader_port());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void pg_leader_response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osd.pg_leader_response)
  GOOGLE_DCHECK_NE(&from, this);
  const pg_leader_response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<pg_leader_response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osd.pg_leader_response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osd.pg_leader_response)
    MergeFrom(*source);
  }
}

void pg_leader_response::MergeFrom(const pg_leader_response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osd.pg_leader_response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.leader_addr().size() > 0) {
    _internal_set_leader_addr(from._internal_leader_addr());
  }
  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
  if (from.leader_id() != 0) {
    _internal_set_leader_id(from._internal_leader_id());
  }
  if (from.leader_port() != 0) {
    _internal_set_leader_port(from._internal_leader_port());
  }
}

void pg_leader_response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osd.pg_leader_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pg_leader_response::CopyFrom(const pg_leader_response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osd.pg_leader_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pg_leader_response::IsInitialized() const {
  return true;
}

void pg_leader_response::InternalSwap(pg_leader_response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  leader_addr_.Swap(&other->leader_addr_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(pg_leader_response, leader_port_)
      + sizeof(pg_leader_response::leader_port_)
      - PROTOBUF_FIELD_OFFSET(pg_leader_response, state_)>(
          reinterpret_cast<char*>(&state_),
          reinterpret_cast<char*>(&other->state_));
}

::PROTOBUF_NAMESPACE_ID::Metadata pg_leader_response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

rpc_service_osd::~rpc_service_osd() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* rpc_service_osd::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_osd_5fmsg_2eproto);
  return file_level_service_descriptors_osd_5fmsg_2eproto[0];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* rpc_service_osd::GetDescriptor() {
  return descriptor();
}

void rpc_service_osd::process_write(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::osd::write_request*,
                         ::osd::write_reply*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method process_write() not implemented.");
  done->Run();
}

void rpc_service_osd::process_read(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::osd::read_request*,
                         ::osd::read_reply*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method process_read() not implemented.");
  done->Run();
}

void rpc_service_osd::process_delete(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::osd::delete_request*,
                         ::osd::delete_reply*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method process_delete() not implemented.");
  done->Run();
}

void rpc_service_osd::process_rpc_bench(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::osd::bench_request*,
                         ::osd::bench_response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method process_rpc_bench() not implemented.");
  done->Run();
}

void rpc_service_osd::process_get_leader(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::osd::pg_leader_request*,
                         ::osd::pg_leader_response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method process_get_leader() not implemented.");
  done->Run();
}

void rpc_service_osd::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_osd_5fmsg_2eproto[0]);
  switch(method->index()) {
    case 0:
      process_write(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::osd::write_request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::osd::write_reply*>(
                 response),
             done);
      break;
    case 1:
      process_read(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::osd::read_request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::osd::read_reply*>(
                 response),
             done);
      break;
    case 2:
      process_delete(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::osd::delete_request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::osd::delete_reply*>(
                 response),
             done);
      break;
    case 3:
      process_rpc_bench(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::osd::bench_request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::osd::bench_response*>(
                 response),
             done);
      break;
    case 4:
      process_get_leader(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::osd::pg_leader_request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::osd::pg_leader_response*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& rpc_service_osd::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::osd::write_request::default_instance();
    case 1:
      return ::osd::read_request::default_instance();
    case 2:
      return ::osd::delete_request::default_instance();
    case 3:
      return ::osd::bench_request::default_instance();
    case 4:
      return ::osd::pg_leader_request::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& rpc_service_osd::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::osd::write_reply::default_instance();
    case 1:
      return ::osd::read_reply::default_instance();
    case 2:
      return ::osd::delete_reply::default_instance();
    case 3:
      return ::osd::bench_response::default_instance();
    case 4:
      return ::osd::pg_leader_response::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

rpc_service_osd_Stub::rpc_service_osd_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
rpc_service_osd_Stub::rpc_service_osd_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
rpc_service_osd_Stub::~rpc_service_osd_Stub() {
  if (owns_channel_) delete channel_;
}

void rpc_service_osd_Stub::process_write(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::osd::write_request* request,
                              ::osd::write_reply* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void rpc_service_osd_Stub::process_read(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::osd::read_request* request,
                              ::osd::read_reply* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void rpc_service_osd_Stub::process_delete(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::osd::delete_request* request,
                              ::osd::delete_reply* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void rpc_service_osd_Stub::process_rpc_bench(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::osd::bench_request* request,
                              ::osd::bench_response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}
void rpc_service_osd_Stub::process_get_leader(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::osd::pg_leader_request* request,
                              ::osd::pg_leader_response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(4),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace osd
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::osd::write_request* Arena::CreateMaybeMessage< ::osd::write_request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osd::write_request >(arena);
}
template<> PROTOBUF_NOINLINE ::osd::write_reply* Arena::CreateMaybeMessage< ::osd::write_reply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osd::write_reply >(arena);
}
template<> PROTOBUF_NOINLINE ::osd::read_request* Arena::CreateMaybeMessage< ::osd::read_request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osd::read_request >(arena);
}
template<> PROTOBUF_NOINLINE ::osd::read_reply* Arena::CreateMaybeMessage< ::osd::read_reply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osd::read_reply >(arena);
}
template<> PROTOBUF_NOINLINE ::osd::delete_request* Arena::CreateMaybeMessage< ::osd::delete_request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osd::delete_request >(arena);
}
template<> PROTOBUF_NOINLINE ::osd::delete_reply* Arena::CreateMaybeMessage< ::osd::delete_reply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osd::delete_reply >(arena);
}
template<> PROTOBUF_NOINLINE ::osd::write_cmd* Arena::CreateMaybeMessage< ::osd::write_cmd >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osd::write_cmd >(arena);
}
template<> PROTOBUF_NOINLINE ::osd::read_cmd* Arena::CreateMaybeMessage< ::osd::read_cmd >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osd::read_cmd >(arena);
}
template<> PROTOBUF_NOINLINE ::osd::delete_cmd* Arena::CreateMaybeMessage< ::osd::delete_cmd >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osd::delete_cmd >(arena);
}
template<> PROTOBUF_NOINLINE ::osd::bench_request* Arena::CreateMaybeMessage< ::osd::bench_request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osd::bench_request >(arena);
}
template<> PROTOBUF_NOINLINE ::osd::bench_response* Arena::CreateMaybeMessage< ::osd::bench_response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osd::bench_response >(arena);
}
template<> PROTOBUF_NOINLINE ::osd::pg_leader_request* Arena::CreateMaybeMessage< ::osd::pg_leader_request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osd::pg_leader_request >(arena);
}
template<> PROTOBUF_NOINLINE ::osd::pg_leader_response* Arena::CreateMaybeMessage< ::osd::pg_leader_response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osd::pg_leader_response >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
