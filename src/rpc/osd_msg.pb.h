// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: osd_msg.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_osd_5fmsg_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_osd_5fmsg_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_osd_5fmsg_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_osd_5fmsg_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[11]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_osd_5fmsg_2eproto;
namespace osd {
class bench_request;
class bench_requestDefaultTypeInternal;
extern bench_requestDefaultTypeInternal _bench_request_default_instance_;
class bench_response;
class bench_responseDefaultTypeInternal;
extern bench_responseDefaultTypeInternal _bench_response_default_instance_;
class delete_cmd;
class delete_cmdDefaultTypeInternal;
extern delete_cmdDefaultTypeInternal _delete_cmd_default_instance_;
class delete_reply;
class delete_replyDefaultTypeInternal;
extern delete_replyDefaultTypeInternal _delete_reply_default_instance_;
class delete_request;
class delete_requestDefaultTypeInternal;
extern delete_requestDefaultTypeInternal _delete_request_default_instance_;
class read_cmd;
class read_cmdDefaultTypeInternal;
extern read_cmdDefaultTypeInternal _read_cmd_default_instance_;
class read_reply;
class read_replyDefaultTypeInternal;
extern read_replyDefaultTypeInternal _read_reply_default_instance_;
class read_request;
class read_requestDefaultTypeInternal;
extern read_requestDefaultTypeInternal _read_request_default_instance_;
class write_cmd;
class write_cmdDefaultTypeInternal;
extern write_cmdDefaultTypeInternal _write_cmd_default_instance_;
class write_reply;
class write_replyDefaultTypeInternal;
extern write_replyDefaultTypeInternal _write_reply_default_instance_;
class write_request;
class write_requestDefaultTypeInternal;
extern write_requestDefaultTypeInternal _write_request_default_instance_;
}  // namespace osd
PROTOBUF_NAMESPACE_OPEN
template<> ::osd::bench_request* Arena::CreateMaybeMessage<::osd::bench_request>(Arena*);
template<> ::osd::bench_response* Arena::CreateMaybeMessage<::osd::bench_response>(Arena*);
template<> ::osd::delete_cmd* Arena::CreateMaybeMessage<::osd::delete_cmd>(Arena*);
template<> ::osd::delete_reply* Arena::CreateMaybeMessage<::osd::delete_reply>(Arena*);
template<> ::osd::delete_request* Arena::CreateMaybeMessage<::osd::delete_request>(Arena*);
template<> ::osd::read_cmd* Arena::CreateMaybeMessage<::osd::read_cmd>(Arena*);
template<> ::osd::read_reply* Arena::CreateMaybeMessage<::osd::read_reply>(Arena*);
template<> ::osd::read_request* Arena::CreateMaybeMessage<::osd::read_request>(Arena*);
template<> ::osd::write_cmd* Arena::CreateMaybeMessage<::osd::write_cmd>(Arena*);
template<> ::osd::write_reply* Arena::CreateMaybeMessage<::osd::write_reply>(Arena*);
template<> ::osd::write_request* Arena::CreateMaybeMessage<::osd::write_request>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace osd {

// ===================================================================

class write_request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osd.write_request) */ {
 public:
  inline write_request() : write_request(nullptr) {};
  virtual ~write_request();

  write_request(const write_request& from);
  write_request(write_request&& from) noexcept
    : write_request() {
    *this = ::std::move(from);
  }

  inline write_request& operator=(const write_request& from) {
    CopyFrom(from);
    return *this;
  }
  inline write_request& operator=(write_request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const write_request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const write_request* internal_default_instance() {
    return reinterpret_cast<const write_request*>(
               &_write_request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(write_request& a, write_request& b) {
    a.Swap(&b);
  }
  inline void Swap(write_request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(write_request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline write_request* New() const final {
    return CreateMaybeMessage<write_request>(nullptr);
  }

  write_request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<write_request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const write_request& from);
  void MergeFrom(const write_request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(write_request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "osd.write_request";
  }
  protected:
  explicit write_request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_osd_5fmsg_2eproto);
    return ::descriptor_table_osd_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectNameFieldNumber = 3,
    kDataFieldNumber = 5,
    kPoolIdFieldNumber = 1,
    kPgIdFieldNumber = 2,
    kOffsetFieldNumber = 4,
  };
  // bytes object_name = 3;
  void clear_object_name();
  const std::string& object_name() const;
  void set_object_name(const std::string& value);
  void set_object_name(std::string&& value);
  void set_object_name(const char* value);
  void set_object_name(const void* value, size_t size);
  std::string* mutable_object_name();
  std::string* release_object_name();
  void set_allocated_object_name(std::string* object_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_object_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_object_name(
      std::string* object_name);
  private:
  const std::string& _internal_object_name() const;
  void _internal_set_object_name(const std::string& value);
  std::string* _internal_mutable_object_name();
  public:

  // bytes data = 5;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_data();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_data(
      std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // uint64 pool_id = 1;
  void clear_pool_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 pool_id() const;
  void set_pool_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_pool_id() const;
  void _internal_set_pool_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 pg_id = 2;
  void clear_pg_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 pg_id() const;
  void set_pg_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_pg_id() const;
  void _internal_set_pg_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 offset = 4;
  void clear_offset();
  ::PROTOBUF_NAMESPACE_ID::uint64 offset() const;
  void set_offset(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_offset() const;
  void _internal_set_offset(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:osd.write_request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr object_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::uint64 pool_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 pg_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 offset_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_osd_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class write_reply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osd.write_reply) */ {
 public:
  inline write_reply() : write_reply(nullptr) {};
  virtual ~write_reply();

  write_reply(const write_reply& from);
  write_reply(write_reply&& from) noexcept
    : write_reply() {
    *this = ::std::move(from);
  }

  inline write_reply& operator=(const write_reply& from) {
    CopyFrom(from);
    return *this;
  }
  inline write_reply& operator=(write_reply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const write_reply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const write_reply* internal_default_instance() {
    return reinterpret_cast<const write_reply*>(
               &_write_reply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(write_reply& a, write_reply& b) {
    a.Swap(&b);
  }
  inline void Swap(write_reply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(write_reply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline write_reply* New() const final {
    return CreateMaybeMessage<write_reply>(nullptr);
  }

  write_reply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<write_reply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const write_reply& from);
  void MergeFrom(const write_reply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(write_reply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "osd.write_reply";
  }
  protected:
  explicit write_reply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_osd_5fmsg_2eproto);
    return ::descriptor_table_osd_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStrFieldNumber = 2,
    kStateFieldNumber = 1,
  };
  // bytes str = 2;
  void clear_str();
  const std::string& str() const;
  void set_str(const std::string& value);
  void set_str(std::string&& value);
  void set_str(const char* value);
  void set_str(const void* value, size_t size);
  std::string* mutable_str();
  std::string* release_str();
  void set_allocated_str(std::string* str);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_str();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_str(
      std::string* str);
  private:
  const std::string& _internal_str() const;
  void _internal_set_str(const std::string& value);
  std::string* _internal_mutable_str();
  public:

  // int32 state = 1;
  void clear_state();
  ::PROTOBUF_NAMESPACE_ID::int32 state() const;
  void set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_state() const;
  void _internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:osd.write_reply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr str_;
  ::PROTOBUF_NAMESPACE_ID::int32 state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_osd_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class read_request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osd.read_request) */ {
 public:
  inline read_request() : read_request(nullptr) {};
  virtual ~read_request();

  read_request(const read_request& from);
  read_request(read_request&& from) noexcept
    : read_request() {
    *this = ::std::move(from);
  }

  inline read_request& operator=(const read_request& from) {
    CopyFrom(from);
    return *this;
  }
  inline read_request& operator=(read_request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const read_request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const read_request* internal_default_instance() {
    return reinterpret_cast<const read_request*>(
               &_read_request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(read_request& a, read_request& b) {
    a.Swap(&b);
  }
  inline void Swap(read_request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(read_request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline read_request* New() const final {
    return CreateMaybeMessage<read_request>(nullptr);
  }

  read_request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<read_request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const read_request& from);
  void MergeFrom(const read_request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(read_request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "osd.read_request";
  }
  protected:
  explicit read_request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_osd_5fmsg_2eproto);
    return ::descriptor_table_osd_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectNameFieldNumber = 3,
    kPoolIdFieldNumber = 1,
    kPgIdFieldNumber = 2,
    kOffsetFieldNumber = 4,
    kLengthFieldNumber = 5,
  };
  // bytes object_name = 3;
  void clear_object_name();
  const std::string& object_name() const;
  void set_object_name(const std::string& value);
  void set_object_name(std::string&& value);
  void set_object_name(const char* value);
  void set_object_name(const void* value, size_t size);
  std::string* mutable_object_name();
  std::string* release_object_name();
  void set_allocated_object_name(std::string* object_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_object_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_object_name(
      std::string* object_name);
  private:
  const std::string& _internal_object_name() const;
  void _internal_set_object_name(const std::string& value);
  std::string* _internal_mutable_object_name();
  public:

  // uint64 pool_id = 1;
  void clear_pool_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 pool_id() const;
  void set_pool_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_pool_id() const;
  void _internal_set_pool_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 pg_id = 2;
  void clear_pg_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 pg_id() const;
  void set_pg_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_pg_id() const;
  void _internal_set_pg_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 offset = 4;
  void clear_offset();
  ::PROTOBUF_NAMESPACE_ID::uint64 offset() const;
  void set_offset(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_offset() const;
  void _internal_set_offset(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 length = 5;
  void clear_length();
  ::PROTOBUF_NAMESPACE_ID::uint64 length() const;
  void set_length(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_length() const;
  void _internal_set_length(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:osd.read_request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr object_name_;
  ::PROTOBUF_NAMESPACE_ID::uint64 pool_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 pg_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 offset_;
  ::PROTOBUF_NAMESPACE_ID::uint64 length_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_osd_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class read_reply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osd.read_reply) */ {
 public:
  inline read_reply() : read_reply(nullptr) {};
  virtual ~read_reply();

  read_reply(const read_reply& from);
  read_reply(read_reply&& from) noexcept
    : read_reply() {
    *this = ::std::move(from);
  }

  inline read_reply& operator=(const read_reply& from) {
    CopyFrom(from);
    return *this;
  }
  inline read_reply& operator=(read_reply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const read_reply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const read_reply* internal_default_instance() {
    return reinterpret_cast<const read_reply*>(
               &_read_reply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(read_reply& a, read_reply& b) {
    a.Swap(&b);
  }
  inline void Swap(read_reply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(read_reply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline read_reply* New() const final {
    return CreateMaybeMessage<read_reply>(nullptr);
  }

  read_reply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<read_reply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const read_reply& from);
  void MergeFrom(const read_reply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(read_reply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "osd.read_reply";
  }
  protected:
  explicit read_reply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_osd_5fmsg_2eproto);
    return ::descriptor_table_osd_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2,
    kStateFieldNumber = 1,
  };
  // bytes data = 2;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_data();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_data(
      std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // int32 state = 1;
  void clear_state();
  ::PROTOBUF_NAMESPACE_ID::int32 state() const;
  void set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_state() const;
  void _internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:osd.read_reply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::int32 state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_osd_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class delete_request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osd.delete_request) */ {
 public:
  inline delete_request() : delete_request(nullptr) {};
  virtual ~delete_request();

  delete_request(const delete_request& from);
  delete_request(delete_request&& from) noexcept
    : delete_request() {
    *this = ::std::move(from);
  }

  inline delete_request& operator=(const delete_request& from) {
    CopyFrom(from);
    return *this;
  }
  inline delete_request& operator=(delete_request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const delete_request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const delete_request* internal_default_instance() {
    return reinterpret_cast<const delete_request*>(
               &_delete_request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(delete_request& a, delete_request& b) {
    a.Swap(&b);
  }
  inline void Swap(delete_request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(delete_request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline delete_request* New() const final {
    return CreateMaybeMessage<delete_request>(nullptr);
  }

  delete_request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<delete_request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const delete_request& from);
  void MergeFrom(const delete_request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(delete_request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "osd.delete_request";
  }
  protected:
  explicit delete_request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_osd_5fmsg_2eproto);
    return ::descriptor_table_osd_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectNameFieldNumber = 3,
    kPoolIdFieldNumber = 1,
    kPgIdFieldNumber = 2,
  };
  // bytes object_name = 3;
  void clear_object_name();
  const std::string& object_name() const;
  void set_object_name(const std::string& value);
  void set_object_name(std::string&& value);
  void set_object_name(const char* value);
  void set_object_name(const void* value, size_t size);
  std::string* mutable_object_name();
  std::string* release_object_name();
  void set_allocated_object_name(std::string* object_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_object_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_object_name(
      std::string* object_name);
  private:
  const std::string& _internal_object_name() const;
  void _internal_set_object_name(const std::string& value);
  std::string* _internal_mutable_object_name();
  public:

  // uint64 pool_id = 1;
  void clear_pool_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 pool_id() const;
  void set_pool_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_pool_id() const;
  void _internal_set_pool_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 pg_id = 2;
  void clear_pg_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 pg_id() const;
  void set_pg_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_pg_id() const;
  void _internal_set_pg_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:osd.delete_request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr object_name_;
  ::PROTOBUF_NAMESPACE_ID::uint64 pool_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 pg_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_osd_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class delete_reply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osd.delete_reply) */ {
 public:
  inline delete_reply() : delete_reply(nullptr) {};
  virtual ~delete_reply();

  delete_reply(const delete_reply& from);
  delete_reply(delete_reply&& from) noexcept
    : delete_reply() {
    *this = ::std::move(from);
  }

  inline delete_reply& operator=(const delete_reply& from) {
    CopyFrom(from);
    return *this;
  }
  inline delete_reply& operator=(delete_reply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const delete_reply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const delete_reply* internal_default_instance() {
    return reinterpret_cast<const delete_reply*>(
               &_delete_reply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(delete_reply& a, delete_reply& b) {
    a.Swap(&b);
  }
  inline void Swap(delete_reply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(delete_reply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline delete_reply* New() const final {
    return CreateMaybeMessage<delete_reply>(nullptr);
  }

  delete_reply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<delete_reply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const delete_reply& from);
  void MergeFrom(const delete_reply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(delete_reply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "osd.delete_reply";
  }
  protected:
  explicit delete_reply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_osd_5fmsg_2eproto);
    return ::descriptor_table_osd_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStrFieldNumber = 2,
    kStateFieldNumber = 1,
  };
  // bytes str = 2;
  void clear_str();
  const std::string& str() const;
  void set_str(const std::string& value);
  void set_str(std::string&& value);
  void set_str(const char* value);
  void set_str(const void* value, size_t size);
  std::string* mutable_str();
  std::string* release_str();
  void set_allocated_str(std::string* str);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_str();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_str(
      std::string* str);
  private:
  const std::string& _internal_str() const;
  void _internal_set_str(const std::string& value);
  std::string* _internal_mutable_str();
  public:

  // int32 state = 1;
  void clear_state();
  ::PROTOBUF_NAMESPACE_ID::int32 state() const;
  void set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_state() const;
  void _internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:osd.delete_reply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr str_;
  ::PROTOBUF_NAMESPACE_ID::int32 state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_osd_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class write_cmd PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osd.write_cmd) */ {
 public:
  inline write_cmd() : write_cmd(nullptr) {};
  virtual ~write_cmd();

  write_cmd(const write_cmd& from);
  write_cmd(write_cmd&& from) noexcept
    : write_cmd() {
    *this = ::std::move(from);
  }

  inline write_cmd& operator=(const write_cmd& from) {
    CopyFrom(from);
    return *this;
  }
  inline write_cmd& operator=(write_cmd&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const write_cmd& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const write_cmd* internal_default_instance() {
    return reinterpret_cast<const write_cmd*>(
               &_write_cmd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(write_cmd& a, write_cmd& b) {
    a.Swap(&b);
  }
  inline void Swap(write_cmd* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(write_cmd* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline write_cmd* New() const final {
    return CreateMaybeMessage<write_cmd>(nullptr);
  }

  write_cmd* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<write_cmd>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const write_cmd& from);
  void MergeFrom(const write_cmd& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(write_cmd* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "osd.write_cmd";
  }
  protected:
  explicit write_cmd(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_osd_5fmsg_2eproto);
    return ::descriptor_table_osd_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectNameFieldNumber = 1,
    kOffsetFieldNumber = 2,
  };
  // bytes object_name = 1;
  void clear_object_name();
  const std::string& object_name() const;
  void set_object_name(const std::string& value);
  void set_object_name(std::string&& value);
  void set_object_name(const char* value);
  void set_object_name(const void* value, size_t size);
  std::string* mutable_object_name();
  std::string* release_object_name();
  void set_allocated_object_name(std::string* object_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_object_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_object_name(
      std::string* object_name);
  private:
  const std::string& _internal_object_name() const;
  void _internal_set_object_name(const std::string& value);
  std::string* _internal_mutable_object_name();
  public:

  // uint64 offset = 2;
  void clear_offset();
  ::PROTOBUF_NAMESPACE_ID::uint64 offset() const;
  void set_offset(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_offset() const;
  void _internal_set_offset(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:osd.write_cmd)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr object_name_;
  ::PROTOBUF_NAMESPACE_ID::uint64 offset_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_osd_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class read_cmd PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osd.read_cmd) */ {
 public:
  inline read_cmd() : read_cmd(nullptr) {};
  virtual ~read_cmd();

  read_cmd(const read_cmd& from);
  read_cmd(read_cmd&& from) noexcept
    : read_cmd() {
    *this = ::std::move(from);
  }

  inline read_cmd& operator=(const read_cmd& from) {
    CopyFrom(from);
    return *this;
  }
  inline read_cmd& operator=(read_cmd&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const read_cmd& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const read_cmd* internal_default_instance() {
    return reinterpret_cast<const read_cmd*>(
               &_read_cmd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(read_cmd& a, read_cmd& b) {
    a.Swap(&b);
  }
  inline void Swap(read_cmd* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(read_cmd* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline read_cmd* New() const final {
    return CreateMaybeMessage<read_cmd>(nullptr);
  }

  read_cmd* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<read_cmd>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const read_cmd& from);
  void MergeFrom(const read_cmd& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(read_cmd* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "osd.read_cmd";
  }
  protected:
  explicit read_cmd(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_osd_5fmsg_2eproto);
    return ::descriptor_table_osd_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectNameFieldNumber = 1,
    kOffsetFieldNumber = 2,
    kLengthFieldNumber = 3,
  };
  // bytes object_name = 1;
  void clear_object_name();
  const std::string& object_name() const;
  void set_object_name(const std::string& value);
  void set_object_name(std::string&& value);
  void set_object_name(const char* value);
  void set_object_name(const void* value, size_t size);
  std::string* mutable_object_name();
  std::string* release_object_name();
  void set_allocated_object_name(std::string* object_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_object_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_object_name(
      std::string* object_name);
  private:
  const std::string& _internal_object_name() const;
  void _internal_set_object_name(const std::string& value);
  std::string* _internal_mutable_object_name();
  public:

  // uint64 offset = 2;
  void clear_offset();
  ::PROTOBUF_NAMESPACE_ID::uint64 offset() const;
  void set_offset(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_offset() const;
  void _internal_set_offset(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 length = 3;
  void clear_length();
  ::PROTOBUF_NAMESPACE_ID::uint64 length() const;
  void set_length(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_length() const;
  void _internal_set_length(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:osd.read_cmd)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr object_name_;
  ::PROTOBUF_NAMESPACE_ID::uint64 offset_;
  ::PROTOBUF_NAMESPACE_ID::uint64 length_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_osd_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class delete_cmd PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osd.delete_cmd) */ {
 public:
  inline delete_cmd() : delete_cmd(nullptr) {};
  virtual ~delete_cmd();

  delete_cmd(const delete_cmd& from);
  delete_cmd(delete_cmd&& from) noexcept
    : delete_cmd() {
    *this = ::std::move(from);
  }

  inline delete_cmd& operator=(const delete_cmd& from) {
    CopyFrom(from);
    return *this;
  }
  inline delete_cmd& operator=(delete_cmd&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const delete_cmd& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const delete_cmd* internal_default_instance() {
    return reinterpret_cast<const delete_cmd*>(
               &_delete_cmd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(delete_cmd& a, delete_cmd& b) {
    a.Swap(&b);
  }
  inline void Swap(delete_cmd* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(delete_cmd* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline delete_cmd* New() const final {
    return CreateMaybeMessage<delete_cmd>(nullptr);
  }

  delete_cmd* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<delete_cmd>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const delete_cmd& from);
  void MergeFrom(const delete_cmd& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(delete_cmd* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "osd.delete_cmd";
  }
  protected:
  explicit delete_cmd(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_osd_5fmsg_2eproto);
    return ::descriptor_table_osd_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectNameFieldNumber = 1,
  };
  // bytes object_name = 1;
  void clear_object_name();
  const std::string& object_name() const;
  void set_object_name(const std::string& value);
  void set_object_name(std::string&& value);
  void set_object_name(const char* value);
  void set_object_name(const void* value, size_t size);
  std::string* mutable_object_name();
  std::string* release_object_name();
  void set_allocated_object_name(std::string* object_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_object_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_object_name(
      std::string* object_name);
  private:
  const std::string& _internal_object_name() const;
  void _internal_set_object_name(const std::string& value);
  std::string* _internal_mutable_object_name();
  public:

  // @@protoc_insertion_point(class_scope:osd.delete_cmd)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr object_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_osd_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class bench_request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osd.bench_request) */ {
 public:
  inline bench_request() : bench_request(nullptr) {};
  virtual ~bench_request();

  bench_request(const bench_request& from);
  bench_request(bench_request&& from) noexcept
    : bench_request() {
    *this = ::std::move(from);
  }

  inline bench_request& operator=(const bench_request& from) {
    CopyFrom(from);
    return *this;
  }
  inline bench_request& operator=(bench_request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const bench_request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const bench_request* internal_default_instance() {
    return reinterpret_cast<const bench_request*>(
               &_bench_request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(bench_request& a, bench_request& b) {
    a.Swap(&b);
  }
  inline void Swap(bench_request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(bench_request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline bench_request* New() const final {
    return CreateMaybeMessage<bench_request>(nullptr);
  }

  bench_request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<bench_request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const bench_request& from);
  void MergeFrom(const bench_request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(bench_request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "osd.bench_request";
  }
  protected:
  explicit bench_request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_osd_5fmsg_2eproto);
    return ::descriptor_table_osd_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReqFieldNumber = 1,
  };
  // bytes req = 1;
  void clear_req();
  const std::string& req() const;
  void set_req(const std::string& value);
  void set_req(std::string&& value);
  void set_req(const char* value);
  void set_req(const void* value, size_t size);
  std::string* mutable_req();
  std::string* release_req();
  void set_allocated_req(std::string* req);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_req();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_req(
      std::string* req);
  private:
  const std::string& _internal_req() const;
  void _internal_set_req(const std::string& value);
  std::string* _internal_mutable_req();
  public:

  // @@protoc_insertion_point(class_scope:osd.bench_request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr req_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_osd_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class bench_response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osd.bench_response) */ {
 public:
  inline bench_response() : bench_response(nullptr) {};
  virtual ~bench_response();

  bench_response(const bench_response& from);
  bench_response(bench_response&& from) noexcept
    : bench_response() {
    *this = ::std::move(from);
  }

  inline bench_response& operator=(const bench_response& from) {
    CopyFrom(from);
    return *this;
  }
  inline bench_response& operator=(bench_response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const bench_response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const bench_response* internal_default_instance() {
    return reinterpret_cast<const bench_response*>(
               &_bench_response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(bench_response& a, bench_response& b) {
    a.Swap(&b);
  }
  inline void Swap(bench_response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(bench_response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline bench_response* New() const final {
    return CreateMaybeMessage<bench_response>(nullptr);
  }

  bench_response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<bench_response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const bench_response& from);
  void MergeFrom(const bench_response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(bench_response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "osd.bench_response";
  }
  protected:
  explicit bench_response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_osd_5fmsg_2eproto);
    return ::descriptor_table_osd_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRespFieldNumber = 1,
  };
  // bytes resp = 1;
  void clear_resp();
  const std::string& resp() const;
  void set_resp(const std::string& value);
  void set_resp(std::string&& value);
  void set_resp(const char* value);
  void set_resp(const void* value, size_t size);
  std::string* mutable_resp();
  std::string* release_resp();
  void set_allocated_resp(std::string* resp);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_resp();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_resp(
      std::string* resp);
  private:
  const std::string& _internal_resp() const;
  void _internal_set_resp(const std::string& value);
  std::string* _internal_mutable_resp();
  public:

  // @@protoc_insertion_point(class_scope:osd.bench_response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr resp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_osd_5fmsg_2eproto;
};
// ===================================================================

class rpc_service_osd_Stub;

class rpc_service_osd : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline rpc_service_osd() {};
 public:
  virtual ~rpc_service_osd();

  typedef rpc_service_osd_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void process_write(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::osd::write_request* request,
                       ::osd::write_reply* response,
                       ::google::protobuf::Closure* done);
  virtual void process_read(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::osd::read_request* request,
                       ::osd::read_reply* response,
                       ::google::protobuf::Closure* done);
  virtual void process_delete(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::osd::delete_request* request,
                       ::osd::delete_reply* response,
                       ::google::protobuf::Closure* done);
  virtual void process_rpc_bench(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::osd::bench_request* request,
                       ::osd::bench_response* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(rpc_service_osd);
};

class rpc_service_osd_Stub : public rpc_service_osd {
 public:
  rpc_service_osd_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  rpc_service_osd_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~rpc_service_osd_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements rpc_service_osd ------------------------------------------

  void process_write(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::osd::write_request* request,
                       ::osd::write_reply* response,
                       ::google::protobuf::Closure* done);
  void process_read(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::osd::read_request* request,
                       ::osd::read_reply* response,
                       ::google::protobuf::Closure* done);
  void process_delete(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::osd::delete_request* request,
                       ::osd::delete_reply* response,
                       ::google::protobuf::Closure* done);
  void process_rpc_bench(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::osd::bench_request* request,
                       ::osd::bench_response* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(rpc_service_osd_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// write_request

// uint64 pool_id = 1;
inline void write_request::clear_pool_id() {
  pool_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 write_request::_internal_pool_id() const {
  return pool_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 write_request::pool_id() const {
  // @@protoc_insertion_point(field_get:osd.write_request.pool_id)
  return _internal_pool_id();
}
inline void write_request::_internal_set_pool_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  pool_id_ = value;
}
inline void write_request::set_pool_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_pool_id(value);
  // @@protoc_insertion_point(field_set:osd.write_request.pool_id)
}

// uint64 pg_id = 2;
inline void write_request::clear_pg_id() {
  pg_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 write_request::_internal_pg_id() const {
  return pg_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 write_request::pg_id() const {
  // @@protoc_insertion_point(field_get:osd.write_request.pg_id)
  return _internal_pg_id();
}
inline void write_request::_internal_set_pg_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  pg_id_ = value;
}
inline void write_request::set_pg_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_pg_id(value);
  // @@protoc_insertion_point(field_set:osd.write_request.pg_id)
}

// bytes object_name = 3;
inline void write_request::clear_object_name() {
  object_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& write_request::object_name() const {
  // @@protoc_insertion_point(field_get:osd.write_request.object_name)
  return _internal_object_name();
}
inline void write_request::set_object_name(const std::string& value) {
  _internal_set_object_name(value);
  // @@protoc_insertion_point(field_set:osd.write_request.object_name)
}
inline std::string* write_request::mutable_object_name() {
  // @@protoc_insertion_point(field_mutable:osd.write_request.object_name)
  return _internal_mutable_object_name();
}
inline const std::string& write_request::_internal_object_name() const {
  return object_name_.Get();
}
inline void write_request::_internal_set_object_name(const std::string& value) {
  
  object_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void write_request::set_object_name(std::string&& value) {
  
  object_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:osd.write_request.object_name)
}
inline void write_request::set_object_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  object_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:osd.write_request.object_name)
}
inline void write_request::set_object_name(const void* value,
    size_t size) {
  
  object_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:osd.write_request.object_name)
}
inline std::string* write_request::_internal_mutable_object_name() {
  
  return object_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* write_request::release_object_name() {
  // @@protoc_insertion_point(field_release:osd.write_request.object_name)
  return object_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void write_request::set_allocated_object_name(std::string* object_name) {
  if (object_name != nullptr) {
    
  } else {
    
  }
  object_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), object_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:osd.write_request.object_name)
}
inline std::string* write_request::unsafe_arena_release_object_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:osd.write_request.object_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return object_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void write_request::unsafe_arena_set_allocated_object_name(
    std::string* object_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (object_name != nullptr) {
    
  } else {
    
  }
  object_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      object_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:osd.write_request.object_name)
}

// uint64 offset = 4;
inline void write_request::clear_offset() {
  offset_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 write_request::_internal_offset() const {
  return offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 write_request::offset() const {
  // @@protoc_insertion_point(field_get:osd.write_request.offset)
  return _internal_offset();
}
inline void write_request::_internal_set_offset(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  offset_ = value;
}
inline void write_request::set_offset(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:osd.write_request.offset)
}

// bytes data = 5;
inline void write_request::clear_data() {
  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& write_request::data() const {
  // @@protoc_insertion_point(field_get:osd.write_request.data)
  return _internal_data();
}
inline void write_request::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:osd.write_request.data)
}
inline std::string* write_request::mutable_data() {
  // @@protoc_insertion_point(field_mutable:osd.write_request.data)
  return _internal_mutable_data();
}
inline const std::string& write_request::_internal_data() const {
  return data_.Get();
}
inline void write_request::_internal_set_data(const std::string& value) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void write_request::set_data(std::string&& value) {
  
  data_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:osd.write_request.data)
}
inline void write_request::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:osd.write_request.data)
}
inline void write_request::set_data(const void* value,
    size_t size) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:osd.write_request.data)
}
inline std::string* write_request::_internal_mutable_data() {
  
  return data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* write_request::release_data() {
  // @@protoc_insertion_point(field_release:osd.write_request.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void write_request::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:osd.write_request.data)
}
inline std::string* write_request::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:osd.write_request.data)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return data_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void write_request::unsafe_arena_set_allocated_data(
    std::string* data) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (data != nullptr) {
    
  } else {
    
  }
  data_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      data, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:osd.write_request.data)
}

// -------------------------------------------------------------------

// write_reply

// int32 state = 1;
inline void write_reply::clear_state() {
  state_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 write_reply::_internal_state() const {
  return state_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 write_reply::state() const {
  // @@protoc_insertion_point(field_get:osd.write_reply.state)
  return _internal_state();
}
inline void write_reply::_internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  state_ = value;
}
inline void write_reply::set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:osd.write_reply.state)
}

// bytes str = 2;
inline void write_reply::clear_str() {
  str_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& write_reply::str() const {
  // @@protoc_insertion_point(field_get:osd.write_reply.str)
  return _internal_str();
}
inline void write_reply::set_str(const std::string& value) {
  _internal_set_str(value);
  // @@protoc_insertion_point(field_set:osd.write_reply.str)
}
inline std::string* write_reply::mutable_str() {
  // @@protoc_insertion_point(field_mutable:osd.write_reply.str)
  return _internal_mutable_str();
}
inline const std::string& write_reply::_internal_str() const {
  return str_.Get();
}
inline void write_reply::_internal_set_str(const std::string& value) {
  
  str_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void write_reply::set_str(std::string&& value) {
  
  str_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:osd.write_reply.str)
}
inline void write_reply::set_str(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  str_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:osd.write_reply.str)
}
inline void write_reply::set_str(const void* value,
    size_t size) {
  
  str_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:osd.write_reply.str)
}
inline std::string* write_reply::_internal_mutable_str() {
  
  return str_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* write_reply::release_str() {
  // @@protoc_insertion_point(field_release:osd.write_reply.str)
  return str_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void write_reply::set_allocated_str(std::string* str) {
  if (str != nullptr) {
    
  } else {
    
  }
  str_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), str,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:osd.write_reply.str)
}
inline std::string* write_reply::unsafe_arena_release_str() {
  // @@protoc_insertion_point(field_unsafe_arena_release:osd.write_reply.str)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return str_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void write_reply::unsafe_arena_set_allocated_str(
    std::string* str) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (str != nullptr) {
    
  } else {
    
  }
  str_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      str, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:osd.write_reply.str)
}

// -------------------------------------------------------------------

// read_request

// uint64 pool_id = 1;
inline void read_request::clear_pool_id() {
  pool_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 read_request::_internal_pool_id() const {
  return pool_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 read_request::pool_id() const {
  // @@protoc_insertion_point(field_get:osd.read_request.pool_id)
  return _internal_pool_id();
}
inline void read_request::_internal_set_pool_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  pool_id_ = value;
}
inline void read_request::set_pool_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_pool_id(value);
  // @@protoc_insertion_point(field_set:osd.read_request.pool_id)
}

// uint64 pg_id = 2;
inline void read_request::clear_pg_id() {
  pg_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 read_request::_internal_pg_id() const {
  return pg_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 read_request::pg_id() const {
  // @@protoc_insertion_point(field_get:osd.read_request.pg_id)
  return _internal_pg_id();
}
inline void read_request::_internal_set_pg_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  pg_id_ = value;
}
inline void read_request::set_pg_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_pg_id(value);
  // @@protoc_insertion_point(field_set:osd.read_request.pg_id)
}

// bytes object_name = 3;
inline void read_request::clear_object_name() {
  object_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& read_request::object_name() const {
  // @@protoc_insertion_point(field_get:osd.read_request.object_name)
  return _internal_object_name();
}
inline void read_request::set_object_name(const std::string& value) {
  _internal_set_object_name(value);
  // @@protoc_insertion_point(field_set:osd.read_request.object_name)
}
inline std::string* read_request::mutable_object_name() {
  // @@protoc_insertion_point(field_mutable:osd.read_request.object_name)
  return _internal_mutable_object_name();
}
inline const std::string& read_request::_internal_object_name() const {
  return object_name_.Get();
}
inline void read_request::_internal_set_object_name(const std::string& value) {
  
  object_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void read_request::set_object_name(std::string&& value) {
  
  object_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:osd.read_request.object_name)
}
inline void read_request::set_object_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  object_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:osd.read_request.object_name)
}
inline void read_request::set_object_name(const void* value,
    size_t size) {
  
  object_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:osd.read_request.object_name)
}
inline std::string* read_request::_internal_mutable_object_name() {
  
  return object_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* read_request::release_object_name() {
  // @@protoc_insertion_point(field_release:osd.read_request.object_name)
  return object_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void read_request::set_allocated_object_name(std::string* object_name) {
  if (object_name != nullptr) {
    
  } else {
    
  }
  object_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), object_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:osd.read_request.object_name)
}
inline std::string* read_request::unsafe_arena_release_object_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:osd.read_request.object_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return object_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void read_request::unsafe_arena_set_allocated_object_name(
    std::string* object_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (object_name != nullptr) {
    
  } else {
    
  }
  object_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      object_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:osd.read_request.object_name)
}

// uint64 offset = 4;
inline void read_request::clear_offset() {
  offset_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 read_request::_internal_offset() const {
  return offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 read_request::offset() const {
  // @@protoc_insertion_point(field_get:osd.read_request.offset)
  return _internal_offset();
}
inline void read_request::_internal_set_offset(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  offset_ = value;
}
inline void read_request::set_offset(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:osd.read_request.offset)
}

// uint64 length = 5;
inline void read_request::clear_length() {
  length_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 read_request::_internal_length() const {
  return length_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 read_request::length() const {
  // @@protoc_insertion_point(field_get:osd.read_request.length)
  return _internal_length();
}
inline void read_request::_internal_set_length(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  length_ = value;
}
inline void read_request::set_length(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:osd.read_request.length)
}

// -------------------------------------------------------------------

// read_reply

// int32 state = 1;
inline void read_reply::clear_state() {
  state_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 read_reply::_internal_state() const {
  return state_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 read_reply::state() const {
  // @@protoc_insertion_point(field_get:osd.read_reply.state)
  return _internal_state();
}
inline void read_reply::_internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  state_ = value;
}
inline void read_reply::set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:osd.read_reply.state)
}

// bytes data = 2;
inline void read_reply::clear_data() {
  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& read_reply::data() const {
  // @@protoc_insertion_point(field_get:osd.read_reply.data)
  return _internal_data();
}
inline void read_reply::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:osd.read_reply.data)
}
inline std::string* read_reply::mutable_data() {
  // @@protoc_insertion_point(field_mutable:osd.read_reply.data)
  return _internal_mutable_data();
}
inline const std::string& read_reply::_internal_data() const {
  return data_.Get();
}
inline void read_reply::_internal_set_data(const std::string& value) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void read_reply::set_data(std::string&& value) {
  
  data_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:osd.read_reply.data)
}
inline void read_reply::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:osd.read_reply.data)
}
inline void read_reply::set_data(const void* value,
    size_t size) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:osd.read_reply.data)
}
inline std::string* read_reply::_internal_mutable_data() {
  
  return data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* read_reply::release_data() {
  // @@protoc_insertion_point(field_release:osd.read_reply.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void read_reply::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:osd.read_reply.data)
}
inline std::string* read_reply::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:osd.read_reply.data)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return data_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void read_reply::unsafe_arena_set_allocated_data(
    std::string* data) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (data != nullptr) {
    
  } else {
    
  }
  data_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      data, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:osd.read_reply.data)
}

// -------------------------------------------------------------------

// delete_request

// uint64 pool_id = 1;
inline void delete_request::clear_pool_id() {
  pool_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 delete_request::_internal_pool_id() const {
  return pool_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 delete_request::pool_id() const {
  // @@protoc_insertion_point(field_get:osd.delete_request.pool_id)
  return _internal_pool_id();
}
inline void delete_request::_internal_set_pool_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  pool_id_ = value;
}
inline void delete_request::set_pool_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_pool_id(value);
  // @@protoc_insertion_point(field_set:osd.delete_request.pool_id)
}

// uint64 pg_id = 2;
inline void delete_request::clear_pg_id() {
  pg_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 delete_request::_internal_pg_id() const {
  return pg_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 delete_request::pg_id() const {
  // @@protoc_insertion_point(field_get:osd.delete_request.pg_id)
  return _internal_pg_id();
}
inline void delete_request::_internal_set_pg_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  pg_id_ = value;
}
inline void delete_request::set_pg_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_pg_id(value);
  // @@protoc_insertion_point(field_set:osd.delete_request.pg_id)
}

// bytes object_name = 3;
inline void delete_request::clear_object_name() {
  object_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& delete_request::object_name() const {
  // @@protoc_insertion_point(field_get:osd.delete_request.object_name)
  return _internal_object_name();
}
inline void delete_request::set_object_name(const std::string& value) {
  _internal_set_object_name(value);
  // @@protoc_insertion_point(field_set:osd.delete_request.object_name)
}
inline std::string* delete_request::mutable_object_name() {
  // @@protoc_insertion_point(field_mutable:osd.delete_request.object_name)
  return _internal_mutable_object_name();
}
inline const std::string& delete_request::_internal_object_name() const {
  return object_name_.Get();
}
inline void delete_request::_internal_set_object_name(const std::string& value) {
  
  object_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void delete_request::set_object_name(std::string&& value) {
  
  object_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:osd.delete_request.object_name)
}
inline void delete_request::set_object_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  object_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:osd.delete_request.object_name)
}
inline void delete_request::set_object_name(const void* value,
    size_t size) {
  
  object_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:osd.delete_request.object_name)
}
inline std::string* delete_request::_internal_mutable_object_name() {
  
  return object_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* delete_request::release_object_name() {
  // @@protoc_insertion_point(field_release:osd.delete_request.object_name)
  return object_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void delete_request::set_allocated_object_name(std::string* object_name) {
  if (object_name != nullptr) {
    
  } else {
    
  }
  object_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), object_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:osd.delete_request.object_name)
}
inline std::string* delete_request::unsafe_arena_release_object_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:osd.delete_request.object_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return object_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void delete_request::unsafe_arena_set_allocated_object_name(
    std::string* object_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (object_name != nullptr) {
    
  } else {
    
  }
  object_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      object_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:osd.delete_request.object_name)
}

// -------------------------------------------------------------------

// delete_reply

// int32 state = 1;
inline void delete_reply::clear_state() {
  state_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 delete_reply::_internal_state() const {
  return state_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 delete_reply::state() const {
  // @@protoc_insertion_point(field_get:osd.delete_reply.state)
  return _internal_state();
}
inline void delete_reply::_internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  state_ = value;
}
inline void delete_reply::set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:osd.delete_reply.state)
}

// bytes str = 2;
inline void delete_reply::clear_str() {
  str_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& delete_reply::str() const {
  // @@protoc_insertion_point(field_get:osd.delete_reply.str)
  return _internal_str();
}
inline void delete_reply::set_str(const std::string& value) {
  _internal_set_str(value);
  // @@protoc_insertion_point(field_set:osd.delete_reply.str)
}
inline std::string* delete_reply::mutable_str() {
  // @@protoc_insertion_point(field_mutable:osd.delete_reply.str)
  return _internal_mutable_str();
}
inline const std::string& delete_reply::_internal_str() const {
  return str_.Get();
}
inline void delete_reply::_internal_set_str(const std::string& value) {
  
  str_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void delete_reply::set_str(std::string&& value) {
  
  str_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:osd.delete_reply.str)
}
inline void delete_reply::set_str(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  str_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:osd.delete_reply.str)
}
inline void delete_reply::set_str(const void* value,
    size_t size) {
  
  str_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:osd.delete_reply.str)
}
inline std::string* delete_reply::_internal_mutable_str() {
  
  return str_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* delete_reply::release_str() {
  // @@protoc_insertion_point(field_release:osd.delete_reply.str)
  return str_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void delete_reply::set_allocated_str(std::string* str) {
  if (str != nullptr) {
    
  } else {
    
  }
  str_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), str,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:osd.delete_reply.str)
}
inline std::string* delete_reply::unsafe_arena_release_str() {
  // @@protoc_insertion_point(field_unsafe_arena_release:osd.delete_reply.str)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return str_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void delete_reply::unsafe_arena_set_allocated_str(
    std::string* str) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (str != nullptr) {
    
  } else {
    
  }
  str_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      str, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:osd.delete_reply.str)
}

// -------------------------------------------------------------------

// write_cmd

// bytes object_name = 1;
inline void write_cmd::clear_object_name() {
  object_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& write_cmd::object_name() const {
  // @@protoc_insertion_point(field_get:osd.write_cmd.object_name)
  return _internal_object_name();
}
inline void write_cmd::set_object_name(const std::string& value) {
  _internal_set_object_name(value);
  // @@protoc_insertion_point(field_set:osd.write_cmd.object_name)
}
inline std::string* write_cmd::mutable_object_name() {
  // @@protoc_insertion_point(field_mutable:osd.write_cmd.object_name)
  return _internal_mutable_object_name();
}
inline const std::string& write_cmd::_internal_object_name() const {
  return object_name_.Get();
}
inline void write_cmd::_internal_set_object_name(const std::string& value) {
  
  object_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void write_cmd::set_object_name(std::string&& value) {
  
  object_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:osd.write_cmd.object_name)
}
inline void write_cmd::set_object_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  object_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:osd.write_cmd.object_name)
}
inline void write_cmd::set_object_name(const void* value,
    size_t size) {
  
  object_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:osd.write_cmd.object_name)
}
inline std::string* write_cmd::_internal_mutable_object_name() {
  
  return object_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* write_cmd::release_object_name() {
  // @@protoc_insertion_point(field_release:osd.write_cmd.object_name)
  return object_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void write_cmd::set_allocated_object_name(std::string* object_name) {
  if (object_name != nullptr) {
    
  } else {
    
  }
  object_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), object_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:osd.write_cmd.object_name)
}
inline std::string* write_cmd::unsafe_arena_release_object_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:osd.write_cmd.object_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return object_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void write_cmd::unsafe_arena_set_allocated_object_name(
    std::string* object_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (object_name != nullptr) {
    
  } else {
    
  }
  object_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      object_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:osd.write_cmd.object_name)
}

// uint64 offset = 2;
inline void write_cmd::clear_offset() {
  offset_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 write_cmd::_internal_offset() const {
  return offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 write_cmd::offset() const {
  // @@protoc_insertion_point(field_get:osd.write_cmd.offset)
  return _internal_offset();
}
inline void write_cmd::_internal_set_offset(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  offset_ = value;
}
inline void write_cmd::set_offset(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:osd.write_cmd.offset)
}

// -------------------------------------------------------------------

// read_cmd

// bytes object_name = 1;
inline void read_cmd::clear_object_name() {
  object_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& read_cmd::object_name() const {
  // @@protoc_insertion_point(field_get:osd.read_cmd.object_name)
  return _internal_object_name();
}
inline void read_cmd::set_object_name(const std::string& value) {
  _internal_set_object_name(value);
  // @@protoc_insertion_point(field_set:osd.read_cmd.object_name)
}
inline std::string* read_cmd::mutable_object_name() {
  // @@protoc_insertion_point(field_mutable:osd.read_cmd.object_name)
  return _internal_mutable_object_name();
}
inline const std::string& read_cmd::_internal_object_name() const {
  return object_name_.Get();
}
inline void read_cmd::_internal_set_object_name(const std::string& value) {
  
  object_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void read_cmd::set_object_name(std::string&& value) {
  
  object_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:osd.read_cmd.object_name)
}
inline void read_cmd::set_object_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  object_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:osd.read_cmd.object_name)
}
inline void read_cmd::set_object_name(const void* value,
    size_t size) {
  
  object_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:osd.read_cmd.object_name)
}
inline std::string* read_cmd::_internal_mutable_object_name() {
  
  return object_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* read_cmd::release_object_name() {
  // @@protoc_insertion_point(field_release:osd.read_cmd.object_name)
  return object_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void read_cmd::set_allocated_object_name(std::string* object_name) {
  if (object_name != nullptr) {
    
  } else {
    
  }
  object_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), object_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:osd.read_cmd.object_name)
}
inline std::string* read_cmd::unsafe_arena_release_object_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:osd.read_cmd.object_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return object_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void read_cmd::unsafe_arena_set_allocated_object_name(
    std::string* object_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (object_name != nullptr) {
    
  } else {
    
  }
  object_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      object_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:osd.read_cmd.object_name)
}

// uint64 offset = 2;
inline void read_cmd::clear_offset() {
  offset_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 read_cmd::_internal_offset() const {
  return offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 read_cmd::offset() const {
  // @@protoc_insertion_point(field_get:osd.read_cmd.offset)
  return _internal_offset();
}
inline void read_cmd::_internal_set_offset(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  offset_ = value;
}
inline void read_cmd::set_offset(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:osd.read_cmd.offset)
}

// uint64 length = 3;
inline void read_cmd::clear_length() {
  length_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 read_cmd::_internal_length() const {
  return length_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 read_cmd::length() const {
  // @@protoc_insertion_point(field_get:osd.read_cmd.length)
  return _internal_length();
}
inline void read_cmd::_internal_set_length(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  length_ = value;
}
inline void read_cmd::set_length(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:osd.read_cmd.length)
}

// -------------------------------------------------------------------

// delete_cmd

// bytes object_name = 1;
inline void delete_cmd::clear_object_name() {
  object_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& delete_cmd::object_name() const {
  // @@protoc_insertion_point(field_get:osd.delete_cmd.object_name)
  return _internal_object_name();
}
inline void delete_cmd::set_object_name(const std::string& value) {
  _internal_set_object_name(value);
  // @@protoc_insertion_point(field_set:osd.delete_cmd.object_name)
}
inline std::string* delete_cmd::mutable_object_name() {
  // @@protoc_insertion_point(field_mutable:osd.delete_cmd.object_name)
  return _internal_mutable_object_name();
}
inline const std::string& delete_cmd::_internal_object_name() const {
  return object_name_.Get();
}
inline void delete_cmd::_internal_set_object_name(const std::string& value) {
  
  object_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void delete_cmd::set_object_name(std::string&& value) {
  
  object_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:osd.delete_cmd.object_name)
}
inline void delete_cmd::set_object_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  object_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:osd.delete_cmd.object_name)
}
inline void delete_cmd::set_object_name(const void* value,
    size_t size) {
  
  object_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:osd.delete_cmd.object_name)
}
inline std::string* delete_cmd::_internal_mutable_object_name() {
  
  return object_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* delete_cmd::release_object_name() {
  // @@protoc_insertion_point(field_release:osd.delete_cmd.object_name)
  return object_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void delete_cmd::set_allocated_object_name(std::string* object_name) {
  if (object_name != nullptr) {
    
  } else {
    
  }
  object_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), object_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:osd.delete_cmd.object_name)
}
inline std::string* delete_cmd::unsafe_arena_release_object_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:osd.delete_cmd.object_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return object_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void delete_cmd::unsafe_arena_set_allocated_object_name(
    std::string* object_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (object_name != nullptr) {
    
  } else {
    
  }
  object_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      object_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:osd.delete_cmd.object_name)
}

// -------------------------------------------------------------------

// bench_request

// bytes req = 1;
inline void bench_request::clear_req() {
  req_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& bench_request::req() const {
  // @@protoc_insertion_point(field_get:osd.bench_request.req)
  return _internal_req();
}
inline void bench_request::set_req(const std::string& value) {
  _internal_set_req(value);
  // @@protoc_insertion_point(field_set:osd.bench_request.req)
}
inline std::string* bench_request::mutable_req() {
  // @@protoc_insertion_point(field_mutable:osd.bench_request.req)
  return _internal_mutable_req();
}
inline const std::string& bench_request::_internal_req() const {
  return req_.Get();
}
inline void bench_request::_internal_set_req(const std::string& value) {
  
  req_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void bench_request::set_req(std::string&& value) {
  
  req_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:osd.bench_request.req)
}
inline void bench_request::set_req(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  req_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:osd.bench_request.req)
}
inline void bench_request::set_req(const void* value,
    size_t size) {
  
  req_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:osd.bench_request.req)
}
inline std::string* bench_request::_internal_mutable_req() {
  
  return req_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* bench_request::release_req() {
  // @@protoc_insertion_point(field_release:osd.bench_request.req)
  return req_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void bench_request::set_allocated_req(std::string* req) {
  if (req != nullptr) {
    
  } else {
    
  }
  req_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), req,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:osd.bench_request.req)
}
inline std::string* bench_request::unsafe_arena_release_req() {
  // @@protoc_insertion_point(field_unsafe_arena_release:osd.bench_request.req)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return req_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void bench_request::unsafe_arena_set_allocated_req(
    std::string* req) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (req != nullptr) {
    
  } else {
    
  }
  req_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      req, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:osd.bench_request.req)
}

// -------------------------------------------------------------------

// bench_response

// bytes resp = 1;
inline void bench_response::clear_resp() {
  resp_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& bench_response::resp() const {
  // @@protoc_insertion_point(field_get:osd.bench_response.resp)
  return _internal_resp();
}
inline void bench_response::set_resp(const std::string& value) {
  _internal_set_resp(value);
  // @@protoc_insertion_point(field_set:osd.bench_response.resp)
}
inline std::string* bench_response::mutable_resp() {
  // @@protoc_insertion_point(field_mutable:osd.bench_response.resp)
  return _internal_mutable_resp();
}
inline const std::string& bench_response::_internal_resp() const {
  return resp_.Get();
}
inline void bench_response::_internal_set_resp(const std::string& value) {
  
  resp_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void bench_response::set_resp(std::string&& value) {
  
  resp_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:osd.bench_response.resp)
}
inline void bench_response::set_resp(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  resp_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:osd.bench_response.resp)
}
inline void bench_response::set_resp(const void* value,
    size_t size) {
  
  resp_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:osd.bench_response.resp)
}
inline std::string* bench_response::_internal_mutable_resp() {
  
  return resp_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* bench_response::release_resp() {
  // @@protoc_insertion_point(field_release:osd.bench_response.resp)
  return resp_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void bench_response::set_allocated_resp(std::string* resp) {
  if (resp != nullptr) {
    
  } else {
    
  }
  resp_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), resp,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:osd.bench_response.resp)
}
inline std::string* bench_response::unsafe_arena_release_resp() {
  // @@protoc_insertion_point(field_unsafe_arena_release:osd.bench_response.resp)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return resp_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void bench_response::unsafe_arena_set_allocated_resp(
    std::string* resp) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (resp != nullptr) {
    
  } else {
    
  }
  resp_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      resp, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:osd.bench_response.resp)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace osd

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_osd_5fmsg_2eproto
