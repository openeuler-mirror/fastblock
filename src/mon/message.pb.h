// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_message_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_message_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_message_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_message_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[39]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_message_2eproto;
namespace msg {
class ApplyIDRequest;
class ApplyIDRequestDefaultTypeInternal;
extern ApplyIDRequestDefaultTypeInternal _ApplyIDRequest_default_instance_;
class ApplyIDResponse;
class ApplyIDResponseDefaultTypeInternal;
extern ApplyIDResponseDefaultTypeInternal _ApplyIDResponse_default_instance_;
class BootRequest;
class BootRequestDefaultTypeInternal;
extern BootRequestDefaultTypeInternal _BootRequest_default_instance_;
class BootResponse;
class BootResponseDefaultTypeInternal;
extern BootResponseDefaultTypeInternal _BootResponse_default_instance_;
class CreateImageRequest;
class CreateImageRequestDefaultTypeInternal;
extern CreateImageRequestDefaultTypeInternal _CreateImageRequest_default_instance_;
class CreateImageResponse;
class CreateImageResponseDefaultTypeInternal;
extern CreateImageResponseDefaultTypeInternal _CreateImageResponse_default_instance_;
class CreatePoolRequest;
class CreatePoolRequestDefaultTypeInternal;
extern CreatePoolRequestDefaultTypeInternal _CreatePoolRequest_default_instance_;
class CreatePoolResponse;
class CreatePoolResponseDefaultTypeInternal;
extern CreatePoolResponseDefaultTypeInternal _CreatePoolResponse_default_instance_;
class DeletePoolRequest;
class DeletePoolRequestDefaultTypeInternal;
extern DeletePoolRequestDefaultTypeInternal _DeletePoolRequest_default_instance_;
class DeletePoolResponse;
class DeletePoolResponseDefaultTypeInternal;
extern DeletePoolResponseDefaultTypeInternal _DeletePoolResponse_default_instance_;
class GetClusterMapRequest;
class GetClusterMapRequestDefaultTypeInternal;
extern GetClusterMapRequestDefaultTypeInternal _GetClusterMapRequest_default_instance_;
class GetClusterMapResponse;
class GetClusterMapResponseDefaultTypeInternal;
extern GetClusterMapResponseDefaultTypeInternal _GetClusterMapResponse_default_instance_;
class GetImageInfoRequest;
class GetImageInfoRequestDefaultTypeInternal;
extern GetImageInfoRequestDefaultTypeInternal _GetImageInfoRequest_default_instance_;
class GetImageInfoResponse;
class GetImageInfoResponseDefaultTypeInternal;
extern GetImageInfoResponseDefaultTypeInternal _GetImageInfoResponse_default_instance_;
class GetOsdMapRequest;
class GetOsdMapRequestDefaultTypeInternal;
extern GetOsdMapRequestDefaultTypeInternal _GetOsdMapRequest_default_instance_;
class GetOsdMapResponse;
class GetOsdMapResponseDefaultTypeInternal;
extern GetOsdMapResponseDefaultTypeInternal _GetOsdMapResponse_default_instance_;
class GetPgMapRequest;
class GetPgMapRequestDefaultTypeInternal;
extern GetPgMapRequestDefaultTypeInternal _GetPgMapRequest_default_instance_;
class GetPgMapRequest_PoolVersionsEntry_DoNotUse;
class GetPgMapRequest_PoolVersionsEntry_DoNotUseDefaultTypeInternal;
extern GetPgMapRequest_PoolVersionsEntry_DoNotUseDefaultTypeInternal _GetPgMapRequest_PoolVersionsEntry_DoNotUse_default_instance_;
class GetPgMapResponse;
class GetPgMapResponseDefaultTypeInternal;
extern GetPgMapResponseDefaultTypeInternal _GetPgMapResponse_default_instance_;
class GetPgMapResponse_ErrorcodeEntry_DoNotUse;
class GetPgMapResponse_ErrorcodeEntry_DoNotUseDefaultTypeInternal;
extern GetPgMapResponse_ErrorcodeEntry_DoNotUseDefaultTypeInternal _GetPgMapResponse_ErrorcodeEntry_DoNotUse_default_instance_;
class GetPgMapResponse_PgsEntry_DoNotUse;
class GetPgMapResponse_PgsEntry_DoNotUseDefaultTypeInternal;
extern GetPgMapResponse_PgsEntry_DoNotUseDefaultTypeInternal _GetPgMapResponse_PgsEntry_DoNotUse_default_instance_;
class GetPgMapResponse_PoolidPgmapversionEntry_DoNotUse;
class GetPgMapResponse_PoolidPgmapversionEntry_DoNotUseDefaultTypeInternal;
extern GetPgMapResponse_PoolidPgmapversionEntry_DoNotUseDefaultTypeInternal _GetPgMapResponse_PoolidPgmapversionEntry_DoNotUse_default_instance_;
class HeartbeatRequest;
class HeartbeatRequestDefaultTypeInternal;
extern HeartbeatRequestDefaultTypeInternal _HeartbeatRequest_default_instance_;
class HeartbeatResponse;
class HeartbeatResponseDefaultTypeInternal;
extern HeartbeatResponseDefaultTypeInternal _HeartbeatResponse_default_instance_;
class ImageInfo;
class ImageInfoDefaultTypeInternal;
extern ImageInfoDefaultTypeInternal _ImageInfo_default_instance_;
class ListPoolsRequest;
class ListPoolsRequestDefaultTypeInternal;
extern ListPoolsRequestDefaultTypeInternal _ListPoolsRequest_default_instance_;
class ListPoolsResponse;
class ListPoolsResponseDefaultTypeInternal;
extern ListPoolsResponseDefaultTypeInternal _ListPoolsResponse_default_instance_;
class OsdDynamicInfo;
class OsdDynamicInfoDefaultTypeInternal;
extern OsdDynamicInfoDefaultTypeInternal _OsdDynamicInfo_default_instance_;
class OsdStopRequest;
class OsdStopRequestDefaultTypeInternal;
extern OsdStopRequestDefaultTypeInternal _OsdStopRequest_default_instance_;
class OsdStopResponse;
class OsdStopResponseDefaultTypeInternal;
extern OsdStopResponseDefaultTypeInternal _OsdStopResponse_default_instance_;
class PGInfo;
class PGInfoDefaultTypeInternal;
extern PGInfoDefaultTypeInternal _PGInfo_default_instance_;
class PGInfos;
class PGInfosDefaultTypeInternal;
extern PGInfosDefaultTypeInternal _PGInfos_default_instance_;
class RemoveImageRequest;
class RemoveImageRequestDefaultTypeInternal;
extern RemoveImageRequestDefaultTypeInternal _RemoveImageRequest_default_instance_;
class RemoveImageResponse;
class RemoveImageResponseDefaultTypeInternal;
extern RemoveImageResponseDefaultTypeInternal _RemoveImageResponse_default_instance_;
class Request;
class RequestDefaultTypeInternal;
extern RequestDefaultTypeInternal _Request_default_instance_;
class ResizeImageRequest;
class ResizeImageRequestDefaultTypeInternal;
extern ResizeImageRequestDefaultTypeInternal _ResizeImageRequest_default_instance_;
class ResizeImageResponse;
class ResizeImageResponseDefaultTypeInternal;
extern ResizeImageResponseDefaultTypeInternal _ResizeImageResponse_default_instance_;
class Response;
class ResponseDefaultTypeInternal;
extern ResponseDefaultTypeInternal _Response_default_instance_;
class poolinfo;
class poolinfoDefaultTypeInternal;
extern poolinfoDefaultTypeInternal _poolinfo_default_instance_;
}  // namespace msg
PROTOBUF_NAMESPACE_OPEN
template<> ::msg::ApplyIDRequest* Arena::CreateMaybeMessage<::msg::ApplyIDRequest>(Arena*);
template<> ::msg::ApplyIDResponse* Arena::CreateMaybeMessage<::msg::ApplyIDResponse>(Arena*);
template<> ::msg::BootRequest* Arena::CreateMaybeMessage<::msg::BootRequest>(Arena*);
template<> ::msg::BootResponse* Arena::CreateMaybeMessage<::msg::BootResponse>(Arena*);
template<> ::msg::CreateImageRequest* Arena::CreateMaybeMessage<::msg::CreateImageRequest>(Arena*);
template<> ::msg::CreateImageResponse* Arena::CreateMaybeMessage<::msg::CreateImageResponse>(Arena*);
template<> ::msg::CreatePoolRequest* Arena::CreateMaybeMessage<::msg::CreatePoolRequest>(Arena*);
template<> ::msg::CreatePoolResponse* Arena::CreateMaybeMessage<::msg::CreatePoolResponse>(Arena*);
template<> ::msg::DeletePoolRequest* Arena::CreateMaybeMessage<::msg::DeletePoolRequest>(Arena*);
template<> ::msg::DeletePoolResponse* Arena::CreateMaybeMessage<::msg::DeletePoolResponse>(Arena*);
template<> ::msg::GetClusterMapRequest* Arena::CreateMaybeMessage<::msg::GetClusterMapRequest>(Arena*);
template<> ::msg::GetClusterMapResponse* Arena::CreateMaybeMessage<::msg::GetClusterMapResponse>(Arena*);
template<> ::msg::GetImageInfoRequest* Arena::CreateMaybeMessage<::msg::GetImageInfoRequest>(Arena*);
template<> ::msg::GetImageInfoResponse* Arena::CreateMaybeMessage<::msg::GetImageInfoResponse>(Arena*);
template<> ::msg::GetOsdMapRequest* Arena::CreateMaybeMessage<::msg::GetOsdMapRequest>(Arena*);
template<> ::msg::GetOsdMapResponse* Arena::CreateMaybeMessage<::msg::GetOsdMapResponse>(Arena*);
template<> ::msg::GetPgMapRequest* Arena::CreateMaybeMessage<::msg::GetPgMapRequest>(Arena*);
template<> ::msg::GetPgMapRequest_PoolVersionsEntry_DoNotUse* Arena::CreateMaybeMessage<::msg::GetPgMapRequest_PoolVersionsEntry_DoNotUse>(Arena*);
template<> ::msg::GetPgMapResponse* Arena::CreateMaybeMessage<::msg::GetPgMapResponse>(Arena*);
template<> ::msg::GetPgMapResponse_ErrorcodeEntry_DoNotUse* Arena::CreateMaybeMessage<::msg::GetPgMapResponse_ErrorcodeEntry_DoNotUse>(Arena*);
template<> ::msg::GetPgMapResponse_PgsEntry_DoNotUse* Arena::CreateMaybeMessage<::msg::GetPgMapResponse_PgsEntry_DoNotUse>(Arena*);
template<> ::msg::GetPgMapResponse_PoolidPgmapversionEntry_DoNotUse* Arena::CreateMaybeMessage<::msg::GetPgMapResponse_PoolidPgmapversionEntry_DoNotUse>(Arena*);
template<> ::msg::HeartbeatRequest* Arena::CreateMaybeMessage<::msg::HeartbeatRequest>(Arena*);
template<> ::msg::HeartbeatResponse* Arena::CreateMaybeMessage<::msg::HeartbeatResponse>(Arena*);
template<> ::msg::ImageInfo* Arena::CreateMaybeMessage<::msg::ImageInfo>(Arena*);
template<> ::msg::ListPoolsRequest* Arena::CreateMaybeMessage<::msg::ListPoolsRequest>(Arena*);
template<> ::msg::ListPoolsResponse* Arena::CreateMaybeMessage<::msg::ListPoolsResponse>(Arena*);
template<> ::msg::OsdDynamicInfo* Arena::CreateMaybeMessage<::msg::OsdDynamicInfo>(Arena*);
template<> ::msg::OsdStopRequest* Arena::CreateMaybeMessage<::msg::OsdStopRequest>(Arena*);
template<> ::msg::OsdStopResponse* Arena::CreateMaybeMessage<::msg::OsdStopResponse>(Arena*);
template<> ::msg::PGInfo* Arena::CreateMaybeMessage<::msg::PGInfo>(Arena*);
template<> ::msg::PGInfos* Arena::CreateMaybeMessage<::msg::PGInfos>(Arena*);
template<> ::msg::RemoveImageRequest* Arena::CreateMaybeMessage<::msg::RemoveImageRequest>(Arena*);
template<> ::msg::RemoveImageResponse* Arena::CreateMaybeMessage<::msg::RemoveImageResponse>(Arena*);
template<> ::msg::Request* Arena::CreateMaybeMessage<::msg::Request>(Arena*);
template<> ::msg::ResizeImageRequest* Arena::CreateMaybeMessage<::msg::ResizeImageRequest>(Arena*);
template<> ::msg::ResizeImageResponse* Arena::CreateMaybeMessage<::msg::ResizeImageResponse>(Arena*);
template<> ::msg::Response* Arena::CreateMaybeMessage<::msg::Response>(Arena*);
template<> ::msg::poolinfo* Arena::CreateMaybeMessage<::msg::poolinfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace msg {

enum GetPgMapErrorCode : int {
  pgMapGetOk = 0,
  pgMapclientVersionHigher = 1,
  PgMapclusterNoPools = 2,
  PgMapSameVersion = 3,
  GetPgMapErrorCode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  GetPgMapErrorCode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool GetPgMapErrorCode_IsValid(int value);
constexpr GetPgMapErrorCode GetPgMapErrorCode_MIN = pgMapGetOk;
constexpr GetPgMapErrorCode GetPgMapErrorCode_MAX = PgMapSameVersion;
constexpr int GetPgMapErrorCode_ARRAYSIZE = GetPgMapErrorCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GetPgMapErrorCode_descriptor();
template<typename T>
inline const std::string& GetPgMapErrorCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GetPgMapErrorCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GetPgMapErrorCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    GetPgMapErrorCode_descriptor(), enum_t_value);
}
inline bool GetPgMapErrorCode_Parse(
    const std::string& name, GetPgMapErrorCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GetPgMapErrorCode>(
    GetPgMapErrorCode_descriptor(), name, value);
}
enum OsdMapErrorCode : int {
  ok = 0,
  clientVersionHigher = 1,
  clientVersionInvalid = 2,
  noOsdsExist = 3,
  OsdMapErrorCode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  OsdMapErrorCode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool OsdMapErrorCode_IsValid(int value);
constexpr OsdMapErrorCode OsdMapErrorCode_MIN = ok;
constexpr OsdMapErrorCode OsdMapErrorCode_MAX = noOsdsExist;
constexpr int OsdMapErrorCode_ARRAYSIZE = OsdMapErrorCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OsdMapErrorCode_descriptor();
template<typename T>
inline const std::string& OsdMapErrorCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, OsdMapErrorCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function OsdMapErrorCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    OsdMapErrorCode_descriptor(), enum_t_value);
}
inline bool OsdMapErrorCode_Parse(
    const std::string& name, OsdMapErrorCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<OsdMapErrorCode>(
    OsdMapErrorCode_descriptor(), name, value);
}
enum CreateImageErrorCode : int {
  createImageOk = 0,
  imageExists = 1,
  unknownPoolName = 2,
  marshalImageContextError = 3,
  putEtcdError = 4,
  CreateImageErrorCode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  CreateImageErrorCode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool CreateImageErrorCode_IsValid(int value);
constexpr CreateImageErrorCode CreateImageErrorCode_MIN = createImageOk;
constexpr CreateImageErrorCode CreateImageErrorCode_MAX = putEtcdError;
constexpr int CreateImageErrorCode_ARRAYSIZE = CreateImageErrorCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CreateImageErrorCode_descriptor();
template<typename T>
inline const std::string& CreateImageErrorCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CreateImageErrorCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CreateImageErrorCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CreateImageErrorCode_descriptor(), enum_t_value);
}
inline bool CreateImageErrorCode_Parse(
    const std::string& name, CreateImageErrorCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CreateImageErrorCode>(
    CreateImageErrorCode_descriptor(), name, value);
}
enum RemoveImageErrorCode : int {
  removeImageOk = 0,
  imageNotFound = 1,
  removeImageFail = 2,
  RemoveImageErrorCode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  RemoveImageErrorCode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool RemoveImageErrorCode_IsValid(int value);
constexpr RemoveImageErrorCode RemoveImageErrorCode_MIN = removeImageOk;
constexpr RemoveImageErrorCode RemoveImageErrorCode_MAX = removeImageFail;
constexpr int RemoveImageErrorCode_ARRAYSIZE = RemoveImageErrorCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RemoveImageErrorCode_descriptor();
template<typename T>
inline const std::string& RemoveImageErrorCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RemoveImageErrorCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RemoveImageErrorCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RemoveImageErrorCode_descriptor(), enum_t_value);
}
inline bool RemoveImageErrorCode_Parse(
    const std::string& name, RemoveImageErrorCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RemoveImageErrorCode>(
    RemoveImageErrorCode_descriptor(), name, value);
}
enum ResizeImageErrorCode : int {
  resizeImageOk = 0,
  resizeImageNotFound = 1,
  marshalResizeImageContextError = 2,
  putResizeImageEtcdError = 3,
  ResizeImageErrorCode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ResizeImageErrorCode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ResizeImageErrorCode_IsValid(int value);
constexpr ResizeImageErrorCode ResizeImageErrorCode_MIN = resizeImageOk;
constexpr ResizeImageErrorCode ResizeImageErrorCode_MAX = putResizeImageEtcdError;
constexpr int ResizeImageErrorCode_ARRAYSIZE = ResizeImageErrorCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ResizeImageErrorCode_descriptor();
template<typename T>
inline const std::string& ResizeImageErrorCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ResizeImageErrorCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ResizeImageErrorCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ResizeImageErrorCode_descriptor(), enum_t_value);
}
inline bool ResizeImageErrorCode_Parse(
    const std::string& name, ResizeImageErrorCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ResizeImageErrorCode>(
    ResizeImageErrorCode_descriptor(), name, value);
}
enum GetImageErrorCode : int {
  getImageOk = 0,
  getImageNotFound = 1,
  GetImageErrorCode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  GetImageErrorCode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool GetImageErrorCode_IsValid(int value);
constexpr GetImageErrorCode GetImageErrorCode_MIN = getImageOk;
constexpr GetImageErrorCode GetImageErrorCode_MAX = getImageNotFound;
constexpr int GetImageErrorCode_ARRAYSIZE = GetImageErrorCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GetImageErrorCode_descriptor();
template<typename T>
inline const std::string& GetImageErrorCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GetImageErrorCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GetImageErrorCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    GetImageErrorCode_descriptor(), enum_t_value);
}
inline bool GetImageErrorCode_Parse(
    const std::string& name, GetImageErrorCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GetImageErrorCode>(
    GetImageErrorCode_descriptor(), name, value);
}
// ===================================================================

class CreatePoolRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CreatePoolRequest) */ {
 public:
  inline CreatePoolRequest() : CreatePoolRequest(nullptr) {};
  virtual ~CreatePoolRequest();

  CreatePoolRequest(const CreatePoolRequest& from);
  CreatePoolRequest(CreatePoolRequest&& from) noexcept
    : CreatePoolRequest() {
    *this = ::std::move(from);
  }

  inline CreatePoolRequest& operator=(const CreatePoolRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreatePoolRequest& operator=(CreatePoolRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreatePoolRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreatePoolRequest* internal_default_instance() {
    return reinterpret_cast<const CreatePoolRequest*>(
               &_CreatePoolRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CreatePoolRequest& a, CreatePoolRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreatePoolRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreatePoolRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreatePoolRequest* New() const final {
    return CreateMaybeMessage<CreatePoolRequest>(nullptr);
  }

  CreatePoolRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreatePoolRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreatePoolRequest& from);
  void MergeFrom(const CreatePoolRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreatePoolRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CreatePoolRequest";
  }
  protected:
  explicit CreatePoolRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2eproto);
    return ::descriptor_table_message_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kFailuredomainFieldNumber = 4,
    kRootFieldNumber = 5,
    kPgsizeFieldNumber = 2,
    kPgcountFieldNumber = 3,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string failuredomain = 4;
  void clear_failuredomain();
  const std::string& failuredomain() const;
  void set_failuredomain(const std::string& value);
  void set_failuredomain(std::string&& value);
  void set_failuredomain(const char* value);
  void set_failuredomain(const char* value, size_t size);
  std::string* mutable_failuredomain();
  std::string* release_failuredomain();
  void set_allocated_failuredomain(std::string* failuredomain);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_failuredomain();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_failuredomain(
      std::string* failuredomain);
  private:
  const std::string& _internal_failuredomain() const;
  void _internal_set_failuredomain(const std::string& value);
  std::string* _internal_mutable_failuredomain();
  public:

  // string root = 5;
  void clear_root();
  const std::string& root() const;
  void set_root(const std::string& value);
  void set_root(std::string&& value);
  void set_root(const char* value);
  void set_root(const char* value, size_t size);
  std::string* mutable_root();
  std::string* release_root();
  void set_allocated_root(std::string* root);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_root();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_root(
      std::string* root);
  private:
  const std::string& _internal_root() const;
  void _internal_set_root(const std::string& value);
  std::string* _internal_mutable_root();
  public:

  // int32 pgsize = 2;
  void clear_pgsize();
  ::PROTOBUF_NAMESPACE_ID::int32 pgsize() const;
  void set_pgsize(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pgsize() const;
  void _internal_set_pgsize(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 pgcount = 3;
  void clear_pgcount();
  ::PROTOBUF_NAMESPACE_ID::int32 pgcount() const;
  void set_pgcount(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pgcount() const;
  void _internal_set_pgcount(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CreatePoolRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr failuredomain_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr root_;
  ::PROTOBUF_NAMESPACE_ID::int32 pgsize_;
  ::PROTOBUF_NAMESPACE_ID::int32 pgcount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class CreatePoolResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CreatePoolResponse) */ {
 public:
  inline CreatePoolResponse() : CreatePoolResponse(nullptr) {};
  virtual ~CreatePoolResponse();

  CreatePoolResponse(const CreatePoolResponse& from);
  CreatePoolResponse(CreatePoolResponse&& from) noexcept
    : CreatePoolResponse() {
    *this = ::std::move(from);
  }

  inline CreatePoolResponse& operator=(const CreatePoolResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreatePoolResponse& operator=(CreatePoolResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreatePoolResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreatePoolResponse* internal_default_instance() {
    return reinterpret_cast<const CreatePoolResponse*>(
               &_CreatePoolResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CreatePoolResponse& a, CreatePoolResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreatePoolResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreatePoolResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreatePoolResponse* New() const final {
    return CreateMaybeMessage<CreatePoolResponse>(nullptr);
  }

  CreatePoolResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreatePoolResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreatePoolResponse& from);
  void MergeFrom(const CreatePoolResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreatePoolResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CreatePoolResponse";
  }
  protected:
  explicit CreatePoolResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2eproto);
    return ::descriptor_table_message_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOkFieldNumber = 1,
    kPoolidFieldNumber = 2,
  };
  // bool ok = 1;
  void clear_ok();
  bool ok() const;
  void set_ok(bool value);
  private:
  bool _internal_ok() const;
  void _internal_set_ok(bool value);
  public:

  // int32 poolid = 2;
  void clear_poolid();
  ::PROTOBUF_NAMESPACE_ID::int32 poolid() const;
  void set_poolid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_poolid() const;
  void _internal_set_poolid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CreatePoolResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool ok_;
  ::PROTOBUF_NAMESPACE_ID::int32 poolid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class ListPoolsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.ListPoolsRequest) */ {
 public:
  inline ListPoolsRequest() : ListPoolsRequest(nullptr) {};
  virtual ~ListPoolsRequest();

  ListPoolsRequest(const ListPoolsRequest& from);
  ListPoolsRequest(ListPoolsRequest&& from) noexcept
    : ListPoolsRequest() {
    *this = ::std::move(from);
  }

  inline ListPoolsRequest& operator=(const ListPoolsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListPoolsRequest& operator=(ListPoolsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListPoolsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListPoolsRequest* internal_default_instance() {
    return reinterpret_cast<const ListPoolsRequest*>(
               &_ListPoolsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ListPoolsRequest& a, ListPoolsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListPoolsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListPoolsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListPoolsRequest* New() const final {
    return CreateMaybeMessage<ListPoolsRequest>(nullptr);
  }

  ListPoolsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListPoolsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListPoolsRequest& from);
  void MergeFrom(const ListPoolsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListPoolsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.ListPoolsRequest";
  }
  protected:
  explicit ListPoolsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2eproto);
    return ::descriptor_table_message_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:msg.ListPoolsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class poolinfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.poolinfo) */ {
 public:
  inline poolinfo() : poolinfo(nullptr) {};
  virtual ~poolinfo();

  poolinfo(const poolinfo& from);
  poolinfo(poolinfo&& from) noexcept
    : poolinfo() {
    *this = ::std::move(from);
  }

  inline poolinfo& operator=(const poolinfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline poolinfo& operator=(poolinfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const poolinfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const poolinfo* internal_default_instance() {
    return reinterpret_cast<const poolinfo*>(
               &_poolinfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(poolinfo& a, poolinfo& b) {
    a.Swap(&b);
  }
  inline void Swap(poolinfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(poolinfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline poolinfo* New() const final {
    return CreateMaybeMessage<poolinfo>(nullptr);
  }

  poolinfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<poolinfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const poolinfo& from);
  void MergeFrom(const poolinfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(poolinfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.poolinfo";
  }
  protected:
  explicit poolinfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2eproto);
    return ::descriptor_table_message_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kFailuredomainFieldNumber = 5,
    kRootFieldNumber = 6,
    kPoolidFieldNumber = 1,
    kPgsizeFieldNumber = 3,
    kPgcountFieldNumber = 4,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string failuredomain = 5;
  void clear_failuredomain();
  const std::string& failuredomain() const;
  void set_failuredomain(const std::string& value);
  void set_failuredomain(std::string&& value);
  void set_failuredomain(const char* value);
  void set_failuredomain(const char* value, size_t size);
  std::string* mutable_failuredomain();
  std::string* release_failuredomain();
  void set_allocated_failuredomain(std::string* failuredomain);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_failuredomain();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_failuredomain(
      std::string* failuredomain);
  private:
  const std::string& _internal_failuredomain() const;
  void _internal_set_failuredomain(const std::string& value);
  std::string* _internal_mutable_failuredomain();
  public:

  // string root = 6;
  void clear_root();
  const std::string& root() const;
  void set_root(const std::string& value);
  void set_root(std::string&& value);
  void set_root(const char* value);
  void set_root(const char* value, size_t size);
  std::string* mutable_root();
  std::string* release_root();
  void set_allocated_root(std::string* root);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_root();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_root(
      std::string* root);
  private:
  const std::string& _internal_root() const;
  void _internal_set_root(const std::string& value);
  std::string* _internal_mutable_root();
  public:

  // int32 poolid = 1;
  void clear_poolid();
  ::PROTOBUF_NAMESPACE_ID::int32 poolid() const;
  void set_poolid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_poolid() const;
  void _internal_set_poolid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 pgsize = 3;
  void clear_pgsize();
  ::PROTOBUF_NAMESPACE_ID::int32 pgsize() const;
  void set_pgsize(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pgsize() const;
  void _internal_set_pgsize(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 pgcount = 4;
  void clear_pgcount();
  ::PROTOBUF_NAMESPACE_ID::int32 pgcount() const;
  void set_pgcount(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pgcount() const;
  void _internal_set_pgcount(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:msg.poolinfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr failuredomain_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr root_;
  ::PROTOBUF_NAMESPACE_ID::int32 poolid_;
  ::PROTOBUF_NAMESPACE_ID::int32 pgsize_;
  ::PROTOBUF_NAMESPACE_ID::int32 pgcount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class ListPoolsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.ListPoolsResponse) */ {
 public:
  inline ListPoolsResponse() : ListPoolsResponse(nullptr) {};
  virtual ~ListPoolsResponse();

  ListPoolsResponse(const ListPoolsResponse& from);
  ListPoolsResponse(ListPoolsResponse&& from) noexcept
    : ListPoolsResponse() {
    *this = ::std::move(from);
  }

  inline ListPoolsResponse& operator=(const ListPoolsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListPoolsResponse& operator=(ListPoolsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListPoolsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListPoolsResponse* internal_default_instance() {
    return reinterpret_cast<const ListPoolsResponse*>(
               &_ListPoolsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ListPoolsResponse& a, ListPoolsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListPoolsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListPoolsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListPoolsResponse* New() const final {
    return CreateMaybeMessage<ListPoolsResponse>(nullptr);
  }

  ListPoolsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListPoolsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListPoolsResponse& from);
  void MergeFrom(const ListPoolsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListPoolsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.ListPoolsResponse";
  }
  protected:
  explicit ListPoolsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2eproto);
    return ::descriptor_table_message_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPiFieldNumber = 1,
  };
  // repeated .msg.poolinfo pi = 1;
  int pi_size() const;
  private:
  int _internal_pi_size() const;
  public:
  void clear_pi();
  ::msg::poolinfo* mutable_pi(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::poolinfo >*
      mutable_pi();
  private:
  const ::msg::poolinfo& _internal_pi(int index) const;
  ::msg::poolinfo* _internal_add_pi();
  public:
  const ::msg::poolinfo& pi(int index) const;
  ::msg::poolinfo* add_pi();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::poolinfo >&
      pi() const;

  // @@protoc_insertion_point(class_scope:msg.ListPoolsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::poolinfo > pi_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class DeletePoolRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.DeletePoolRequest) */ {
 public:
  inline DeletePoolRequest() : DeletePoolRequest(nullptr) {};
  virtual ~DeletePoolRequest();

  DeletePoolRequest(const DeletePoolRequest& from);
  DeletePoolRequest(DeletePoolRequest&& from) noexcept
    : DeletePoolRequest() {
    *this = ::std::move(from);
  }

  inline DeletePoolRequest& operator=(const DeletePoolRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeletePoolRequest& operator=(DeletePoolRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeletePoolRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeletePoolRequest* internal_default_instance() {
    return reinterpret_cast<const DeletePoolRequest*>(
               &_DeletePoolRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(DeletePoolRequest& a, DeletePoolRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeletePoolRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeletePoolRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeletePoolRequest* New() const final {
    return CreateMaybeMessage<DeletePoolRequest>(nullptr);
  }

  DeletePoolRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeletePoolRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeletePoolRequest& from);
  void MergeFrom(const DeletePoolRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeletePoolRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.DeletePoolRequest";
  }
  protected:
  explicit DeletePoolRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2eproto);
    return ::descriptor_table_message_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:msg.DeletePoolRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class DeletePoolResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.DeletePoolResponse) */ {
 public:
  inline DeletePoolResponse() : DeletePoolResponse(nullptr) {};
  virtual ~DeletePoolResponse();

  DeletePoolResponse(const DeletePoolResponse& from);
  DeletePoolResponse(DeletePoolResponse&& from) noexcept
    : DeletePoolResponse() {
    *this = ::std::move(from);
  }

  inline DeletePoolResponse& operator=(const DeletePoolResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeletePoolResponse& operator=(DeletePoolResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeletePoolResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeletePoolResponse* internal_default_instance() {
    return reinterpret_cast<const DeletePoolResponse*>(
               &_DeletePoolResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(DeletePoolResponse& a, DeletePoolResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeletePoolResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeletePoolResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeletePoolResponse* New() const final {
    return CreateMaybeMessage<DeletePoolResponse>(nullptr);
  }

  DeletePoolResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeletePoolResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeletePoolResponse& from);
  void MergeFrom(const DeletePoolResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeletePoolResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.DeletePoolResponse";
  }
  protected:
  explicit DeletePoolResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2eproto);
    return ::descriptor_table_message_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOkFieldNumber = 1,
  };
  // bool ok = 1;
  void clear_ok();
  bool ok() const;
  void set_ok(bool value);
  private:
  bool _internal_ok() const;
  void _internal_set_ok(bool value);
  public:

  // @@protoc_insertion_point(class_scope:msg.DeletePoolResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool ok_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class ApplyIDRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.ApplyIDRequest) */ {
 public:
  inline ApplyIDRequest() : ApplyIDRequest(nullptr) {};
  virtual ~ApplyIDRequest();

  ApplyIDRequest(const ApplyIDRequest& from);
  ApplyIDRequest(ApplyIDRequest&& from) noexcept
    : ApplyIDRequest() {
    *this = ::std::move(from);
  }

  inline ApplyIDRequest& operator=(const ApplyIDRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ApplyIDRequest& operator=(ApplyIDRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ApplyIDRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ApplyIDRequest* internal_default_instance() {
    return reinterpret_cast<const ApplyIDRequest*>(
               &_ApplyIDRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ApplyIDRequest& a, ApplyIDRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ApplyIDRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ApplyIDRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ApplyIDRequest* New() const final {
    return CreateMaybeMessage<ApplyIDRequest>(nullptr);
  }

  ApplyIDRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ApplyIDRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ApplyIDRequest& from);
  void MergeFrom(const ApplyIDRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ApplyIDRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.ApplyIDRequest";
  }
  protected:
  explicit ApplyIDRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2eproto);
    return ::descriptor_table_message_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUuidFieldNumber = 1,
  };
  // string uuid = 1;
  void clear_uuid();
  const std::string& uuid() const;
  void set_uuid(const std::string& value);
  void set_uuid(std::string&& value);
  void set_uuid(const char* value);
  void set_uuid(const char* value, size_t size);
  std::string* mutable_uuid();
  std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_uuid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_uuid(
      std::string* uuid);
  private:
  const std::string& _internal_uuid() const;
  void _internal_set_uuid(const std::string& value);
  std::string* _internal_mutable_uuid();
  public:

  // @@protoc_insertion_point(class_scope:msg.ApplyIDRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class ApplyIDResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.ApplyIDResponse) */ {
 public:
  inline ApplyIDResponse() : ApplyIDResponse(nullptr) {};
  virtual ~ApplyIDResponse();

  ApplyIDResponse(const ApplyIDResponse& from);
  ApplyIDResponse(ApplyIDResponse&& from) noexcept
    : ApplyIDResponse() {
    *this = ::std::move(from);
  }

  inline ApplyIDResponse& operator=(const ApplyIDResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ApplyIDResponse& operator=(ApplyIDResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ApplyIDResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ApplyIDResponse* internal_default_instance() {
    return reinterpret_cast<const ApplyIDResponse*>(
               &_ApplyIDResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ApplyIDResponse& a, ApplyIDResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ApplyIDResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ApplyIDResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ApplyIDResponse* New() const final {
    return CreateMaybeMessage<ApplyIDResponse>(nullptr);
  }

  ApplyIDResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ApplyIDResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ApplyIDResponse& from);
  void MergeFrom(const ApplyIDResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ApplyIDResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.ApplyIDResponse";
  }
  protected:
  explicit ApplyIDResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2eproto);
    return ::descriptor_table_message_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUuidFieldNumber = 1,
    kIdFieldNumber = 2,
  };
  // string uuid = 1;
  void clear_uuid();
  const std::string& uuid() const;
  void set_uuid(const std::string& value);
  void set_uuid(std::string&& value);
  void set_uuid(const char* value);
  void set_uuid(const char* value, size_t size);
  std::string* mutable_uuid();
  std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_uuid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_uuid(
      std::string* uuid);
  private:
  const std::string& _internal_uuid() const;
  void _internal_set_uuid(const std::string& value);
  std::string* _internal_mutable_uuid();
  public:

  // int32 id = 2;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:msg.ApplyIDResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class BootRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.BootRequest) */ {
 public:
  inline BootRequest() : BootRequest(nullptr) {};
  virtual ~BootRequest();

  BootRequest(const BootRequest& from);
  BootRequest(BootRequest&& from) noexcept
    : BootRequest() {
    *this = ::std::move(from);
  }

  inline BootRequest& operator=(const BootRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BootRequest& operator=(BootRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BootRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BootRequest* internal_default_instance() {
    return reinterpret_cast<const BootRequest*>(
               &_BootRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(BootRequest& a, BootRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(BootRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BootRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BootRequest* New() const final {
    return CreateMaybeMessage<BootRequest>(nullptr);
  }

  BootRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BootRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BootRequest& from);
  void MergeFrom(const BootRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BootRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.BootRequest";
  }
  protected:
  explicit BootRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2eproto);
    return ::descriptor_table_message_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUuidFieldNumber = 2,
    kAddressFieldNumber = 5,
    kHostFieldNumber = 6,
    kOsdIdFieldNumber = 1,
    kPortFieldNumber = 4,
    kSizeFieldNumber = 3,
  };
  // string uuid = 2;
  void clear_uuid();
  const std::string& uuid() const;
  void set_uuid(const std::string& value);
  void set_uuid(std::string&& value);
  void set_uuid(const char* value);
  void set_uuid(const char* value, size_t size);
  std::string* mutable_uuid();
  std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_uuid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_uuid(
      std::string* uuid);
  private:
  const std::string& _internal_uuid() const;
  void _internal_set_uuid(const std::string& value);
  std::string* _internal_mutable_uuid();
  public:

  // string address = 5;
  void clear_address();
  const std::string& address() const;
  void set_address(const std::string& value);
  void set_address(std::string&& value);
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  std::string* mutable_address();
  std::string* release_address();
  void set_allocated_address(std::string* address);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_address();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_address(
      std::string* address);
  private:
  const std::string& _internal_address() const;
  void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // string host = 6;
  void clear_host();
  const std::string& host() const;
  void set_host(const std::string& value);
  void set_host(std::string&& value);
  void set_host(const char* value);
  void set_host(const char* value, size_t size);
  std::string* mutable_host();
  std::string* release_host();
  void set_allocated_host(std::string* host);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_host();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_host(
      std::string* host);
  private:
  const std::string& _internal_host() const;
  void _internal_set_host(const std::string& value);
  std::string* _internal_mutable_host();
  public:

  // int32 osd_id = 1;
  void clear_osd_id();
  ::PROTOBUF_NAMESPACE_ID::int32 osd_id() const;
  void set_osd_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_osd_id() const;
  void _internal_set_osd_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // uint32 port = 4;
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::uint32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_port() const;
  void _internal_set_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // int64 size = 3;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::int64 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:msg.BootRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr host_;
  ::PROTOBUF_NAMESPACE_ID::int32 osd_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 port_;
  ::PROTOBUF_NAMESPACE_ID::int64 size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class PGInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.PGInfo) */ {
 public:
  inline PGInfo() : PGInfo(nullptr) {};
  virtual ~PGInfo();

  PGInfo(const PGInfo& from);
  PGInfo(PGInfo&& from) noexcept
    : PGInfo() {
    *this = ::std::move(from);
  }

  inline PGInfo& operator=(const PGInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline PGInfo& operator=(PGInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PGInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PGInfo* internal_default_instance() {
    return reinterpret_cast<const PGInfo*>(
               &_PGInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(PGInfo& a, PGInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(PGInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PGInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PGInfo* New() const final {
    return CreateMaybeMessage<PGInfo>(nullptr);
  }

  PGInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PGInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PGInfo& from);
  void MergeFrom(const PGInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PGInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.PGInfo";
  }
  protected:
  explicit PGInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2eproto);
    return ::descriptor_table_message_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOsdidFieldNumber = 3,
    kPgidFieldNumber = 2,
  };
  // repeated int32 osdid = 3;
  int osdid_size() const;
  private:
  int _internal_osdid_size() const;
  public:
  void clear_osdid();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_osdid(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_osdid() const;
  void _internal_add_osdid(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_osdid();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 osdid(int index) const;
  void set_osdid(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_osdid(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      osdid() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_osdid();

  // int32 pgid = 2;
  void clear_pgid();
  ::PROTOBUF_NAMESPACE_ID::int32 pgid() const;
  void set_pgid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pgid() const;
  void _internal_set_pgid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:msg.PGInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > osdid_;
  mutable std::atomic<int> _osdid_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 pgid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class PGInfos PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.PGInfos) */ {
 public:
  inline PGInfos() : PGInfos(nullptr) {};
  virtual ~PGInfos();

  PGInfos(const PGInfos& from);
  PGInfos(PGInfos&& from) noexcept
    : PGInfos() {
    *this = ::std::move(from);
  }

  inline PGInfos& operator=(const PGInfos& from) {
    CopyFrom(from);
    return *this;
  }
  inline PGInfos& operator=(PGInfos&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PGInfos& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PGInfos* internal_default_instance() {
    return reinterpret_cast<const PGInfos*>(
               &_PGInfos_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(PGInfos& a, PGInfos& b) {
    a.Swap(&b);
  }
  inline void Swap(PGInfos* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PGInfos* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PGInfos* New() const final {
    return CreateMaybeMessage<PGInfos>(nullptr);
  }

  PGInfos* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PGInfos>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PGInfos& from);
  void MergeFrom(const PGInfos& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PGInfos* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.PGInfos";
  }
  protected:
  explicit PGInfos(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2eproto);
    return ::descriptor_table_message_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPiFieldNumber = 1,
  };
  // repeated .msg.PGInfo pi = 1;
  int pi_size() const;
  private:
  int _internal_pi_size() const;
  public:
  void clear_pi();
  ::msg::PGInfo* mutable_pi(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::PGInfo >*
      mutable_pi();
  private:
  const ::msg::PGInfo& _internal_pi(int index) const;
  ::msg::PGInfo* _internal_add_pi();
  public:
  const ::msg::PGInfo& pi(int index) const;
  ::msg::PGInfo* add_pi();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::PGInfo >&
      pi() const;

  // @@protoc_insertion_point(class_scope:msg.PGInfos)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::PGInfo > pi_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class GetPgMapRequest_PoolVersionsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<GetPgMapRequest_PoolVersionsEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<GetPgMapRequest_PoolVersionsEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
    0 > SuperType;
  GetPgMapRequest_PoolVersionsEntry_DoNotUse();
  GetPgMapRequest_PoolVersionsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const GetPgMapRequest_PoolVersionsEntry_DoNotUse& other);
  static const GetPgMapRequest_PoolVersionsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const GetPgMapRequest_PoolVersionsEntry_DoNotUse*>(&_GetPgMapRequest_PoolVersionsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2eproto);
    return ::descriptor_table_message_2eproto.file_level_metadata[12];
  }

  public:
};

// -------------------------------------------------------------------

class GetPgMapRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.GetPgMapRequest) */ {
 public:
  inline GetPgMapRequest() : GetPgMapRequest(nullptr) {};
  virtual ~GetPgMapRequest();

  GetPgMapRequest(const GetPgMapRequest& from);
  GetPgMapRequest(GetPgMapRequest&& from) noexcept
    : GetPgMapRequest() {
    *this = ::std::move(from);
  }

  inline GetPgMapRequest& operator=(const GetPgMapRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPgMapRequest& operator=(GetPgMapRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetPgMapRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetPgMapRequest* internal_default_instance() {
    return reinterpret_cast<const GetPgMapRequest*>(
               &_GetPgMapRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(GetPgMapRequest& a, GetPgMapRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPgMapRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetPgMapRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetPgMapRequest* New() const final {
    return CreateMaybeMessage<GetPgMapRequest>(nullptr);
  }

  GetPgMapRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetPgMapRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetPgMapRequest& from);
  void MergeFrom(const GetPgMapRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPgMapRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.GetPgMapRequest";
  }
  protected:
  explicit GetPgMapRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2eproto);
    return ::descriptor_table_message_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kPoolVersionsFieldNumber = 1,
  };
  // map<int32, int64> pool_versions = 1;
  int pool_versions_size() const;
  private:
  int _internal_pool_versions_size() const;
  public:
  void clear_pool_versions();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_pool_versions() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_pool_versions();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int64 >&
      pool_versions() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_pool_versions();

  // @@protoc_insertion_point(class_scope:msg.GetPgMapRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      GetPgMapRequest_PoolVersionsEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int64,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
      0 > pool_versions_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class OsdDynamicInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.OsdDynamicInfo) */ {
 public:
  inline OsdDynamicInfo() : OsdDynamicInfo(nullptr) {};
  virtual ~OsdDynamicInfo();

  OsdDynamicInfo(const OsdDynamicInfo& from);
  OsdDynamicInfo(OsdDynamicInfo&& from) noexcept
    : OsdDynamicInfo() {
    *this = ::std::move(from);
  }

  inline OsdDynamicInfo& operator=(const OsdDynamicInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline OsdDynamicInfo& operator=(OsdDynamicInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OsdDynamicInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OsdDynamicInfo* internal_default_instance() {
    return reinterpret_cast<const OsdDynamicInfo*>(
               &_OsdDynamicInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(OsdDynamicInfo& a, OsdDynamicInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(OsdDynamicInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OsdDynamicInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OsdDynamicInfo* New() const final {
    return CreateMaybeMessage<OsdDynamicInfo>(nullptr);
  }

  OsdDynamicInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OsdDynamicInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OsdDynamicInfo& from);
  void MergeFrom(const OsdDynamicInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OsdDynamicInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.OsdDynamicInfo";
  }
  protected:
  explicit OsdDynamicInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2eproto);
    return ::descriptor_table_message_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 2,
    kOsdidFieldNumber = 1,
    kPortFieldNumber = 3,
    kIsinFieldNumber = 4,
    kIsupFieldNumber = 5,
    kIspendingcreateFieldNumber = 6,
  };
  // string address = 2;
  void clear_address();
  const std::string& address() const;
  void set_address(const std::string& value);
  void set_address(std::string&& value);
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  std::string* mutable_address();
  std::string* release_address();
  void set_allocated_address(std::string* address);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_address();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_address(
      std::string* address);
  private:
  const std::string& _internal_address() const;
  void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // int32 osdid = 1;
  void clear_osdid();
  ::PROTOBUF_NAMESPACE_ID::int32 osdid() const;
  void set_osdid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_osdid() const;
  void _internal_set_osdid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 port = 3;
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::int32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_port() const;
  void _internal_set_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool isin = 4;
  void clear_isin();
  bool isin() const;
  void set_isin(bool value);
  private:
  bool _internal_isin() const;
  void _internal_set_isin(bool value);
  public:

  // bool isup = 5;
  void clear_isup();
  bool isup() const;
  void set_isup(bool value);
  private:
  bool _internal_isup() const;
  void _internal_set_isup(bool value);
  public:

  // bool ispendingcreate = 6;
  void clear_ispendingcreate();
  bool ispendingcreate() const;
  void set_ispendingcreate(bool value);
  private:
  bool _internal_ispendingcreate() const;
  void _internal_set_ispendingcreate(bool value);
  public:

  // @@protoc_insertion_point(class_scope:msg.OsdDynamicInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  ::PROTOBUF_NAMESPACE_ID::int32 osdid_;
  ::PROTOBUF_NAMESPACE_ID::int32 port_;
  bool isin_;
  bool isup_;
  bool ispendingcreate_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class GetPgMapResponse_ErrorcodeEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<GetPgMapResponse_ErrorcodeEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::msg::GetPgMapErrorCode,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<GetPgMapResponse_ErrorcodeEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::msg::GetPgMapErrorCode,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM,
    0 > SuperType;
  GetPgMapResponse_ErrorcodeEntry_DoNotUse();
  GetPgMapResponse_ErrorcodeEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const GetPgMapResponse_ErrorcodeEntry_DoNotUse& other);
  static const GetPgMapResponse_ErrorcodeEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const GetPgMapResponse_ErrorcodeEntry_DoNotUse*>(&_GetPgMapResponse_ErrorcodeEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2eproto);
    return ::descriptor_table_message_2eproto.file_level_metadata[15];
  }

  public:
};

// -------------------------------------------------------------------

class GetPgMapResponse_PoolidPgmapversionEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<GetPgMapResponse_PoolidPgmapversionEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<GetPgMapResponse_PoolidPgmapversionEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
    0 > SuperType;
  GetPgMapResponse_PoolidPgmapversionEntry_DoNotUse();
  GetPgMapResponse_PoolidPgmapversionEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const GetPgMapResponse_PoolidPgmapversionEntry_DoNotUse& other);
  static const GetPgMapResponse_PoolidPgmapversionEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const GetPgMapResponse_PoolidPgmapversionEntry_DoNotUse*>(&_GetPgMapResponse_PoolidPgmapversionEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2eproto);
    return ::descriptor_table_message_2eproto.file_level_metadata[16];
  }

  public:
};

// -------------------------------------------------------------------

class GetPgMapResponse_PgsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<GetPgMapResponse_PgsEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::msg::PGInfos,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<GetPgMapResponse_PgsEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::msg::PGInfos,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  GetPgMapResponse_PgsEntry_DoNotUse();
  GetPgMapResponse_PgsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const GetPgMapResponse_PgsEntry_DoNotUse& other);
  static const GetPgMapResponse_PgsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const GetPgMapResponse_PgsEntry_DoNotUse*>(&_GetPgMapResponse_PgsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2eproto);
    return ::descriptor_table_message_2eproto.file_level_metadata[17];
  }

  public:
};

// -------------------------------------------------------------------

class GetPgMapResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.GetPgMapResponse) */ {
 public:
  inline GetPgMapResponse() : GetPgMapResponse(nullptr) {};
  virtual ~GetPgMapResponse();

  GetPgMapResponse(const GetPgMapResponse& from);
  GetPgMapResponse(GetPgMapResponse&& from) noexcept
    : GetPgMapResponse() {
    *this = ::std::move(from);
  }

  inline GetPgMapResponse& operator=(const GetPgMapResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPgMapResponse& operator=(GetPgMapResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetPgMapResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetPgMapResponse* internal_default_instance() {
    return reinterpret_cast<const GetPgMapResponse*>(
               &_GetPgMapResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(GetPgMapResponse& a, GetPgMapResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPgMapResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetPgMapResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetPgMapResponse* New() const final {
    return CreateMaybeMessage<GetPgMapResponse>(nullptr);
  }

  GetPgMapResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetPgMapResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetPgMapResponse& from);
  void MergeFrom(const GetPgMapResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPgMapResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.GetPgMapResponse";
  }
  protected:
  explicit GetPgMapResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2eproto);
    return ::descriptor_table_message_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kErrorcodeFieldNumber = 1,
    kPoolidPgmapversionFieldNumber = 2,
    kPgsFieldNumber = 3,
  };
  // map<int32, .msg.GetPgMapErrorCode> errorcode = 1;
  int errorcode_size() const;
  private:
  int _internal_errorcode_size() const;
  public:
  void clear_errorcode();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::msg::GetPgMapErrorCode >&
      _internal_errorcode() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::msg::GetPgMapErrorCode >*
      _internal_mutable_errorcode();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::msg::GetPgMapErrorCode >&
      errorcode() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::msg::GetPgMapErrorCode >*
      mutable_errorcode();

  // map<int32, int64> poolid_pgmapversion = 2;
  int poolid_pgmapversion_size() const;
  private:
  int _internal_poolid_pgmapversion_size() const;
  public:
  void clear_poolid_pgmapversion();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_poolid_pgmapversion() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_poolid_pgmapversion();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int64 >&
      poolid_pgmapversion() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_poolid_pgmapversion();

  // map<int32, .msg.PGInfos> pgs = 3;
  int pgs_size() const;
  private:
  int _internal_pgs_size() const;
  public:
  void clear_pgs();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::msg::PGInfos >&
      _internal_pgs() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::msg::PGInfos >*
      _internal_mutable_pgs();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::msg::PGInfos >&
      pgs() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::msg::PGInfos >*
      mutable_pgs();

  // @@protoc_insertion_point(class_scope:msg.GetPgMapResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      GetPgMapResponse_ErrorcodeEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::int32, ::msg::GetPgMapErrorCode,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM,
      0 > errorcode_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      GetPgMapResponse_PoolidPgmapversionEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int64,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
      0 > poolid_pgmapversion_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      GetPgMapResponse_PgsEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::int32, ::msg::PGInfos,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > pgs_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class GetOsdMapRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.GetOsdMapRequest) */ {
 public:
  inline GetOsdMapRequest() : GetOsdMapRequest(nullptr) {};
  virtual ~GetOsdMapRequest();

  GetOsdMapRequest(const GetOsdMapRequest& from);
  GetOsdMapRequest(GetOsdMapRequest&& from) noexcept
    : GetOsdMapRequest() {
    *this = ::std::move(from);
  }

  inline GetOsdMapRequest& operator=(const GetOsdMapRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetOsdMapRequest& operator=(GetOsdMapRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetOsdMapRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetOsdMapRequest* internal_default_instance() {
    return reinterpret_cast<const GetOsdMapRequest*>(
               &_GetOsdMapRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(GetOsdMapRequest& a, GetOsdMapRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetOsdMapRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetOsdMapRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetOsdMapRequest* New() const final {
    return CreateMaybeMessage<GetOsdMapRequest>(nullptr);
  }

  GetOsdMapRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetOsdMapRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetOsdMapRequest& from);
  void MergeFrom(const GetOsdMapRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetOsdMapRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.GetOsdMapRequest";
  }
  protected:
  explicit GetOsdMapRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2eproto);
    return ::descriptor_table_message_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurrentversionFieldNumber = 2,
    kOsdidFieldNumber = 1,
  };
  // int64 currentversion = 2;
  void clear_currentversion();
  ::PROTOBUF_NAMESPACE_ID::int64 currentversion() const;
  void set_currentversion(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_currentversion() const;
  void _internal_set_currentversion(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 osdid = 1;
  void clear_osdid();
  ::PROTOBUF_NAMESPACE_ID::int32 osdid() const;
  void set_osdid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_osdid() const;
  void _internal_set_osdid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:msg.GetOsdMapRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 currentversion_;
  ::PROTOBUF_NAMESPACE_ID::int32 osdid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class GetOsdMapResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.GetOsdMapResponse) */ {
 public:
  inline GetOsdMapResponse() : GetOsdMapResponse(nullptr) {};
  virtual ~GetOsdMapResponse();

  GetOsdMapResponse(const GetOsdMapResponse& from);
  GetOsdMapResponse(GetOsdMapResponse&& from) noexcept
    : GetOsdMapResponse() {
    *this = ::std::move(from);
  }

  inline GetOsdMapResponse& operator=(const GetOsdMapResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetOsdMapResponse& operator=(GetOsdMapResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetOsdMapResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetOsdMapResponse* internal_default_instance() {
    return reinterpret_cast<const GetOsdMapResponse*>(
               &_GetOsdMapResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(GetOsdMapResponse& a, GetOsdMapResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetOsdMapResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetOsdMapResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetOsdMapResponse* New() const final {
    return CreateMaybeMessage<GetOsdMapResponse>(nullptr);
  }

  GetOsdMapResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetOsdMapResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetOsdMapResponse& from);
  void MergeFrom(const GetOsdMapResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetOsdMapResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.GetOsdMapResponse";
  }
  protected:
  explicit GetOsdMapResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2eproto);
    return ::descriptor_table_message_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOsdsFieldNumber = 3,
    kOsdmapversionFieldNumber = 2,
    kErrorcodeFieldNumber = 1,
  };
  // repeated .msg.OsdDynamicInfo osds = 3;
  int osds_size() const;
  private:
  int _internal_osds_size() const;
  public:
  void clear_osds();
  ::msg::OsdDynamicInfo* mutable_osds(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::OsdDynamicInfo >*
      mutable_osds();
  private:
  const ::msg::OsdDynamicInfo& _internal_osds(int index) const;
  ::msg::OsdDynamicInfo* _internal_add_osds();
  public:
  const ::msg::OsdDynamicInfo& osds(int index) const;
  ::msg::OsdDynamicInfo* add_osds();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::OsdDynamicInfo >&
      osds() const;

  // int64 osdmapversion = 2;
  void clear_osdmapversion();
  ::PROTOBUF_NAMESPACE_ID::int64 osdmapversion() const;
  void set_osdmapversion(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_osdmapversion() const;
  void _internal_set_osdmapversion(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .msg.OsdMapErrorCode errorcode = 1;
  void clear_errorcode();
  ::msg::OsdMapErrorCode errorcode() const;
  void set_errorcode(::msg::OsdMapErrorCode value);
  private:
  ::msg::OsdMapErrorCode _internal_errorcode() const;
  void _internal_set_errorcode(::msg::OsdMapErrorCode value);
  public:

  // @@protoc_insertion_point(class_scope:msg.GetOsdMapResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::OsdDynamicInfo > osds_;
  ::PROTOBUF_NAMESPACE_ID::int64 osdmapversion_;
  int errorcode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class GetClusterMapRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.GetClusterMapRequest) */ {
 public:
  inline GetClusterMapRequest() : GetClusterMapRequest(nullptr) {};
  virtual ~GetClusterMapRequest();

  GetClusterMapRequest(const GetClusterMapRequest& from);
  GetClusterMapRequest(GetClusterMapRequest&& from) noexcept
    : GetClusterMapRequest() {
    *this = ::std::move(from);
  }

  inline GetClusterMapRequest& operator=(const GetClusterMapRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetClusterMapRequest& operator=(GetClusterMapRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetClusterMapRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetClusterMapRequest* internal_default_instance() {
    return reinterpret_cast<const GetClusterMapRequest*>(
               &_GetClusterMapRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(GetClusterMapRequest& a, GetClusterMapRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetClusterMapRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetClusterMapRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetClusterMapRequest* New() const final {
    return CreateMaybeMessage<GetClusterMapRequest>(nullptr);
  }

  GetClusterMapRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetClusterMapRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetClusterMapRequest& from);
  void MergeFrom(const GetClusterMapRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetClusterMapRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.GetClusterMapRequest";
  }
  protected:
  explicit GetClusterMapRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2eproto);
    return ::descriptor_table_message_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGomRequestFieldNumber = 1,
    kGpmRequestFieldNumber = 2,
  };
  // .msg.GetOsdMapRequest gom_request = 1;
  bool has_gom_request() const;
  private:
  bool _internal_has_gom_request() const;
  public:
  void clear_gom_request();
  const ::msg::GetOsdMapRequest& gom_request() const;
  ::msg::GetOsdMapRequest* release_gom_request();
  ::msg::GetOsdMapRequest* mutable_gom_request();
  void set_allocated_gom_request(::msg::GetOsdMapRequest* gom_request);
  private:
  const ::msg::GetOsdMapRequest& _internal_gom_request() const;
  ::msg::GetOsdMapRequest* _internal_mutable_gom_request();
  public:
  void unsafe_arena_set_allocated_gom_request(
      ::msg::GetOsdMapRequest* gom_request);
  ::msg::GetOsdMapRequest* unsafe_arena_release_gom_request();

  // .msg.GetPgMapRequest gpm_request = 2;
  bool has_gpm_request() const;
  private:
  bool _internal_has_gpm_request() const;
  public:
  void clear_gpm_request();
  const ::msg::GetPgMapRequest& gpm_request() const;
  ::msg::GetPgMapRequest* release_gpm_request();
  ::msg::GetPgMapRequest* mutable_gpm_request();
  void set_allocated_gpm_request(::msg::GetPgMapRequest* gpm_request);
  private:
  const ::msg::GetPgMapRequest& _internal_gpm_request() const;
  ::msg::GetPgMapRequest* _internal_mutable_gpm_request();
  public:
  void unsafe_arena_set_allocated_gpm_request(
      ::msg::GetPgMapRequest* gpm_request);
  ::msg::GetPgMapRequest* unsafe_arena_release_gpm_request();

  // @@protoc_insertion_point(class_scope:msg.GetClusterMapRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::msg::GetOsdMapRequest* gom_request_;
  ::msg::GetPgMapRequest* gpm_request_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class GetClusterMapResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.GetClusterMapResponse) */ {
 public:
  inline GetClusterMapResponse() : GetClusterMapResponse(nullptr) {};
  virtual ~GetClusterMapResponse();

  GetClusterMapResponse(const GetClusterMapResponse& from);
  GetClusterMapResponse(GetClusterMapResponse&& from) noexcept
    : GetClusterMapResponse() {
    *this = ::std::move(from);
  }

  inline GetClusterMapResponse& operator=(const GetClusterMapResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetClusterMapResponse& operator=(GetClusterMapResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetClusterMapResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetClusterMapResponse* internal_default_instance() {
    return reinterpret_cast<const GetClusterMapResponse*>(
               &_GetClusterMapResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(GetClusterMapResponse& a, GetClusterMapResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetClusterMapResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetClusterMapResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetClusterMapResponse* New() const final {
    return CreateMaybeMessage<GetClusterMapResponse>(nullptr);
  }

  GetClusterMapResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetClusterMapResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetClusterMapResponse& from);
  void MergeFrom(const GetClusterMapResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetClusterMapResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.GetClusterMapResponse";
  }
  protected:
  explicit GetClusterMapResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2eproto);
    return ::descriptor_table_message_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGomResponseFieldNumber = 1,
    kGpmResponseFieldNumber = 2,
  };
  // .msg.GetOsdMapResponse gom_response = 1;
  bool has_gom_response() const;
  private:
  bool _internal_has_gom_response() const;
  public:
  void clear_gom_response();
  const ::msg::GetOsdMapResponse& gom_response() const;
  ::msg::GetOsdMapResponse* release_gom_response();
  ::msg::GetOsdMapResponse* mutable_gom_response();
  void set_allocated_gom_response(::msg::GetOsdMapResponse* gom_response);
  private:
  const ::msg::GetOsdMapResponse& _internal_gom_response() const;
  ::msg::GetOsdMapResponse* _internal_mutable_gom_response();
  public:
  void unsafe_arena_set_allocated_gom_response(
      ::msg::GetOsdMapResponse* gom_response);
  ::msg::GetOsdMapResponse* unsafe_arena_release_gom_response();

  // .msg.GetPgMapResponse gpm_response = 2;
  bool has_gpm_response() const;
  private:
  bool _internal_has_gpm_response() const;
  public:
  void clear_gpm_response();
  const ::msg::GetPgMapResponse& gpm_response() const;
  ::msg::GetPgMapResponse* release_gpm_response();
  ::msg::GetPgMapResponse* mutable_gpm_response();
  void set_allocated_gpm_response(::msg::GetPgMapResponse* gpm_response);
  private:
  const ::msg::GetPgMapResponse& _internal_gpm_response() const;
  ::msg::GetPgMapResponse* _internal_mutable_gpm_response();
  public:
  void unsafe_arena_set_allocated_gpm_response(
      ::msg::GetPgMapResponse* gpm_response);
  ::msg::GetPgMapResponse* unsafe_arena_release_gpm_response();

  // @@protoc_insertion_point(class_scope:msg.GetClusterMapResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::msg::GetOsdMapResponse* gom_response_;
  ::msg::GetPgMapResponse* gpm_response_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class BootResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.BootResponse) */ {
 public:
  inline BootResponse() : BootResponse(nullptr) {};
  virtual ~BootResponse();

  BootResponse(const BootResponse& from);
  BootResponse(BootResponse&& from) noexcept
    : BootResponse() {
    *this = ::std::move(from);
  }

  inline BootResponse& operator=(const BootResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline BootResponse& operator=(BootResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BootResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BootResponse* internal_default_instance() {
    return reinterpret_cast<const BootResponse*>(
               &_BootResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(BootResponse& a, BootResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(BootResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BootResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BootResponse* New() const final {
    return CreateMaybeMessage<BootResponse>(nullptr);
  }

  BootResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BootResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BootResponse& from);
  void MergeFrom(const BootResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BootResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.BootResponse";
  }
  protected:
  explicit BootResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2eproto);
    return ::descriptor_table_message_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOkFieldNumber = 1,
  };
  // bool ok = 1;
  void clear_ok();
  bool ok() const;
  void set_ok(bool value);
  private:
  bool _internal_ok() const;
  void _internal_set_ok(bool value);
  public:

  // @@protoc_insertion_point(class_scope:msg.BootResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool ok_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class OsdStopRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.OsdStopRequest) */ {
 public:
  inline OsdStopRequest() : OsdStopRequest(nullptr) {};
  virtual ~OsdStopRequest();

  OsdStopRequest(const OsdStopRequest& from);
  OsdStopRequest(OsdStopRequest&& from) noexcept
    : OsdStopRequest() {
    *this = ::std::move(from);
  }

  inline OsdStopRequest& operator=(const OsdStopRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline OsdStopRequest& operator=(OsdStopRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OsdStopRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OsdStopRequest* internal_default_instance() {
    return reinterpret_cast<const OsdStopRequest*>(
               &_OsdStopRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(OsdStopRequest& a, OsdStopRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(OsdStopRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OsdStopRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OsdStopRequest* New() const final {
    return CreateMaybeMessage<OsdStopRequest>(nullptr);
  }

  OsdStopRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OsdStopRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OsdStopRequest& from);
  void MergeFrom(const OsdStopRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OsdStopRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.OsdStopRequest";
  }
  protected:
  explicit OsdStopRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2eproto);
    return ::descriptor_table_message_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:msg.OsdStopRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class OsdStopResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.OsdStopResponse) */ {
 public:
  inline OsdStopResponse() : OsdStopResponse(nullptr) {};
  virtual ~OsdStopResponse();

  OsdStopResponse(const OsdStopResponse& from);
  OsdStopResponse(OsdStopResponse&& from) noexcept
    : OsdStopResponse() {
    *this = ::std::move(from);
  }

  inline OsdStopResponse& operator=(const OsdStopResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline OsdStopResponse& operator=(OsdStopResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OsdStopResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OsdStopResponse* internal_default_instance() {
    return reinterpret_cast<const OsdStopResponse*>(
               &_OsdStopResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(OsdStopResponse& a, OsdStopResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(OsdStopResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OsdStopResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OsdStopResponse* New() const final {
    return CreateMaybeMessage<OsdStopResponse>(nullptr);
  }

  OsdStopResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OsdStopResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OsdStopResponse& from);
  void MergeFrom(const OsdStopResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OsdStopResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.OsdStopResponse";
  }
  protected:
  explicit OsdStopResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2eproto);
    return ::descriptor_table_message_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOkFieldNumber = 1,
  };
  // bool ok = 1;
  void clear_ok();
  bool ok() const;
  void set_ok(bool value);
  private:
  bool _internal_ok() const;
  void _internal_set_ok(bool value);
  public:

  // @@protoc_insertion_point(class_scope:msg.OsdStopResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool ok_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class HeartbeatRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.HeartbeatRequest) */ {
 public:
  inline HeartbeatRequest() : HeartbeatRequest(nullptr) {};
  virtual ~HeartbeatRequest();

  HeartbeatRequest(const HeartbeatRequest& from);
  HeartbeatRequest(HeartbeatRequest&& from) noexcept
    : HeartbeatRequest() {
    *this = ::std::move(from);
  }

  inline HeartbeatRequest& operator=(const HeartbeatRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline HeartbeatRequest& operator=(HeartbeatRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HeartbeatRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HeartbeatRequest* internal_default_instance() {
    return reinterpret_cast<const HeartbeatRequest*>(
               &_HeartbeatRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(HeartbeatRequest& a, HeartbeatRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(HeartbeatRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HeartbeatRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HeartbeatRequest* New() const final {
    return CreateMaybeMessage<HeartbeatRequest>(nullptr);
  }

  HeartbeatRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HeartbeatRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HeartbeatRequest& from);
  void MergeFrom(const HeartbeatRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HeartbeatRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.HeartbeatRequest";
  }
  protected:
  explicit HeartbeatRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2eproto);
    return ::descriptor_table_message_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:msg.HeartbeatRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class HeartbeatResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.HeartbeatResponse) */ {
 public:
  inline HeartbeatResponse() : HeartbeatResponse(nullptr) {};
  virtual ~HeartbeatResponse();

  HeartbeatResponse(const HeartbeatResponse& from);
  HeartbeatResponse(HeartbeatResponse&& from) noexcept
    : HeartbeatResponse() {
    *this = ::std::move(from);
  }

  inline HeartbeatResponse& operator=(const HeartbeatResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline HeartbeatResponse& operator=(HeartbeatResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HeartbeatResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HeartbeatResponse* internal_default_instance() {
    return reinterpret_cast<const HeartbeatResponse*>(
               &_HeartbeatResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(HeartbeatResponse& a, HeartbeatResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(HeartbeatResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HeartbeatResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HeartbeatResponse* New() const final {
    return CreateMaybeMessage<HeartbeatResponse>(nullptr);
  }

  HeartbeatResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HeartbeatResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HeartbeatResponse& from);
  void MergeFrom(const HeartbeatResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HeartbeatResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.HeartbeatResponse";
  }
  protected:
  explicit HeartbeatResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2eproto);
    return ::descriptor_table_message_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOkFieldNumber = 1,
  };
  // bool ok = 1;
  void clear_ok();
  bool ok() const;
  void set_ok(bool value);
  private:
  bool _internal_ok() const;
  void _internal_set_ok(bool value);
  public:

  // @@protoc_insertion_point(class_scope:msg.HeartbeatResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool ok_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class ImageInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.ImageInfo) */ {
 public:
  inline ImageInfo() : ImageInfo(nullptr) {};
  virtual ~ImageInfo();

  ImageInfo(const ImageInfo& from);
  ImageInfo(ImageInfo&& from) noexcept
    : ImageInfo() {
    *this = ::std::move(from);
  }

  inline ImageInfo& operator=(const ImageInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImageInfo& operator=(ImageInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ImageInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ImageInfo* internal_default_instance() {
    return reinterpret_cast<const ImageInfo*>(
               &_ImageInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(ImageInfo& a, ImageInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ImageInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImageInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ImageInfo* New() const final {
    return CreateMaybeMessage<ImageInfo>(nullptr);
  }

  ImageInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImageInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ImageInfo& from);
  void MergeFrom(const ImageInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImageInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.ImageInfo";
  }
  protected:
  explicit ImageInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2eproto);
    return ::descriptor_table_message_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPoolnameFieldNumber = 1,
    kImagenameFieldNumber = 2,
    kSizeFieldNumber = 3,
    kObjectSizeFieldNumber = 4,
  };
  // string poolname = 1;
  void clear_poolname();
  const std::string& poolname() const;
  void set_poolname(const std::string& value);
  void set_poolname(std::string&& value);
  void set_poolname(const char* value);
  void set_poolname(const char* value, size_t size);
  std::string* mutable_poolname();
  std::string* release_poolname();
  void set_allocated_poolname(std::string* poolname);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_poolname();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_poolname(
      std::string* poolname);
  private:
  const std::string& _internal_poolname() const;
  void _internal_set_poolname(const std::string& value);
  std::string* _internal_mutable_poolname();
  public:

  // string imagename = 2;
  void clear_imagename();
  const std::string& imagename() const;
  void set_imagename(const std::string& value);
  void set_imagename(std::string&& value);
  void set_imagename(const char* value);
  void set_imagename(const char* value, size_t size);
  std::string* mutable_imagename();
  std::string* release_imagename();
  void set_allocated_imagename(std::string* imagename);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_imagename();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_imagename(
      std::string* imagename);
  private:
  const std::string& _internal_imagename() const;
  void _internal_set_imagename(const std::string& value);
  std::string* _internal_mutable_imagename();
  public:

  // int64 size = 3;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::int64 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 object_size = 4;
  void clear_object_size();
  ::PROTOBUF_NAMESPACE_ID::int64 object_size() const;
  void set_object_size(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_object_size() const;
  void _internal_set_object_size(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:msg.ImageInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr poolname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr imagename_;
  ::PROTOBUF_NAMESPACE_ID::int64 size_;
  ::PROTOBUF_NAMESPACE_ID::int64 object_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class CreateImageRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CreateImageRequest) */ {
 public:
  inline CreateImageRequest() : CreateImageRequest(nullptr) {};
  virtual ~CreateImageRequest();

  CreateImageRequest(const CreateImageRequest& from);
  CreateImageRequest(CreateImageRequest&& from) noexcept
    : CreateImageRequest() {
    *this = ::std::move(from);
  }

  inline CreateImageRequest& operator=(const CreateImageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateImageRequest& operator=(CreateImageRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateImageRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateImageRequest* internal_default_instance() {
    return reinterpret_cast<const CreateImageRequest*>(
               &_CreateImageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(CreateImageRequest& a, CreateImageRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateImageRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateImageRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateImageRequest* New() const final {
    return CreateMaybeMessage<CreateImageRequest>(nullptr);
  }

  CreateImageRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateImageRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateImageRequest& from);
  void MergeFrom(const CreateImageRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateImageRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CreateImageRequest";
  }
  protected:
  explicit CreateImageRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2eproto);
    return ::descriptor_table_message_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPoolnameFieldNumber = 1,
    kImagenameFieldNumber = 2,
    kSizeFieldNumber = 3,
    kObjectSizeFieldNumber = 4,
  };
  // string poolname = 1;
  void clear_poolname();
  const std::string& poolname() const;
  void set_poolname(const std::string& value);
  void set_poolname(std::string&& value);
  void set_poolname(const char* value);
  void set_poolname(const char* value, size_t size);
  std::string* mutable_poolname();
  std::string* release_poolname();
  void set_allocated_poolname(std::string* poolname);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_poolname();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_poolname(
      std::string* poolname);
  private:
  const std::string& _internal_poolname() const;
  void _internal_set_poolname(const std::string& value);
  std::string* _internal_mutable_poolname();
  public:

  // string imagename = 2;
  void clear_imagename();
  const std::string& imagename() const;
  void set_imagename(const std::string& value);
  void set_imagename(std::string&& value);
  void set_imagename(const char* value);
  void set_imagename(const char* value, size_t size);
  std::string* mutable_imagename();
  std::string* release_imagename();
  void set_allocated_imagename(std::string* imagename);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_imagename();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_imagename(
      std::string* imagename);
  private:
  const std::string& _internal_imagename() const;
  void _internal_set_imagename(const std::string& value);
  std::string* _internal_mutable_imagename();
  public:

  // int64 size = 3;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::int64 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 object_size = 4;
  void clear_object_size();
  ::PROTOBUF_NAMESPACE_ID::int64 object_size() const;
  void set_object_size(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_object_size() const;
  void _internal_set_object_size(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CreateImageRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr poolname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr imagename_;
  ::PROTOBUF_NAMESPACE_ID::int64 size_;
  ::PROTOBUF_NAMESPACE_ID::int64 object_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class CreateImageResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CreateImageResponse) */ {
 public:
  inline CreateImageResponse() : CreateImageResponse(nullptr) {};
  virtual ~CreateImageResponse();

  CreateImageResponse(const CreateImageResponse& from);
  CreateImageResponse(CreateImageResponse&& from) noexcept
    : CreateImageResponse() {
    *this = ::std::move(from);
  }

  inline CreateImageResponse& operator=(const CreateImageResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateImageResponse& operator=(CreateImageResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateImageResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateImageResponse* internal_default_instance() {
    return reinterpret_cast<const CreateImageResponse*>(
               &_CreateImageResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(CreateImageResponse& a, CreateImageResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateImageResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateImageResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateImageResponse* New() const final {
    return CreateMaybeMessage<CreateImageResponse>(nullptr);
  }

  CreateImageResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateImageResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateImageResponse& from);
  void MergeFrom(const CreateImageResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateImageResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CreateImageResponse";
  }
  protected:
  explicit CreateImageResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2eproto);
    return ::descriptor_table_message_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImageInfoFieldNumber = 2,
    kErrorcodeFieldNumber = 1,
  };
  // .msg.ImageInfo ImageInfo = 2;
  bool has_imageinfo() const;
  private:
  bool _internal_has_imageinfo() const;
  public:
  void clear_imageinfo();
  const ::msg::ImageInfo& imageinfo() const;
  ::msg::ImageInfo* release_imageinfo();
  ::msg::ImageInfo* mutable_imageinfo();
  void set_allocated_imageinfo(::msg::ImageInfo* imageinfo);
  private:
  const ::msg::ImageInfo& _internal_imageinfo() const;
  ::msg::ImageInfo* _internal_mutable_imageinfo();
  public:
  void unsafe_arena_set_allocated_imageinfo(
      ::msg::ImageInfo* imageinfo);
  ::msg::ImageInfo* unsafe_arena_release_imageinfo();

  // .msg.CreateImageErrorCode errorcode = 1;
  void clear_errorcode();
  ::msg::CreateImageErrorCode errorcode() const;
  void set_errorcode(::msg::CreateImageErrorCode value);
  private:
  ::msg::CreateImageErrorCode _internal_errorcode() const;
  void _internal_set_errorcode(::msg::CreateImageErrorCode value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CreateImageResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::msg::ImageInfo* imageinfo_;
  int errorcode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class RemoveImageRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.RemoveImageRequest) */ {
 public:
  inline RemoveImageRequest() : RemoveImageRequest(nullptr) {};
  virtual ~RemoveImageRequest();

  RemoveImageRequest(const RemoveImageRequest& from);
  RemoveImageRequest(RemoveImageRequest&& from) noexcept
    : RemoveImageRequest() {
    *this = ::std::move(from);
  }

  inline RemoveImageRequest& operator=(const RemoveImageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveImageRequest& operator=(RemoveImageRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RemoveImageRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoveImageRequest* internal_default_instance() {
    return reinterpret_cast<const RemoveImageRequest*>(
               &_RemoveImageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(RemoveImageRequest& a, RemoveImageRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveImageRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoveImageRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RemoveImageRequest* New() const final {
    return CreateMaybeMessage<RemoveImageRequest>(nullptr);
  }

  RemoveImageRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RemoveImageRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RemoveImageRequest& from);
  void MergeFrom(const RemoveImageRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveImageRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.RemoveImageRequest";
  }
  protected:
  explicit RemoveImageRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2eproto);
    return ::descriptor_table_message_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPoolnameFieldNumber = 1,
    kImagenameFieldNumber = 2,
  };
  // string poolname = 1;
  void clear_poolname();
  const std::string& poolname() const;
  void set_poolname(const std::string& value);
  void set_poolname(std::string&& value);
  void set_poolname(const char* value);
  void set_poolname(const char* value, size_t size);
  std::string* mutable_poolname();
  std::string* release_poolname();
  void set_allocated_poolname(std::string* poolname);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_poolname();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_poolname(
      std::string* poolname);
  private:
  const std::string& _internal_poolname() const;
  void _internal_set_poolname(const std::string& value);
  std::string* _internal_mutable_poolname();
  public:

  // string imagename = 2;
  void clear_imagename();
  const std::string& imagename() const;
  void set_imagename(const std::string& value);
  void set_imagename(std::string&& value);
  void set_imagename(const char* value);
  void set_imagename(const char* value, size_t size);
  std::string* mutable_imagename();
  std::string* release_imagename();
  void set_allocated_imagename(std::string* imagename);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_imagename();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_imagename(
      std::string* imagename);
  private:
  const std::string& _internal_imagename() const;
  void _internal_set_imagename(const std::string& value);
  std::string* _internal_mutable_imagename();
  public:

  // @@protoc_insertion_point(class_scope:msg.RemoveImageRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr poolname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr imagename_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class RemoveImageResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.RemoveImageResponse) */ {
 public:
  inline RemoveImageResponse() : RemoveImageResponse(nullptr) {};
  virtual ~RemoveImageResponse();

  RemoveImageResponse(const RemoveImageResponse& from);
  RemoveImageResponse(RemoveImageResponse&& from) noexcept
    : RemoveImageResponse() {
    *this = ::std::move(from);
  }

  inline RemoveImageResponse& operator=(const RemoveImageResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveImageResponse& operator=(RemoveImageResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RemoveImageResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoveImageResponse* internal_default_instance() {
    return reinterpret_cast<const RemoveImageResponse*>(
               &_RemoveImageResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(RemoveImageResponse& a, RemoveImageResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveImageResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoveImageResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RemoveImageResponse* New() const final {
    return CreateMaybeMessage<RemoveImageResponse>(nullptr);
  }

  RemoveImageResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RemoveImageResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RemoveImageResponse& from);
  void MergeFrom(const RemoveImageResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveImageResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.RemoveImageResponse";
  }
  protected:
  explicit RemoveImageResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2eproto);
    return ::descriptor_table_message_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImageInfoFieldNumber = 2,
    kErrorcodeFieldNumber = 1,
  };
  // .msg.ImageInfo ImageInfo = 2;
  bool has_imageinfo() const;
  private:
  bool _internal_has_imageinfo() const;
  public:
  void clear_imageinfo();
  const ::msg::ImageInfo& imageinfo() const;
  ::msg::ImageInfo* release_imageinfo();
  ::msg::ImageInfo* mutable_imageinfo();
  void set_allocated_imageinfo(::msg::ImageInfo* imageinfo);
  private:
  const ::msg::ImageInfo& _internal_imageinfo() const;
  ::msg::ImageInfo* _internal_mutable_imageinfo();
  public:
  void unsafe_arena_set_allocated_imageinfo(
      ::msg::ImageInfo* imageinfo);
  ::msg::ImageInfo* unsafe_arena_release_imageinfo();

  // .msg.RemoveImageErrorCode errorcode = 1;
  void clear_errorcode();
  ::msg::RemoveImageErrorCode errorcode() const;
  void set_errorcode(::msg::RemoveImageErrorCode value);
  private:
  ::msg::RemoveImageErrorCode _internal_errorcode() const;
  void _internal_set_errorcode(::msg::RemoveImageErrorCode value);
  public:

  // @@protoc_insertion_point(class_scope:msg.RemoveImageResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::msg::ImageInfo* imageinfo_;
  int errorcode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class ResizeImageRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.ResizeImageRequest) */ {
 public:
  inline ResizeImageRequest() : ResizeImageRequest(nullptr) {};
  virtual ~ResizeImageRequest();

  ResizeImageRequest(const ResizeImageRequest& from);
  ResizeImageRequest(ResizeImageRequest&& from) noexcept
    : ResizeImageRequest() {
    *this = ::std::move(from);
  }

  inline ResizeImageRequest& operator=(const ResizeImageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResizeImageRequest& operator=(ResizeImageRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResizeImageRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResizeImageRequest* internal_default_instance() {
    return reinterpret_cast<const ResizeImageRequest*>(
               &_ResizeImageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(ResizeImageRequest& a, ResizeImageRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ResizeImageRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResizeImageRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResizeImageRequest* New() const final {
    return CreateMaybeMessage<ResizeImageRequest>(nullptr);
  }

  ResizeImageRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResizeImageRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResizeImageRequest& from);
  void MergeFrom(const ResizeImageRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResizeImageRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.ResizeImageRequest";
  }
  protected:
  explicit ResizeImageRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2eproto);
    return ::descriptor_table_message_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPoolnameFieldNumber = 1,
    kImagenameFieldNumber = 2,
    kSizeFieldNumber = 3,
  };
  // string poolname = 1;
  void clear_poolname();
  const std::string& poolname() const;
  void set_poolname(const std::string& value);
  void set_poolname(std::string&& value);
  void set_poolname(const char* value);
  void set_poolname(const char* value, size_t size);
  std::string* mutable_poolname();
  std::string* release_poolname();
  void set_allocated_poolname(std::string* poolname);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_poolname();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_poolname(
      std::string* poolname);
  private:
  const std::string& _internal_poolname() const;
  void _internal_set_poolname(const std::string& value);
  std::string* _internal_mutable_poolname();
  public:

  // string imagename = 2;
  void clear_imagename();
  const std::string& imagename() const;
  void set_imagename(const std::string& value);
  void set_imagename(std::string&& value);
  void set_imagename(const char* value);
  void set_imagename(const char* value, size_t size);
  std::string* mutable_imagename();
  std::string* release_imagename();
  void set_allocated_imagename(std::string* imagename);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_imagename();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_imagename(
      std::string* imagename);
  private:
  const std::string& _internal_imagename() const;
  void _internal_set_imagename(const std::string& value);
  std::string* _internal_mutable_imagename();
  public:

  // int64 size = 3;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::int64 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:msg.ResizeImageRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr poolname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr imagename_;
  ::PROTOBUF_NAMESPACE_ID::int64 size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class ResizeImageResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.ResizeImageResponse) */ {
 public:
  inline ResizeImageResponse() : ResizeImageResponse(nullptr) {};
  virtual ~ResizeImageResponse();

  ResizeImageResponse(const ResizeImageResponse& from);
  ResizeImageResponse(ResizeImageResponse&& from) noexcept
    : ResizeImageResponse() {
    *this = ::std::move(from);
  }

  inline ResizeImageResponse& operator=(const ResizeImageResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResizeImageResponse& operator=(ResizeImageResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResizeImageResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResizeImageResponse* internal_default_instance() {
    return reinterpret_cast<const ResizeImageResponse*>(
               &_ResizeImageResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(ResizeImageResponse& a, ResizeImageResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ResizeImageResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResizeImageResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResizeImageResponse* New() const final {
    return CreateMaybeMessage<ResizeImageResponse>(nullptr);
  }

  ResizeImageResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResizeImageResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResizeImageResponse& from);
  void MergeFrom(const ResizeImageResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResizeImageResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.ResizeImageResponse";
  }
  protected:
  explicit ResizeImageResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2eproto);
    return ::descriptor_table_message_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImageInfoFieldNumber = 2,
    kErrorcodeFieldNumber = 1,
  };
  // .msg.ImageInfo ImageInfo = 2;
  bool has_imageinfo() const;
  private:
  bool _internal_has_imageinfo() const;
  public:
  void clear_imageinfo();
  const ::msg::ImageInfo& imageinfo() const;
  ::msg::ImageInfo* release_imageinfo();
  ::msg::ImageInfo* mutable_imageinfo();
  void set_allocated_imageinfo(::msg::ImageInfo* imageinfo);
  private:
  const ::msg::ImageInfo& _internal_imageinfo() const;
  ::msg::ImageInfo* _internal_mutable_imageinfo();
  public:
  void unsafe_arena_set_allocated_imageinfo(
      ::msg::ImageInfo* imageinfo);
  ::msg::ImageInfo* unsafe_arena_release_imageinfo();

  // .msg.ResizeImageErrorCode errorcode = 1;
  void clear_errorcode();
  ::msg::ResizeImageErrorCode errorcode() const;
  void set_errorcode(::msg::ResizeImageErrorCode value);
  private:
  ::msg::ResizeImageErrorCode _internal_errorcode() const;
  void _internal_set_errorcode(::msg::ResizeImageErrorCode value);
  public:

  // @@protoc_insertion_point(class_scope:msg.ResizeImageResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::msg::ImageInfo* imageinfo_;
  int errorcode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class GetImageInfoRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.GetImageInfoRequest) */ {
 public:
  inline GetImageInfoRequest() : GetImageInfoRequest(nullptr) {};
  virtual ~GetImageInfoRequest();

  GetImageInfoRequest(const GetImageInfoRequest& from);
  GetImageInfoRequest(GetImageInfoRequest&& from) noexcept
    : GetImageInfoRequest() {
    *this = ::std::move(from);
  }

  inline GetImageInfoRequest& operator=(const GetImageInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetImageInfoRequest& operator=(GetImageInfoRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetImageInfoRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetImageInfoRequest* internal_default_instance() {
    return reinterpret_cast<const GetImageInfoRequest*>(
               &_GetImageInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(GetImageInfoRequest& a, GetImageInfoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetImageInfoRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetImageInfoRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetImageInfoRequest* New() const final {
    return CreateMaybeMessage<GetImageInfoRequest>(nullptr);
  }

  GetImageInfoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetImageInfoRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetImageInfoRequest& from);
  void MergeFrom(const GetImageInfoRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetImageInfoRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.GetImageInfoRequest";
  }
  protected:
  explicit GetImageInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2eproto);
    return ::descriptor_table_message_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPoolnameFieldNumber = 1,
    kImagenameFieldNumber = 2,
  };
  // string poolname = 1;
  void clear_poolname();
  const std::string& poolname() const;
  void set_poolname(const std::string& value);
  void set_poolname(std::string&& value);
  void set_poolname(const char* value);
  void set_poolname(const char* value, size_t size);
  std::string* mutable_poolname();
  std::string* release_poolname();
  void set_allocated_poolname(std::string* poolname);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_poolname();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_poolname(
      std::string* poolname);
  private:
  const std::string& _internal_poolname() const;
  void _internal_set_poolname(const std::string& value);
  std::string* _internal_mutable_poolname();
  public:

  // string imagename = 2;
  void clear_imagename();
  const std::string& imagename() const;
  void set_imagename(const std::string& value);
  void set_imagename(std::string&& value);
  void set_imagename(const char* value);
  void set_imagename(const char* value, size_t size);
  std::string* mutable_imagename();
  std::string* release_imagename();
  void set_allocated_imagename(std::string* imagename);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_imagename();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_imagename(
      std::string* imagename);
  private:
  const std::string& _internal_imagename() const;
  void _internal_set_imagename(const std::string& value);
  std::string* _internal_mutable_imagename();
  public:

  // @@protoc_insertion_point(class_scope:msg.GetImageInfoRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr poolname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr imagename_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class GetImageInfoResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.GetImageInfoResponse) */ {
 public:
  inline GetImageInfoResponse() : GetImageInfoResponse(nullptr) {};
  virtual ~GetImageInfoResponse();

  GetImageInfoResponse(const GetImageInfoResponse& from);
  GetImageInfoResponse(GetImageInfoResponse&& from) noexcept
    : GetImageInfoResponse() {
    *this = ::std::move(from);
  }

  inline GetImageInfoResponse& operator=(const GetImageInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetImageInfoResponse& operator=(GetImageInfoResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetImageInfoResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetImageInfoResponse* internal_default_instance() {
    return reinterpret_cast<const GetImageInfoResponse*>(
               &_GetImageInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(GetImageInfoResponse& a, GetImageInfoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetImageInfoResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetImageInfoResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetImageInfoResponse* New() const final {
    return CreateMaybeMessage<GetImageInfoResponse>(nullptr);
  }

  GetImageInfoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetImageInfoResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetImageInfoResponse& from);
  void MergeFrom(const GetImageInfoResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetImageInfoResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.GetImageInfoResponse";
  }
  protected:
  explicit GetImageInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2eproto);
    return ::descriptor_table_message_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImageInfoFieldNumber = 2,
    kErrorcodeFieldNumber = 1,
  };
  // .msg.ImageInfo ImageInfo = 2;
  bool has_imageinfo() const;
  private:
  bool _internal_has_imageinfo() const;
  public:
  void clear_imageinfo();
  const ::msg::ImageInfo& imageinfo() const;
  ::msg::ImageInfo* release_imageinfo();
  ::msg::ImageInfo* mutable_imageinfo();
  void set_allocated_imageinfo(::msg::ImageInfo* imageinfo);
  private:
  const ::msg::ImageInfo& _internal_imageinfo() const;
  ::msg::ImageInfo* _internal_mutable_imageinfo();
  public:
  void unsafe_arena_set_allocated_imageinfo(
      ::msg::ImageInfo* imageinfo);
  ::msg::ImageInfo* unsafe_arena_release_imageinfo();

  // .msg.GetImageErrorCode errorcode = 1;
  void clear_errorcode();
  ::msg::GetImageErrorCode errorcode() const;
  void set_errorcode(::msg::GetImageErrorCode value);
  private:
  ::msg::GetImageErrorCode _internal_errorcode() const;
  void _internal_set_errorcode(::msg::GetImageErrorCode value);
  public:

  // @@protoc_insertion_point(class_scope:msg.GetImageInfoResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::msg::ImageInfo* imageinfo_;
  int errorcode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.Request) */ {
 public:
  inline Request() : Request(nullptr) {};
  virtual ~Request();

  Request(const Request& from);
  Request(Request&& from) noexcept
    : Request() {
    *this = ::std::move(from);
  }

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline Request& operator=(Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Request& default_instance();

  enum UnionCase {
    kBootRequest = 1,
    kOsdStopRequest = 2,
    kHeartbeatRequest = 3,
    kGetOsdmapRequest = 4,
    kListPoolsRequest = 5,
    kApplyIdRequest = 6,
    kCreatePoolRequest = 7,
    kGetPgmapRequest = 8,
    kDeletePoolRequest = 9,
    kGetClusterMapRequest = 10,
    kCreateImageRequest = 11,
    kRemoveImageRequest = 12,
    kResizeImageRequest = 13,
    kGetImageInfoRequest = 14,
    UNION_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Request* internal_default_instance() {
    return reinterpret_cast<const Request*>(
               &_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(Request& a, Request& b) {
    a.Swap(&b);
  }
  inline void Swap(Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Request* New() const final {
    return CreateMaybeMessage<Request>(nullptr);
  }

  Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.Request";
  }
  protected:
  explicit Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2eproto);
    return ::descriptor_table_message_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBootRequestFieldNumber = 1,
    kOsdStopRequestFieldNumber = 2,
    kHeartbeatRequestFieldNumber = 3,
    kGetOsdmapRequestFieldNumber = 4,
    kListPoolsRequestFieldNumber = 5,
    kApplyIdRequestFieldNumber = 6,
    kCreatePoolRequestFieldNumber = 7,
    kGetPgmapRequestFieldNumber = 8,
    kDeletePoolRequestFieldNumber = 9,
    kGetClusterMapRequestFieldNumber = 10,
    kCreateImageRequestFieldNumber = 11,
    kRemoveImageRequestFieldNumber = 12,
    kResizeImageRequestFieldNumber = 13,
    kGetImageInfoRequestFieldNumber = 14,
  };
  // .msg.BootRequest boot_request = 1;
  bool has_boot_request() const;
  private:
  bool _internal_has_boot_request() const;
  public:
  void clear_boot_request();
  const ::msg::BootRequest& boot_request() const;
  ::msg::BootRequest* release_boot_request();
  ::msg::BootRequest* mutable_boot_request();
  void set_allocated_boot_request(::msg::BootRequest* boot_request);
  private:
  const ::msg::BootRequest& _internal_boot_request() const;
  ::msg::BootRequest* _internal_mutable_boot_request();
  public:
  void unsafe_arena_set_allocated_boot_request(
      ::msg::BootRequest* boot_request);
  ::msg::BootRequest* unsafe_arena_release_boot_request();

  // .msg.OsdStopRequest osd_stop_request = 2;
  bool has_osd_stop_request() const;
  private:
  bool _internal_has_osd_stop_request() const;
  public:
  void clear_osd_stop_request();
  const ::msg::OsdStopRequest& osd_stop_request() const;
  ::msg::OsdStopRequest* release_osd_stop_request();
  ::msg::OsdStopRequest* mutable_osd_stop_request();
  void set_allocated_osd_stop_request(::msg::OsdStopRequest* osd_stop_request);
  private:
  const ::msg::OsdStopRequest& _internal_osd_stop_request() const;
  ::msg::OsdStopRequest* _internal_mutable_osd_stop_request();
  public:
  void unsafe_arena_set_allocated_osd_stop_request(
      ::msg::OsdStopRequest* osd_stop_request);
  ::msg::OsdStopRequest* unsafe_arena_release_osd_stop_request();

  // .msg.HeartbeatRequest heartbeat_request = 3;
  bool has_heartbeat_request() const;
  private:
  bool _internal_has_heartbeat_request() const;
  public:
  void clear_heartbeat_request();
  const ::msg::HeartbeatRequest& heartbeat_request() const;
  ::msg::HeartbeatRequest* release_heartbeat_request();
  ::msg::HeartbeatRequest* mutable_heartbeat_request();
  void set_allocated_heartbeat_request(::msg::HeartbeatRequest* heartbeat_request);
  private:
  const ::msg::HeartbeatRequest& _internal_heartbeat_request() const;
  ::msg::HeartbeatRequest* _internal_mutable_heartbeat_request();
  public:
  void unsafe_arena_set_allocated_heartbeat_request(
      ::msg::HeartbeatRequest* heartbeat_request);
  ::msg::HeartbeatRequest* unsafe_arena_release_heartbeat_request();

  // .msg.GetOsdMapRequest get_osdmap_request = 4;
  bool has_get_osdmap_request() const;
  private:
  bool _internal_has_get_osdmap_request() const;
  public:
  void clear_get_osdmap_request();
  const ::msg::GetOsdMapRequest& get_osdmap_request() const;
  ::msg::GetOsdMapRequest* release_get_osdmap_request();
  ::msg::GetOsdMapRequest* mutable_get_osdmap_request();
  void set_allocated_get_osdmap_request(::msg::GetOsdMapRequest* get_osdmap_request);
  private:
  const ::msg::GetOsdMapRequest& _internal_get_osdmap_request() const;
  ::msg::GetOsdMapRequest* _internal_mutable_get_osdmap_request();
  public:
  void unsafe_arena_set_allocated_get_osdmap_request(
      ::msg::GetOsdMapRequest* get_osdmap_request);
  ::msg::GetOsdMapRequest* unsafe_arena_release_get_osdmap_request();

  // .msg.ListPoolsRequest list_pools_request = 5;
  bool has_list_pools_request() const;
  private:
  bool _internal_has_list_pools_request() const;
  public:
  void clear_list_pools_request();
  const ::msg::ListPoolsRequest& list_pools_request() const;
  ::msg::ListPoolsRequest* release_list_pools_request();
  ::msg::ListPoolsRequest* mutable_list_pools_request();
  void set_allocated_list_pools_request(::msg::ListPoolsRequest* list_pools_request);
  private:
  const ::msg::ListPoolsRequest& _internal_list_pools_request() const;
  ::msg::ListPoolsRequest* _internal_mutable_list_pools_request();
  public:
  void unsafe_arena_set_allocated_list_pools_request(
      ::msg::ListPoolsRequest* list_pools_request);
  ::msg::ListPoolsRequest* unsafe_arena_release_list_pools_request();

  // .msg.ApplyIDRequest apply_id_request = 6;
  bool has_apply_id_request() const;
  private:
  bool _internal_has_apply_id_request() const;
  public:
  void clear_apply_id_request();
  const ::msg::ApplyIDRequest& apply_id_request() const;
  ::msg::ApplyIDRequest* release_apply_id_request();
  ::msg::ApplyIDRequest* mutable_apply_id_request();
  void set_allocated_apply_id_request(::msg::ApplyIDRequest* apply_id_request);
  private:
  const ::msg::ApplyIDRequest& _internal_apply_id_request() const;
  ::msg::ApplyIDRequest* _internal_mutable_apply_id_request();
  public:
  void unsafe_arena_set_allocated_apply_id_request(
      ::msg::ApplyIDRequest* apply_id_request);
  ::msg::ApplyIDRequest* unsafe_arena_release_apply_id_request();

  // .msg.CreatePoolRequest create_pool_request = 7;
  bool has_create_pool_request() const;
  private:
  bool _internal_has_create_pool_request() const;
  public:
  void clear_create_pool_request();
  const ::msg::CreatePoolRequest& create_pool_request() const;
  ::msg::CreatePoolRequest* release_create_pool_request();
  ::msg::CreatePoolRequest* mutable_create_pool_request();
  void set_allocated_create_pool_request(::msg::CreatePoolRequest* create_pool_request);
  private:
  const ::msg::CreatePoolRequest& _internal_create_pool_request() const;
  ::msg::CreatePoolRequest* _internal_mutable_create_pool_request();
  public:
  void unsafe_arena_set_allocated_create_pool_request(
      ::msg::CreatePoolRequest* create_pool_request);
  ::msg::CreatePoolRequest* unsafe_arena_release_create_pool_request();

  // .msg.GetPgMapRequest get_pgmap_request = 8;
  bool has_get_pgmap_request() const;
  private:
  bool _internal_has_get_pgmap_request() const;
  public:
  void clear_get_pgmap_request();
  const ::msg::GetPgMapRequest& get_pgmap_request() const;
  ::msg::GetPgMapRequest* release_get_pgmap_request();
  ::msg::GetPgMapRequest* mutable_get_pgmap_request();
  void set_allocated_get_pgmap_request(::msg::GetPgMapRequest* get_pgmap_request);
  private:
  const ::msg::GetPgMapRequest& _internal_get_pgmap_request() const;
  ::msg::GetPgMapRequest* _internal_mutable_get_pgmap_request();
  public:
  void unsafe_arena_set_allocated_get_pgmap_request(
      ::msg::GetPgMapRequest* get_pgmap_request);
  ::msg::GetPgMapRequest* unsafe_arena_release_get_pgmap_request();

  // .msg.DeletePoolRequest delete_pool_request = 9;
  bool has_delete_pool_request() const;
  private:
  bool _internal_has_delete_pool_request() const;
  public:
  void clear_delete_pool_request();
  const ::msg::DeletePoolRequest& delete_pool_request() const;
  ::msg::DeletePoolRequest* release_delete_pool_request();
  ::msg::DeletePoolRequest* mutable_delete_pool_request();
  void set_allocated_delete_pool_request(::msg::DeletePoolRequest* delete_pool_request);
  private:
  const ::msg::DeletePoolRequest& _internal_delete_pool_request() const;
  ::msg::DeletePoolRequest* _internal_mutable_delete_pool_request();
  public:
  void unsafe_arena_set_allocated_delete_pool_request(
      ::msg::DeletePoolRequest* delete_pool_request);
  ::msg::DeletePoolRequest* unsafe_arena_release_delete_pool_request();

  // .msg.GetClusterMapRequest get_cluster_map_request = 10;
  bool has_get_cluster_map_request() const;
  private:
  bool _internal_has_get_cluster_map_request() const;
  public:
  void clear_get_cluster_map_request();
  const ::msg::GetClusterMapRequest& get_cluster_map_request() const;
  ::msg::GetClusterMapRequest* release_get_cluster_map_request();
  ::msg::GetClusterMapRequest* mutable_get_cluster_map_request();
  void set_allocated_get_cluster_map_request(::msg::GetClusterMapRequest* get_cluster_map_request);
  private:
  const ::msg::GetClusterMapRequest& _internal_get_cluster_map_request() const;
  ::msg::GetClusterMapRequest* _internal_mutable_get_cluster_map_request();
  public:
  void unsafe_arena_set_allocated_get_cluster_map_request(
      ::msg::GetClusterMapRequest* get_cluster_map_request);
  ::msg::GetClusterMapRequest* unsafe_arena_release_get_cluster_map_request();

  // .msg.CreateImageRequest create_image_request = 11;
  bool has_create_image_request() const;
  private:
  bool _internal_has_create_image_request() const;
  public:
  void clear_create_image_request();
  const ::msg::CreateImageRequest& create_image_request() const;
  ::msg::CreateImageRequest* release_create_image_request();
  ::msg::CreateImageRequest* mutable_create_image_request();
  void set_allocated_create_image_request(::msg::CreateImageRequest* create_image_request);
  private:
  const ::msg::CreateImageRequest& _internal_create_image_request() const;
  ::msg::CreateImageRequest* _internal_mutable_create_image_request();
  public:
  void unsafe_arena_set_allocated_create_image_request(
      ::msg::CreateImageRequest* create_image_request);
  ::msg::CreateImageRequest* unsafe_arena_release_create_image_request();

  // .msg.RemoveImageRequest remove_image_request = 12;
  bool has_remove_image_request() const;
  private:
  bool _internal_has_remove_image_request() const;
  public:
  void clear_remove_image_request();
  const ::msg::RemoveImageRequest& remove_image_request() const;
  ::msg::RemoveImageRequest* release_remove_image_request();
  ::msg::RemoveImageRequest* mutable_remove_image_request();
  void set_allocated_remove_image_request(::msg::RemoveImageRequest* remove_image_request);
  private:
  const ::msg::RemoveImageRequest& _internal_remove_image_request() const;
  ::msg::RemoveImageRequest* _internal_mutable_remove_image_request();
  public:
  void unsafe_arena_set_allocated_remove_image_request(
      ::msg::RemoveImageRequest* remove_image_request);
  ::msg::RemoveImageRequest* unsafe_arena_release_remove_image_request();

  // .msg.ResizeImageRequest resize_image_request = 13;
  bool has_resize_image_request() const;
  private:
  bool _internal_has_resize_image_request() const;
  public:
  void clear_resize_image_request();
  const ::msg::ResizeImageRequest& resize_image_request() const;
  ::msg::ResizeImageRequest* release_resize_image_request();
  ::msg::ResizeImageRequest* mutable_resize_image_request();
  void set_allocated_resize_image_request(::msg::ResizeImageRequest* resize_image_request);
  private:
  const ::msg::ResizeImageRequest& _internal_resize_image_request() const;
  ::msg::ResizeImageRequest* _internal_mutable_resize_image_request();
  public:
  void unsafe_arena_set_allocated_resize_image_request(
      ::msg::ResizeImageRequest* resize_image_request);
  ::msg::ResizeImageRequest* unsafe_arena_release_resize_image_request();

  // .msg.GetImageInfoRequest get_ImageInfo_Request = 14;
  bool has_get_imageinfo_request() const;
  private:
  bool _internal_has_get_imageinfo_request() const;
  public:
  void clear_get_imageinfo_request();
  const ::msg::GetImageInfoRequest& get_imageinfo_request() const;
  ::msg::GetImageInfoRequest* release_get_imageinfo_request();
  ::msg::GetImageInfoRequest* mutable_get_imageinfo_request();
  void set_allocated_get_imageinfo_request(::msg::GetImageInfoRequest* get_imageinfo_request);
  private:
  const ::msg::GetImageInfoRequest& _internal_get_imageinfo_request() const;
  ::msg::GetImageInfoRequest* _internal_mutable_get_imageinfo_request();
  public:
  void unsafe_arena_set_allocated_get_imageinfo_request(
      ::msg::GetImageInfoRequest* get_imageinfo_request);
  ::msg::GetImageInfoRequest* unsafe_arena_release_get_imageinfo_request();

  void clear_union();
  UnionCase union_case() const;
  // @@protoc_insertion_point(class_scope:msg.Request)
 private:
  class _Internal;
  void set_has_boot_request();
  void set_has_osd_stop_request();
  void set_has_heartbeat_request();
  void set_has_get_osdmap_request();
  void set_has_list_pools_request();
  void set_has_apply_id_request();
  void set_has_create_pool_request();
  void set_has_get_pgmap_request();
  void set_has_delete_pool_request();
  void set_has_get_cluster_map_request();
  void set_has_create_image_request();
  void set_has_remove_image_request();
  void set_has_resize_image_request();
  void set_has_get_imageinfo_request();

  inline bool has_union() const;
  inline void clear_has_union();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union UnionUnion {
    UnionUnion() {}
    ::msg::BootRequest* boot_request_;
    ::msg::OsdStopRequest* osd_stop_request_;
    ::msg::HeartbeatRequest* heartbeat_request_;
    ::msg::GetOsdMapRequest* get_osdmap_request_;
    ::msg::ListPoolsRequest* list_pools_request_;
    ::msg::ApplyIDRequest* apply_id_request_;
    ::msg::CreatePoolRequest* create_pool_request_;
    ::msg::GetPgMapRequest* get_pgmap_request_;
    ::msg::DeletePoolRequest* delete_pool_request_;
    ::msg::GetClusterMapRequest* get_cluster_map_request_;
    ::msg::CreateImageRequest* create_image_request_;
    ::msg::RemoveImageRequest* remove_image_request_;
    ::msg::ResizeImageRequest* resize_image_request_;
    ::msg::GetImageInfoRequest* get_imageinfo_request_;
  } union_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.Response) */ {
 public:
  inline Response() : Response(nullptr) {};
  virtual ~Response();

  Response(const Response& from);
  Response(Response&& from) noexcept
    : Response() {
    *this = ::std::move(from);
  }

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline Response& operator=(Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Response& default_instance();

  enum UnionCase {
    kBootResponse = 1,
    kOsdStopResponse = 2,
    kHeartbeatResponse = 3,
    kGetOsdmapResponse = 4,
    kListPoolsResponse = 5,
    kApplyIdResponse = 6,
    kCreatePoolResponse = 7,
    kGetPgmapResponse = 8,
    kDeletePoolResponse = 9,
    kGetClusterMapResponse = 10,
    kCreateImageResponse = 11,
    kRemoveImageResponse = 12,
    kResizeImageResponse = 13,
    kGetImageInfoResponse = 14,
    UNION_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Response* internal_default_instance() {
    return reinterpret_cast<const Response*>(
               &_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(Response& a, Response& b) {
    a.Swap(&b);
  }
  inline void Swap(Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Response* New() const final {
    return CreateMaybeMessage<Response>(nullptr);
  }

  Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Response& from);
  void MergeFrom(const Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.Response";
  }
  protected:
  explicit Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2eproto);
    return ::descriptor_table_message_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBootResponseFieldNumber = 1,
    kOsdStopResponseFieldNumber = 2,
    kHeartbeatResponseFieldNumber = 3,
    kGetOsdmapResponseFieldNumber = 4,
    kListPoolsResponseFieldNumber = 5,
    kApplyIdResponseFieldNumber = 6,
    kCreatePoolResponseFieldNumber = 7,
    kGetPgmapResponseFieldNumber = 8,
    kDeletePoolResponseFieldNumber = 9,
    kGetClusterMapResponseFieldNumber = 10,
    kCreateImageResponseFieldNumber = 11,
    kRemoveImageResponseFieldNumber = 12,
    kResizeImageResponseFieldNumber = 13,
    kGetImageInfoResponseFieldNumber = 14,
  };
  // .msg.BootResponse boot_response = 1;
  bool has_boot_response() const;
  private:
  bool _internal_has_boot_response() const;
  public:
  void clear_boot_response();
  const ::msg::BootResponse& boot_response() const;
  ::msg::BootResponse* release_boot_response();
  ::msg::BootResponse* mutable_boot_response();
  void set_allocated_boot_response(::msg::BootResponse* boot_response);
  private:
  const ::msg::BootResponse& _internal_boot_response() const;
  ::msg::BootResponse* _internal_mutable_boot_response();
  public:
  void unsafe_arena_set_allocated_boot_response(
      ::msg::BootResponse* boot_response);
  ::msg::BootResponse* unsafe_arena_release_boot_response();

  // .msg.OsdStopResponse osd_stop_response = 2;
  bool has_osd_stop_response() const;
  private:
  bool _internal_has_osd_stop_response() const;
  public:
  void clear_osd_stop_response();
  const ::msg::OsdStopResponse& osd_stop_response() const;
  ::msg::OsdStopResponse* release_osd_stop_response();
  ::msg::OsdStopResponse* mutable_osd_stop_response();
  void set_allocated_osd_stop_response(::msg::OsdStopResponse* osd_stop_response);
  private:
  const ::msg::OsdStopResponse& _internal_osd_stop_response() const;
  ::msg::OsdStopResponse* _internal_mutable_osd_stop_response();
  public:
  void unsafe_arena_set_allocated_osd_stop_response(
      ::msg::OsdStopResponse* osd_stop_response);
  ::msg::OsdStopResponse* unsafe_arena_release_osd_stop_response();

  // .msg.HeartbeatResponse heartbeat_response = 3;
  bool has_heartbeat_response() const;
  private:
  bool _internal_has_heartbeat_response() const;
  public:
  void clear_heartbeat_response();
  const ::msg::HeartbeatResponse& heartbeat_response() const;
  ::msg::HeartbeatResponse* release_heartbeat_response();
  ::msg::HeartbeatResponse* mutable_heartbeat_response();
  void set_allocated_heartbeat_response(::msg::HeartbeatResponse* heartbeat_response);
  private:
  const ::msg::HeartbeatResponse& _internal_heartbeat_response() const;
  ::msg::HeartbeatResponse* _internal_mutable_heartbeat_response();
  public:
  void unsafe_arena_set_allocated_heartbeat_response(
      ::msg::HeartbeatResponse* heartbeat_response);
  ::msg::HeartbeatResponse* unsafe_arena_release_heartbeat_response();

  // .msg.GetOsdMapResponse get_osdmap_response = 4;
  bool has_get_osdmap_response() const;
  private:
  bool _internal_has_get_osdmap_response() const;
  public:
  void clear_get_osdmap_response();
  const ::msg::GetOsdMapResponse& get_osdmap_response() const;
  ::msg::GetOsdMapResponse* release_get_osdmap_response();
  ::msg::GetOsdMapResponse* mutable_get_osdmap_response();
  void set_allocated_get_osdmap_response(::msg::GetOsdMapResponse* get_osdmap_response);
  private:
  const ::msg::GetOsdMapResponse& _internal_get_osdmap_response() const;
  ::msg::GetOsdMapResponse* _internal_mutable_get_osdmap_response();
  public:
  void unsafe_arena_set_allocated_get_osdmap_response(
      ::msg::GetOsdMapResponse* get_osdmap_response);
  ::msg::GetOsdMapResponse* unsafe_arena_release_get_osdmap_response();

  // .msg.ListPoolsResponse list_pools_response = 5;
  bool has_list_pools_response() const;
  private:
  bool _internal_has_list_pools_response() const;
  public:
  void clear_list_pools_response();
  const ::msg::ListPoolsResponse& list_pools_response() const;
  ::msg::ListPoolsResponse* release_list_pools_response();
  ::msg::ListPoolsResponse* mutable_list_pools_response();
  void set_allocated_list_pools_response(::msg::ListPoolsResponse* list_pools_response);
  private:
  const ::msg::ListPoolsResponse& _internal_list_pools_response() const;
  ::msg::ListPoolsResponse* _internal_mutable_list_pools_response();
  public:
  void unsafe_arena_set_allocated_list_pools_response(
      ::msg::ListPoolsResponse* list_pools_response);
  ::msg::ListPoolsResponse* unsafe_arena_release_list_pools_response();

  // .msg.ApplyIDResponse apply_id_response = 6;
  bool has_apply_id_response() const;
  private:
  bool _internal_has_apply_id_response() const;
  public:
  void clear_apply_id_response();
  const ::msg::ApplyIDResponse& apply_id_response() const;
  ::msg::ApplyIDResponse* release_apply_id_response();
  ::msg::ApplyIDResponse* mutable_apply_id_response();
  void set_allocated_apply_id_response(::msg::ApplyIDResponse* apply_id_response);
  private:
  const ::msg::ApplyIDResponse& _internal_apply_id_response() const;
  ::msg::ApplyIDResponse* _internal_mutable_apply_id_response();
  public:
  void unsafe_arena_set_allocated_apply_id_response(
      ::msg::ApplyIDResponse* apply_id_response);
  ::msg::ApplyIDResponse* unsafe_arena_release_apply_id_response();

  // .msg.CreatePoolResponse create_pool_response = 7;
  bool has_create_pool_response() const;
  private:
  bool _internal_has_create_pool_response() const;
  public:
  void clear_create_pool_response();
  const ::msg::CreatePoolResponse& create_pool_response() const;
  ::msg::CreatePoolResponse* release_create_pool_response();
  ::msg::CreatePoolResponse* mutable_create_pool_response();
  void set_allocated_create_pool_response(::msg::CreatePoolResponse* create_pool_response);
  private:
  const ::msg::CreatePoolResponse& _internal_create_pool_response() const;
  ::msg::CreatePoolResponse* _internal_mutable_create_pool_response();
  public:
  void unsafe_arena_set_allocated_create_pool_response(
      ::msg::CreatePoolResponse* create_pool_response);
  ::msg::CreatePoolResponse* unsafe_arena_release_create_pool_response();

  // .msg.GetPgMapResponse get_pgmap_response = 8;
  bool has_get_pgmap_response() const;
  private:
  bool _internal_has_get_pgmap_response() const;
  public:
  void clear_get_pgmap_response();
  const ::msg::GetPgMapResponse& get_pgmap_response() const;
  ::msg::GetPgMapResponse* release_get_pgmap_response();
  ::msg::GetPgMapResponse* mutable_get_pgmap_response();
  void set_allocated_get_pgmap_response(::msg::GetPgMapResponse* get_pgmap_response);
  private:
  const ::msg::GetPgMapResponse& _internal_get_pgmap_response() const;
  ::msg::GetPgMapResponse* _internal_mutable_get_pgmap_response();
  public:
  void unsafe_arena_set_allocated_get_pgmap_response(
      ::msg::GetPgMapResponse* get_pgmap_response);
  ::msg::GetPgMapResponse* unsafe_arena_release_get_pgmap_response();

  // .msg.DeletePoolResponse delete_pool_response = 9;
  bool has_delete_pool_response() const;
  private:
  bool _internal_has_delete_pool_response() const;
  public:
  void clear_delete_pool_response();
  const ::msg::DeletePoolResponse& delete_pool_response() const;
  ::msg::DeletePoolResponse* release_delete_pool_response();
  ::msg::DeletePoolResponse* mutable_delete_pool_response();
  void set_allocated_delete_pool_response(::msg::DeletePoolResponse* delete_pool_response);
  private:
  const ::msg::DeletePoolResponse& _internal_delete_pool_response() const;
  ::msg::DeletePoolResponse* _internal_mutable_delete_pool_response();
  public:
  void unsafe_arena_set_allocated_delete_pool_response(
      ::msg::DeletePoolResponse* delete_pool_response);
  ::msg::DeletePoolResponse* unsafe_arena_release_delete_pool_response();

  // .msg.GetClusterMapResponse get_cluster_map_response = 10;
  bool has_get_cluster_map_response() const;
  private:
  bool _internal_has_get_cluster_map_response() const;
  public:
  void clear_get_cluster_map_response();
  const ::msg::GetClusterMapResponse& get_cluster_map_response() const;
  ::msg::GetClusterMapResponse* release_get_cluster_map_response();
  ::msg::GetClusterMapResponse* mutable_get_cluster_map_response();
  void set_allocated_get_cluster_map_response(::msg::GetClusterMapResponse* get_cluster_map_response);
  private:
  const ::msg::GetClusterMapResponse& _internal_get_cluster_map_response() const;
  ::msg::GetClusterMapResponse* _internal_mutable_get_cluster_map_response();
  public:
  void unsafe_arena_set_allocated_get_cluster_map_response(
      ::msg::GetClusterMapResponse* get_cluster_map_response);
  ::msg::GetClusterMapResponse* unsafe_arena_release_get_cluster_map_response();

  // .msg.CreateImageResponse create_image_response = 11;
  bool has_create_image_response() const;
  private:
  bool _internal_has_create_image_response() const;
  public:
  void clear_create_image_response();
  const ::msg::CreateImageResponse& create_image_response() const;
  ::msg::CreateImageResponse* release_create_image_response();
  ::msg::CreateImageResponse* mutable_create_image_response();
  void set_allocated_create_image_response(::msg::CreateImageResponse* create_image_response);
  private:
  const ::msg::CreateImageResponse& _internal_create_image_response() const;
  ::msg::CreateImageResponse* _internal_mutable_create_image_response();
  public:
  void unsafe_arena_set_allocated_create_image_response(
      ::msg::CreateImageResponse* create_image_response);
  ::msg::CreateImageResponse* unsafe_arena_release_create_image_response();

  // .msg.RemoveImageResponse remove_image_response = 12;
  bool has_remove_image_response() const;
  private:
  bool _internal_has_remove_image_response() const;
  public:
  void clear_remove_image_response();
  const ::msg::RemoveImageResponse& remove_image_response() const;
  ::msg::RemoveImageResponse* release_remove_image_response();
  ::msg::RemoveImageResponse* mutable_remove_image_response();
  void set_allocated_remove_image_response(::msg::RemoveImageResponse* remove_image_response);
  private:
  const ::msg::RemoveImageResponse& _internal_remove_image_response() const;
  ::msg::RemoveImageResponse* _internal_mutable_remove_image_response();
  public:
  void unsafe_arena_set_allocated_remove_image_response(
      ::msg::RemoveImageResponse* remove_image_response);
  ::msg::RemoveImageResponse* unsafe_arena_release_remove_image_response();

  // .msg.ResizeImageResponse resize_image_response = 13;
  bool has_resize_image_response() const;
  private:
  bool _internal_has_resize_image_response() const;
  public:
  void clear_resize_image_response();
  const ::msg::ResizeImageResponse& resize_image_response() const;
  ::msg::ResizeImageResponse* release_resize_image_response();
  ::msg::ResizeImageResponse* mutable_resize_image_response();
  void set_allocated_resize_image_response(::msg::ResizeImageResponse* resize_image_response);
  private:
  const ::msg::ResizeImageResponse& _internal_resize_image_response() const;
  ::msg::ResizeImageResponse* _internal_mutable_resize_image_response();
  public:
  void unsafe_arena_set_allocated_resize_image_response(
      ::msg::ResizeImageResponse* resize_image_response);
  ::msg::ResizeImageResponse* unsafe_arena_release_resize_image_response();

  // .msg.GetImageInfoResponse get_imageInfo_response = 14;
  bool has_get_imageinfo_response() const;
  private:
  bool _internal_has_get_imageinfo_response() const;
  public:
  void clear_get_imageinfo_response();
  const ::msg::GetImageInfoResponse& get_imageinfo_response() const;
  ::msg::GetImageInfoResponse* release_get_imageinfo_response();
  ::msg::GetImageInfoResponse* mutable_get_imageinfo_response();
  void set_allocated_get_imageinfo_response(::msg::GetImageInfoResponse* get_imageinfo_response);
  private:
  const ::msg::GetImageInfoResponse& _internal_get_imageinfo_response() const;
  ::msg::GetImageInfoResponse* _internal_mutable_get_imageinfo_response();
  public:
  void unsafe_arena_set_allocated_get_imageinfo_response(
      ::msg::GetImageInfoResponse* get_imageinfo_response);
  ::msg::GetImageInfoResponse* unsafe_arena_release_get_imageinfo_response();

  void clear_union();
  UnionCase union_case() const;
  // @@protoc_insertion_point(class_scope:msg.Response)
 private:
  class _Internal;
  void set_has_boot_response();
  void set_has_osd_stop_response();
  void set_has_heartbeat_response();
  void set_has_get_osdmap_response();
  void set_has_list_pools_response();
  void set_has_apply_id_response();
  void set_has_create_pool_response();
  void set_has_get_pgmap_response();
  void set_has_delete_pool_response();
  void set_has_get_cluster_map_response();
  void set_has_create_image_response();
  void set_has_remove_image_response();
  void set_has_resize_image_response();
  void set_has_get_imageinfo_response();

  inline bool has_union() const;
  inline void clear_has_union();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union UnionUnion {
    UnionUnion() {}
    ::msg::BootResponse* boot_response_;
    ::msg::OsdStopResponse* osd_stop_response_;
    ::msg::HeartbeatResponse* heartbeat_response_;
    ::msg::GetOsdMapResponse* get_osdmap_response_;
    ::msg::ListPoolsResponse* list_pools_response_;
    ::msg::ApplyIDResponse* apply_id_response_;
    ::msg::CreatePoolResponse* create_pool_response_;
    ::msg::GetPgMapResponse* get_pgmap_response_;
    ::msg::DeletePoolResponse* delete_pool_response_;
    ::msg::GetClusterMapResponse* get_cluster_map_response_;
    ::msg::CreateImageResponse* create_image_response_;
    ::msg::RemoveImageResponse* remove_image_response_;
    ::msg::ResizeImageResponse* resize_image_response_;
    ::msg::GetImageInfoResponse* get_imageinfo_response_;
  } union_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_message_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CreatePoolRequest

// string name = 1;
inline void CreatePoolRequest::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CreatePoolRequest::name() const {
  // @@protoc_insertion_point(field_get:msg.CreatePoolRequest.name)
  return _internal_name();
}
inline void CreatePoolRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:msg.CreatePoolRequest.name)
}
inline std::string* CreatePoolRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:msg.CreatePoolRequest.name)
  return _internal_mutable_name();
}
inline const std::string& CreatePoolRequest::_internal_name() const {
  return name_.Get();
}
inline void CreatePoolRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CreatePoolRequest::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:msg.CreatePoolRequest.name)
}
inline void CreatePoolRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:msg.CreatePoolRequest.name)
}
inline void CreatePoolRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:msg.CreatePoolRequest.name)
}
inline std::string* CreatePoolRequest::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CreatePoolRequest::release_name() {
  // @@protoc_insertion_point(field_release:msg.CreatePoolRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreatePoolRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:msg.CreatePoolRequest.name)
}
inline std::string* CreatePoolRequest::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:msg.CreatePoolRequest.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CreatePoolRequest::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CreatePoolRequest.name)
}

// int32 pgsize = 2;
inline void CreatePoolRequest::clear_pgsize() {
  pgsize_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CreatePoolRequest::_internal_pgsize() const {
  return pgsize_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CreatePoolRequest::pgsize() const {
  // @@protoc_insertion_point(field_get:msg.CreatePoolRequest.pgsize)
  return _internal_pgsize();
}
inline void CreatePoolRequest::_internal_set_pgsize(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  pgsize_ = value;
}
inline void CreatePoolRequest::set_pgsize(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pgsize(value);
  // @@protoc_insertion_point(field_set:msg.CreatePoolRequest.pgsize)
}

// int32 pgcount = 3;
inline void CreatePoolRequest::clear_pgcount() {
  pgcount_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CreatePoolRequest::_internal_pgcount() const {
  return pgcount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CreatePoolRequest::pgcount() const {
  // @@protoc_insertion_point(field_get:msg.CreatePoolRequest.pgcount)
  return _internal_pgcount();
}
inline void CreatePoolRequest::_internal_set_pgcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  pgcount_ = value;
}
inline void CreatePoolRequest::set_pgcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pgcount(value);
  // @@protoc_insertion_point(field_set:msg.CreatePoolRequest.pgcount)
}

// string failuredomain = 4;
inline void CreatePoolRequest::clear_failuredomain() {
  failuredomain_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CreatePoolRequest::failuredomain() const {
  // @@protoc_insertion_point(field_get:msg.CreatePoolRequest.failuredomain)
  return _internal_failuredomain();
}
inline void CreatePoolRequest::set_failuredomain(const std::string& value) {
  _internal_set_failuredomain(value);
  // @@protoc_insertion_point(field_set:msg.CreatePoolRequest.failuredomain)
}
inline std::string* CreatePoolRequest::mutable_failuredomain() {
  // @@protoc_insertion_point(field_mutable:msg.CreatePoolRequest.failuredomain)
  return _internal_mutable_failuredomain();
}
inline const std::string& CreatePoolRequest::_internal_failuredomain() const {
  return failuredomain_.Get();
}
inline void CreatePoolRequest::_internal_set_failuredomain(const std::string& value) {
  
  failuredomain_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CreatePoolRequest::set_failuredomain(std::string&& value) {
  
  failuredomain_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:msg.CreatePoolRequest.failuredomain)
}
inline void CreatePoolRequest::set_failuredomain(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  failuredomain_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:msg.CreatePoolRequest.failuredomain)
}
inline void CreatePoolRequest::set_failuredomain(const char* value,
    size_t size) {
  
  failuredomain_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:msg.CreatePoolRequest.failuredomain)
}
inline std::string* CreatePoolRequest::_internal_mutable_failuredomain() {
  
  return failuredomain_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CreatePoolRequest::release_failuredomain() {
  // @@protoc_insertion_point(field_release:msg.CreatePoolRequest.failuredomain)
  return failuredomain_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreatePoolRequest::set_allocated_failuredomain(std::string* failuredomain) {
  if (failuredomain != nullptr) {
    
  } else {
    
  }
  failuredomain_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), failuredomain,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:msg.CreatePoolRequest.failuredomain)
}
inline std::string* CreatePoolRequest::unsafe_arena_release_failuredomain() {
  // @@protoc_insertion_point(field_unsafe_arena_release:msg.CreatePoolRequest.failuredomain)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return failuredomain_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CreatePoolRequest::unsafe_arena_set_allocated_failuredomain(
    std::string* failuredomain) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (failuredomain != nullptr) {
    
  } else {
    
  }
  failuredomain_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      failuredomain, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CreatePoolRequest.failuredomain)
}

// string root = 5;
inline void CreatePoolRequest::clear_root() {
  root_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CreatePoolRequest::root() const {
  // @@protoc_insertion_point(field_get:msg.CreatePoolRequest.root)
  return _internal_root();
}
inline void CreatePoolRequest::set_root(const std::string& value) {
  _internal_set_root(value);
  // @@protoc_insertion_point(field_set:msg.CreatePoolRequest.root)
}
inline std::string* CreatePoolRequest::mutable_root() {
  // @@protoc_insertion_point(field_mutable:msg.CreatePoolRequest.root)
  return _internal_mutable_root();
}
inline const std::string& CreatePoolRequest::_internal_root() const {
  return root_.Get();
}
inline void CreatePoolRequest::_internal_set_root(const std::string& value) {
  
  root_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CreatePoolRequest::set_root(std::string&& value) {
  
  root_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:msg.CreatePoolRequest.root)
}
inline void CreatePoolRequest::set_root(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  root_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:msg.CreatePoolRequest.root)
}
inline void CreatePoolRequest::set_root(const char* value,
    size_t size) {
  
  root_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:msg.CreatePoolRequest.root)
}
inline std::string* CreatePoolRequest::_internal_mutable_root() {
  
  return root_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CreatePoolRequest::release_root() {
  // @@protoc_insertion_point(field_release:msg.CreatePoolRequest.root)
  return root_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreatePoolRequest::set_allocated_root(std::string* root) {
  if (root != nullptr) {
    
  } else {
    
  }
  root_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), root,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:msg.CreatePoolRequest.root)
}
inline std::string* CreatePoolRequest::unsafe_arena_release_root() {
  // @@protoc_insertion_point(field_unsafe_arena_release:msg.CreatePoolRequest.root)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return root_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CreatePoolRequest::unsafe_arena_set_allocated_root(
    std::string* root) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (root != nullptr) {
    
  } else {
    
  }
  root_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      root, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CreatePoolRequest.root)
}

// -------------------------------------------------------------------

// CreatePoolResponse

// bool ok = 1;
inline void CreatePoolResponse::clear_ok() {
  ok_ = false;
}
inline bool CreatePoolResponse::_internal_ok() const {
  return ok_;
}
inline bool CreatePoolResponse::ok() const {
  // @@protoc_insertion_point(field_get:msg.CreatePoolResponse.ok)
  return _internal_ok();
}
inline void CreatePoolResponse::_internal_set_ok(bool value) {
  
  ok_ = value;
}
inline void CreatePoolResponse::set_ok(bool value) {
  _internal_set_ok(value);
  // @@protoc_insertion_point(field_set:msg.CreatePoolResponse.ok)
}

// int32 poolid = 2;
inline void CreatePoolResponse::clear_poolid() {
  poolid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CreatePoolResponse::_internal_poolid() const {
  return poolid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CreatePoolResponse::poolid() const {
  // @@protoc_insertion_point(field_get:msg.CreatePoolResponse.poolid)
  return _internal_poolid();
}
inline void CreatePoolResponse::_internal_set_poolid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  poolid_ = value;
}
inline void CreatePoolResponse::set_poolid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_poolid(value);
  // @@protoc_insertion_point(field_set:msg.CreatePoolResponse.poolid)
}

// -------------------------------------------------------------------

// ListPoolsRequest

// -------------------------------------------------------------------

// poolinfo

// int32 poolid = 1;
inline void poolinfo::clear_poolid() {
  poolid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 poolinfo::_internal_poolid() const {
  return poolid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 poolinfo::poolid() const {
  // @@protoc_insertion_point(field_get:msg.poolinfo.poolid)
  return _internal_poolid();
}
inline void poolinfo::_internal_set_poolid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  poolid_ = value;
}
inline void poolinfo::set_poolid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_poolid(value);
  // @@protoc_insertion_point(field_set:msg.poolinfo.poolid)
}

// string name = 2;
inline void poolinfo::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& poolinfo::name() const {
  // @@protoc_insertion_point(field_get:msg.poolinfo.name)
  return _internal_name();
}
inline void poolinfo::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:msg.poolinfo.name)
}
inline std::string* poolinfo::mutable_name() {
  // @@protoc_insertion_point(field_mutable:msg.poolinfo.name)
  return _internal_mutable_name();
}
inline const std::string& poolinfo::_internal_name() const {
  return name_.Get();
}
inline void poolinfo::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void poolinfo::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:msg.poolinfo.name)
}
inline void poolinfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:msg.poolinfo.name)
}
inline void poolinfo::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:msg.poolinfo.name)
}
inline std::string* poolinfo::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* poolinfo::release_name() {
  // @@protoc_insertion_point(field_release:msg.poolinfo.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void poolinfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:msg.poolinfo.name)
}
inline std::string* poolinfo::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:msg.poolinfo.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void poolinfo::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.poolinfo.name)
}

// int32 pgsize = 3;
inline void poolinfo::clear_pgsize() {
  pgsize_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 poolinfo::_internal_pgsize() const {
  return pgsize_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 poolinfo::pgsize() const {
  // @@protoc_insertion_point(field_get:msg.poolinfo.pgsize)
  return _internal_pgsize();
}
inline void poolinfo::_internal_set_pgsize(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  pgsize_ = value;
}
inline void poolinfo::set_pgsize(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pgsize(value);
  // @@protoc_insertion_point(field_set:msg.poolinfo.pgsize)
}

// int32 pgcount = 4;
inline void poolinfo::clear_pgcount() {
  pgcount_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 poolinfo::_internal_pgcount() const {
  return pgcount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 poolinfo::pgcount() const {
  // @@protoc_insertion_point(field_get:msg.poolinfo.pgcount)
  return _internal_pgcount();
}
inline void poolinfo::_internal_set_pgcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  pgcount_ = value;
}
inline void poolinfo::set_pgcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pgcount(value);
  // @@protoc_insertion_point(field_set:msg.poolinfo.pgcount)
}

// string failuredomain = 5;
inline void poolinfo::clear_failuredomain() {
  failuredomain_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& poolinfo::failuredomain() const {
  // @@protoc_insertion_point(field_get:msg.poolinfo.failuredomain)
  return _internal_failuredomain();
}
inline void poolinfo::set_failuredomain(const std::string& value) {
  _internal_set_failuredomain(value);
  // @@protoc_insertion_point(field_set:msg.poolinfo.failuredomain)
}
inline std::string* poolinfo::mutable_failuredomain() {
  // @@protoc_insertion_point(field_mutable:msg.poolinfo.failuredomain)
  return _internal_mutable_failuredomain();
}
inline const std::string& poolinfo::_internal_failuredomain() const {
  return failuredomain_.Get();
}
inline void poolinfo::_internal_set_failuredomain(const std::string& value) {
  
  failuredomain_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void poolinfo::set_failuredomain(std::string&& value) {
  
  failuredomain_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:msg.poolinfo.failuredomain)
}
inline void poolinfo::set_failuredomain(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  failuredomain_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:msg.poolinfo.failuredomain)
}
inline void poolinfo::set_failuredomain(const char* value,
    size_t size) {
  
  failuredomain_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:msg.poolinfo.failuredomain)
}
inline std::string* poolinfo::_internal_mutable_failuredomain() {
  
  return failuredomain_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* poolinfo::release_failuredomain() {
  // @@protoc_insertion_point(field_release:msg.poolinfo.failuredomain)
  return failuredomain_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void poolinfo::set_allocated_failuredomain(std::string* failuredomain) {
  if (failuredomain != nullptr) {
    
  } else {
    
  }
  failuredomain_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), failuredomain,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:msg.poolinfo.failuredomain)
}
inline std::string* poolinfo::unsafe_arena_release_failuredomain() {
  // @@protoc_insertion_point(field_unsafe_arena_release:msg.poolinfo.failuredomain)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return failuredomain_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void poolinfo::unsafe_arena_set_allocated_failuredomain(
    std::string* failuredomain) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (failuredomain != nullptr) {
    
  } else {
    
  }
  failuredomain_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      failuredomain, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.poolinfo.failuredomain)
}

// string root = 6;
inline void poolinfo::clear_root() {
  root_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& poolinfo::root() const {
  // @@protoc_insertion_point(field_get:msg.poolinfo.root)
  return _internal_root();
}
inline void poolinfo::set_root(const std::string& value) {
  _internal_set_root(value);
  // @@protoc_insertion_point(field_set:msg.poolinfo.root)
}
inline std::string* poolinfo::mutable_root() {
  // @@protoc_insertion_point(field_mutable:msg.poolinfo.root)
  return _internal_mutable_root();
}
inline const std::string& poolinfo::_internal_root() const {
  return root_.Get();
}
inline void poolinfo::_internal_set_root(const std::string& value) {
  
  root_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void poolinfo::set_root(std::string&& value) {
  
  root_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:msg.poolinfo.root)
}
inline void poolinfo::set_root(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  root_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:msg.poolinfo.root)
}
inline void poolinfo::set_root(const char* value,
    size_t size) {
  
  root_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:msg.poolinfo.root)
}
inline std::string* poolinfo::_internal_mutable_root() {
  
  return root_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* poolinfo::release_root() {
  // @@protoc_insertion_point(field_release:msg.poolinfo.root)
  return root_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void poolinfo::set_allocated_root(std::string* root) {
  if (root != nullptr) {
    
  } else {
    
  }
  root_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), root,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:msg.poolinfo.root)
}
inline std::string* poolinfo::unsafe_arena_release_root() {
  // @@protoc_insertion_point(field_unsafe_arena_release:msg.poolinfo.root)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return root_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void poolinfo::unsafe_arena_set_allocated_root(
    std::string* root) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (root != nullptr) {
    
  } else {
    
  }
  root_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      root, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.poolinfo.root)
}

// -------------------------------------------------------------------

// ListPoolsResponse

// repeated .msg.poolinfo pi = 1;
inline int ListPoolsResponse::_internal_pi_size() const {
  return pi_.size();
}
inline int ListPoolsResponse::pi_size() const {
  return _internal_pi_size();
}
inline void ListPoolsResponse::clear_pi() {
  pi_.Clear();
}
inline ::msg::poolinfo* ListPoolsResponse::mutable_pi(int index) {
  // @@protoc_insertion_point(field_mutable:msg.ListPoolsResponse.pi)
  return pi_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::poolinfo >*
ListPoolsResponse::mutable_pi() {
  // @@protoc_insertion_point(field_mutable_list:msg.ListPoolsResponse.pi)
  return &pi_;
}
inline const ::msg::poolinfo& ListPoolsResponse::_internal_pi(int index) const {
  return pi_.Get(index);
}
inline const ::msg::poolinfo& ListPoolsResponse::pi(int index) const {
  // @@protoc_insertion_point(field_get:msg.ListPoolsResponse.pi)
  return _internal_pi(index);
}
inline ::msg::poolinfo* ListPoolsResponse::_internal_add_pi() {
  return pi_.Add();
}
inline ::msg::poolinfo* ListPoolsResponse::add_pi() {
  // @@protoc_insertion_point(field_add:msg.ListPoolsResponse.pi)
  return _internal_add_pi();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::poolinfo >&
ListPoolsResponse::pi() const {
  // @@protoc_insertion_point(field_list:msg.ListPoolsResponse.pi)
  return pi_;
}

// -------------------------------------------------------------------

// DeletePoolRequest

// string name = 1;
inline void DeletePoolRequest::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeletePoolRequest::name() const {
  // @@protoc_insertion_point(field_get:msg.DeletePoolRequest.name)
  return _internal_name();
}
inline void DeletePoolRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:msg.DeletePoolRequest.name)
}
inline std::string* DeletePoolRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:msg.DeletePoolRequest.name)
  return _internal_mutable_name();
}
inline const std::string& DeletePoolRequest::_internal_name() const {
  return name_.Get();
}
inline void DeletePoolRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeletePoolRequest::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:msg.DeletePoolRequest.name)
}
inline void DeletePoolRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:msg.DeletePoolRequest.name)
}
inline void DeletePoolRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:msg.DeletePoolRequest.name)
}
inline std::string* DeletePoolRequest::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeletePoolRequest::release_name() {
  // @@protoc_insertion_point(field_release:msg.DeletePoolRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeletePoolRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:msg.DeletePoolRequest.name)
}
inline std::string* DeletePoolRequest::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:msg.DeletePoolRequest.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeletePoolRequest::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.DeletePoolRequest.name)
}

// -------------------------------------------------------------------

// DeletePoolResponse

// bool ok = 1;
inline void DeletePoolResponse::clear_ok() {
  ok_ = false;
}
inline bool DeletePoolResponse::_internal_ok() const {
  return ok_;
}
inline bool DeletePoolResponse::ok() const {
  // @@protoc_insertion_point(field_get:msg.DeletePoolResponse.ok)
  return _internal_ok();
}
inline void DeletePoolResponse::_internal_set_ok(bool value) {
  
  ok_ = value;
}
inline void DeletePoolResponse::set_ok(bool value) {
  _internal_set_ok(value);
  // @@protoc_insertion_point(field_set:msg.DeletePoolResponse.ok)
}

// -------------------------------------------------------------------

// ApplyIDRequest

// string uuid = 1;
inline void ApplyIDRequest::clear_uuid() {
  uuid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ApplyIDRequest::uuid() const {
  // @@protoc_insertion_point(field_get:msg.ApplyIDRequest.uuid)
  return _internal_uuid();
}
inline void ApplyIDRequest::set_uuid(const std::string& value) {
  _internal_set_uuid(value);
  // @@protoc_insertion_point(field_set:msg.ApplyIDRequest.uuid)
}
inline std::string* ApplyIDRequest::mutable_uuid() {
  // @@protoc_insertion_point(field_mutable:msg.ApplyIDRequest.uuid)
  return _internal_mutable_uuid();
}
inline const std::string& ApplyIDRequest::_internal_uuid() const {
  return uuid_.Get();
}
inline void ApplyIDRequest::_internal_set_uuid(const std::string& value) {
  
  uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ApplyIDRequest::set_uuid(std::string&& value) {
  
  uuid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:msg.ApplyIDRequest.uuid)
}
inline void ApplyIDRequest::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:msg.ApplyIDRequest.uuid)
}
inline void ApplyIDRequest::set_uuid(const char* value,
    size_t size) {
  
  uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:msg.ApplyIDRequest.uuid)
}
inline std::string* ApplyIDRequest::_internal_mutable_uuid() {
  
  return uuid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ApplyIDRequest::release_uuid() {
  // @@protoc_insertion_point(field_release:msg.ApplyIDRequest.uuid)
  return uuid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ApplyIDRequest::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    
  } else {
    
  }
  uuid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uuid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:msg.ApplyIDRequest.uuid)
}
inline std::string* ApplyIDRequest::unsafe_arena_release_uuid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:msg.ApplyIDRequest.uuid)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return uuid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ApplyIDRequest::unsafe_arena_set_allocated_uuid(
    std::string* uuid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (uuid != nullptr) {
    
  } else {
    
  }
  uuid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      uuid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.ApplyIDRequest.uuid)
}

// -------------------------------------------------------------------

// ApplyIDResponse

// string uuid = 1;
inline void ApplyIDResponse::clear_uuid() {
  uuid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ApplyIDResponse::uuid() const {
  // @@protoc_insertion_point(field_get:msg.ApplyIDResponse.uuid)
  return _internal_uuid();
}
inline void ApplyIDResponse::set_uuid(const std::string& value) {
  _internal_set_uuid(value);
  // @@protoc_insertion_point(field_set:msg.ApplyIDResponse.uuid)
}
inline std::string* ApplyIDResponse::mutable_uuid() {
  // @@protoc_insertion_point(field_mutable:msg.ApplyIDResponse.uuid)
  return _internal_mutable_uuid();
}
inline const std::string& ApplyIDResponse::_internal_uuid() const {
  return uuid_.Get();
}
inline void ApplyIDResponse::_internal_set_uuid(const std::string& value) {
  
  uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ApplyIDResponse::set_uuid(std::string&& value) {
  
  uuid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:msg.ApplyIDResponse.uuid)
}
inline void ApplyIDResponse::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:msg.ApplyIDResponse.uuid)
}
inline void ApplyIDResponse::set_uuid(const char* value,
    size_t size) {
  
  uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:msg.ApplyIDResponse.uuid)
}
inline std::string* ApplyIDResponse::_internal_mutable_uuid() {
  
  return uuid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ApplyIDResponse::release_uuid() {
  // @@protoc_insertion_point(field_release:msg.ApplyIDResponse.uuid)
  return uuid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ApplyIDResponse::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    
  } else {
    
  }
  uuid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uuid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:msg.ApplyIDResponse.uuid)
}
inline std::string* ApplyIDResponse::unsafe_arena_release_uuid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:msg.ApplyIDResponse.uuid)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return uuid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ApplyIDResponse::unsafe_arena_set_allocated_uuid(
    std::string* uuid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (uuid != nullptr) {
    
  } else {
    
  }
  uuid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      uuid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.ApplyIDResponse.uuid)
}

// int32 id = 2;
inline void ApplyIDResponse::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ApplyIDResponse::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ApplyIDResponse::id() const {
  // @@protoc_insertion_point(field_get:msg.ApplyIDResponse.id)
  return _internal_id();
}
inline void ApplyIDResponse::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void ApplyIDResponse::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:msg.ApplyIDResponse.id)
}

// -------------------------------------------------------------------

// BootRequest

// int32 osd_id = 1;
inline void BootRequest::clear_osd_id() {
  osd_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BootRequest::_internal_osd_id() const {
  return osd_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BootRequest::osd_id() const {
  // @@protoc_insertion_point(field_get:msg.BootRequest.osd_id)
  return _internal_osd_id();
}
inline void BootRequest::_internal_set_osd_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  osd_id_ = value;
}
inline void BootRequest::set_osd_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_osd_id(value);
  // @@protoc_insertion_point(field_set:msg.BootRequest.osd_id)
}

// string uuid = 2;
inline void BootRequest::clear_uuid() {
  uuid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& BootRequest::uuid() const {
  // @@protoc_insertion_point(field_get:msg.BootRequest.uuid)
  return _internal_uuid();
}
inline void BootRequest::set_uuid(const std::string& value) {
  _internal_set_uuid(value);
  // @@protoc_insertion_point(field_set:msg.BootRequest.uuid)
}
inline std::string* BootRequest::mutable_uuid() {
  // @@protoc_insertion_point(field_mutable:msg.BootRequest.uuid)
  return _internal_mutable_uuid();
}
inline const std::string& BootRequest::_internal_uuid() const {
  return uuid_.Get();
}
inline void BootRequest::_internal_set_uuid(const std::string& value) {
  
  uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BootRequest::set_uuid(std::string&& value) {
  
  uuid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:msg.BootRequest.uuid)
}
inline void BootRequest::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:msg.BootRequest.uuid)
}
inline void BootRequest::set_uuid(const char* value,
    size_t size) {
  
  uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:msg.BootRequest.uuid)
}
inline std::string* BootRequest::_internal_mutable_uuid() {
  
  return uuid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BootRequest::release_uuid() {
  // @@protoc_insertion_point(field_release:msg.BootRequest.uuid)
  return uuid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BootRequest::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    
  } else {
    
  }
  uuid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uuid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:msg.BootRequest.uuid)
}
inline std::string* BootRequest::unsafe_arena_release_uuid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:msg.BootRequest.uuid)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return uuid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void BootRequest::unsafe_arena_set_allocated_uuid(
    std::string* uuid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (uuid != nullptr) {
    
  } else {
    
  }
  uuid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      uuid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.BootRequest.uuid)
}

// int64 size = 3;
inline void BootRequest::clear_size() {
  size_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 BootRequest::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 BootRequest::size() const {
  // @@protoc_insertion_point(field_get:msg.BootRequest.size)
  return _internal_size();
}
inline void BootRequest::_internal_set_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  size_ = value;
}
inline void BootRequest::set_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:msg.BootRequest.size)
}

// uint32 port = 4;
inline void BootRequest::clear_port() {
  port_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BootRequest::_internal_port() const {
  return port_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BootRequest::port() const {
  // @@protoc_insertion_point(field_get:msg.BootRequest.port)
  return _internal_port();
}
inline void BootRequest::_internal_set_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  port_ = value;
}
inline void BootRequest::set_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:msg.BootRequest.port)
}

// string address = 5;
inline void BootRequest::clear_address() {
  address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& BootRequest::address() const {
  // @@protoc_insertion_point(field_get:msg.BootRequest.address)
  return _internal_address();
}
inline void BootRequest::set_address(const std::string& value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:msg.BootRequest.address)
}
inline std::string* BootRequest::mutable_address() {
  // @@protoc_insertion_point(field_mutable:msg.BootRequest.address)
  return _internal_mutable_address();
}
inline const std::string& BootRequest::_internal_address() const {
  return address_.Get();
}
inline void BootRequest::_internal_set_address(const std::string& value) {
  
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BootRequest::set_address(std::string&& value) {
  
  address_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:msg.BootRequest.address)
}
inline void BootRequest::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:msg.BootRequest.address)
}
inline void BootRequest::set_address(const char* value,
    size_t size) {
  
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:msg.BootRequest.address)
}
inline std::string* BootRequest::_internal_mutable_address() {
  
  return address_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BootRequest::release_address() {
  // @@protoc_insertion_point(field_release:msg.BootRequest.address)
  return address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BootRequest::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:msg.BootRequest.address)
}
inline std::string* BootRequest::unsafe_arena_release_address() {
  // @@protoc_insertion_point(field_unsafe_arena_release:msg.BootRequest.address)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return address_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void BootRequest::unsafe_arena_set_allocated_address(
    std::string* address) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (address != nullptr) {
    
  } else {
    
  }
  address_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      address, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.BootRequest.address)
}

// string host = 6;
inline void BootRequest::clear_host() {
  host_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& BootRequest::host() const {
  // @@protoc_insertion_point(field_get:msg.BootRequest.host)
  return _internal_host();
}
inline void BootRequest::set_host(const std::string& value) {
  _internal_set_host(value);
  // @@protoc_insertion_point(field_set:msg.BootRequest.host)
}
inline std::string* BootRequest::mutable_host() {
  // @@protoc_insertion_point(field_mutable:msg.BootRequest.host)
  return _internal_mutable_host();
}
inline const std::string& BootRequest::_internal_host() const {
  return host_.Get();
}
inline void BootRequest::_internal_set_host(const std::string& value) {
  
  host_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BootRequest::set_host(std::string&& value) {
  
  host_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:msg.BootRequest.host)
}
inline void BootRequest::set_host(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  host_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:msg.BootRequest.host)
}
inline void BootRequest::set_host(const char* value,
    size_t size) {
  
  host_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:msg.BootRequest.host)
}
inline std::string* BootRequest::_internal_mutable_host() {
  
  return host_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BootRequest::release_host() {
  // @@protoc_insertion_point(field_release:msg.BootRequest.host)
  return host_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BootRequest::set_allocated_host(std::string* host) {
  if (host != nullptr) {
    
  } else {
    
  }
  host_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), host,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:msg.BootRequest.host)
}
inline std::string* BootRequest::unsafe_arena_release_host() {
  // @@protoc_insertion_point(field_unsafe_arena_release:msg.BootRequest.host)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return host_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void BootRequest::unsafe_arena_set_allocated_host(
    std::string* host) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (host != nullptr) {
    
  } else {
    
  }
  host_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      host, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.BootRequest.host)
}

// -------------------------------------------------------------------

// PGInfo

// int32 pgid = 2;
inline void PGInfo::clear_pgid() {
  pgid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PGInfo::_internal_pgid() const {
  return pgid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PGInfo::pgid() const {
  // @@protoc_insertion_point(field_get:msg.PGInfo.pgid)
  return _internal_pgid();
}
inline void PGInfo::_internal_set_pgid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  pgid_ = value;
}
inline void PGInfo::set_pgid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pgid(value);
  // @@protoc_insertion_point(field_set:msg.PGInfo.pgid)
}

// repeated int32 osdid = 3;
inline int PGInfo::_internal_osdid_size() const {
  return osdid_.size();
}
inline int PGInfo::osdid_size() const {
  return _internal_osdid_size();
}
inline void PGInfo::clear_osdid() {
  osdid_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PGInfo::_internal_osdid(int index) const {
  return osdid_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PGInfo::osdid(int index) const {
  // @@protoc_insertion_point(field_get:msg.PGInfo.osdid)
  return _internal_osdid(index);
}
inline void PGInfo::set_osdid(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  osdid_.Set(index, value);
  // @@protoc_insertion_point(field_set:msg.PGInfo.osdid)
}
inline void PGInfo::_internal_add_osdid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  osdid_.Add(value);
}
inline void PGInfo::add_osdid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_osdid(value);
  // @@protoc_insertion_point(field_add:msg.PGInfo.osdid)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
PGInfo::_internal_osdid() const {
  return osdid_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
PGInfo::osdid() const {
  // @@protoc_insertion_point(field_list:msg.PGInfo.osdid)
  return _internal_osdid();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
PGInfo::_internal_mutable_osdid() {
  return &osdid_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
PGInfo::mutable_osdid() {
  // @@protoc_insertion_point(field_mutable_list:msg.PGInfo.osdid)
  return _internal_mutable_osdid();
}

// -------------------------------------------------------------------

// PGInfos

// repeated .msg.PGInfo pi = 1;
inline int PGInfos::_internal_pi_size() const {
  return pi_.size();
}
inline int PGInfos::pi_size() const {
  return _internal_pi_size();
}
inline void PGInfos::clear_pi() {
  pi_.Clear();
}
inline ::msg::PGInfo* PGInfos::mutable_pi(int index) {
  // @@protoc_insertion_point(field_mutable:msg.PGInfos.pi)
  return pi_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::PGInfo >*
PGInfos::mutable_pi() {
  // @@protoc_insertion_point(field_mutable_list:msg.PGInfos.pi)
  return &pi_;
}
inline const ::msg::PGInfo& PGInfos::_internal_pi(int index) const {
  return pi_.Get(index);
}
inline const ::msg::PGInfo& PGInfos::pi(int index) const {
  // @@protoc_insertion_point(field_get:msg.PGInfos.pi)
  return _internal_pi(index);
}
inline ::msg::PGInfo* PGInfos::_internal_add_pi() {
  return pi_.Add();
}
inline ::msg::PGInfo* PGInfos::add_pi() {
  // @@protoc_insertion_point(field_add:msg.PGInfos.pi)
  return _internal_add_pi();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::PGInfo >&
PGInfos::pi() const {
  // @@protoc_insertion_point(field_list:msg.PGInfos.pi)
  return pi_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// GetPgMapRequest

// map<int32, int64> pool_versions = 1;
inline int GetPgMapRequest::_internal_pool_versions_size() const {
  return pool_versions_.size();
}
inline int GetPgMapRequest::pool_versions_size() const {
  return _internal_pool_versions_size();
}
inline void GetPgMapRequest::clear_pool_versions() {
  pool_versions_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int64 >&
GetPgMapRequest::_internal_pool_versions() const {
  return pool_versions_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int64 >&
GetPgMapRequest::pool_versions() const {
  // @@protoc_insertion_point(field_map:msg.GetPgMapRequest.pool_versions)
  return _internal_pool_versions();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int64 >*
GetPgMapRequest::_internal_mutable_pool_versions() {
  return pool_versions_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int64 >*
GetPgMapRequest::mutable_pool_versions() {
  // @@protoc_insertion_point(field_mutable_map:msg.GetPgMapRequest.pool_versions)
  return _internal_mutable_pool_versions();
}

// -------------------------------------------------------------------

// OsdDynamicInfo

// int32 osdid = 1;
inline void OsdDynamicInfo::clear_osdid() {
  osdid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OsdDynamicInfo::_internal_osdid() const {
  return osdid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OsdDynamicInfo::osdid() const {
  // @@protoc_insertion_point(field_get:msg.OsdDynamicInfo.osdid)
  return _internal_osdid();
}
inline void OsdDynamicInfo::_internal_set_osdid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  osdid_ = value;
}
inline void OsdDynamicInfo::set_osdid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_osdid(value);
  // @@protoc_insertion_point(field_set:msg.OsdDynamicInfo.osdid)
}

// string address = 2;
inline void OsdDynamicInfo::clear_address() {
  address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OsdDynamicInfo::address() const {
  // @@protoc_insertion_point(field_get:msg.OsdDynamicInfo.address)
  return _internal_address();
}
inline void OsdDynamicInfo::set_address(const std::string& value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:msg.OsdDynamicInfo.address)
}
inline std::string* OsdDynamicInfo::mutable_address() {
  // @@protoc_insertion_point(field_mutable:msg.OsdDynamicInfo.address)
  return _internal_mutable_address();
}
inline const std::string& OsdDynamicInfo::_internal_address() const {
  return address_.Get();
}
inline void OsdDynamicInfo::_internal_set_address(const std::string& value) {
  
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OsdDynamicInfo::set_address(std::string&& value) {
  
  address_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:msg.OsdDynamicInfo.address)
}
inline void OsdDynamicInfo::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:msg.OsdDynamicInfo.address)
}
inline void OsdDynamicInfo::set_address(const char* value,
    size_t size) {
  
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:msg.OsdDynamicInfo.address)
}
inline std::string* OsdDynamicInfo::_internal_mutable_address() {
  
  return address_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OsdDynamicInfo::release_address() {
  // @@protoc_insertion_point(field_release:msg.OsdDynamicInfo.address)
  return address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OsdDynamicInfo::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:msg.OsdDynamicInfo.address)
}
inline std::string* OsdDynamicInfo::unsafe_arena_release_address() {
  // @@protoc_insertion_point(field_unsafe_arena_release:msg.OsdDynamicInfo.address)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return address_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void OsdDynamicInfo::unsafe_arena_set_allocated_address(
    std::string* address) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (address != nullptr) {
    
  } else {
    
  }
  address_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      address, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.OsdDynamicInfo.address)
}

// int32 port = 3;
inline void OsdDynamicInfo::clear_port() {
  port_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OsdDynamicInfo::_internal_port() const {
  return port_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OsdDynamicInfo::port() const {
  // @@protoc_insertion_point(field_get:msg.OsdDynamicInfo.port)
  return _internal_port();
}
inline void OsdDynamicInfo::_internal_set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  port_ = value;
}
inline void OsdDynamicInfo::set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:msg.OsdDynamicInfo.port)
}

// bool isin = 4;
inline void OsdDynamicInfo::clear_isin() {
  isin_ = false;
}
inline bool OsdDynamicInfo::_internal_isin() const {
  return isin_;
}
inline bool OsdDynamicInfo::isin() const {
  // @@protoc_insertion_point(field_get:msg.OsdDynamicInfo.isin)
  return _internal_isin();
}
inline void OsdDynamicInfo::_internal_set_isin(bool value) {
  
  isin_ = value;
}
inline void OsdDynamicInfo::set_isin(bool value) {
  _internal_set_isin(value);
  // @@protoc_insertion_point(field_set:msg.OsdDynamicInfo.isin)
}

// bool isup = 5;
inline void OsdDynamicInfo::clear_isup() {
  isup_ = false;
}
inline bool OsdDynamicInfo::_internal_isup() const {
  return isup_;
}
inline bool OsdDynamicInfo::isup() const {
  // @@protoc_insertion_point(field_get:msg.OsdDynamicInfo.isup)
  return _internal_isup();
}
inline void OsdDynamicInfo::_internal_set_isup(bool value) {
  
  isup_ = value;
}
inline void OsdDynamicInfo::set_isup(bool value) {
  _internal_set_isup(value);
  // @@protoc_insertion_point(field_set:msg.OsdDynamicInfo.isup)
}

// bool ispendingcreate = 6;
inline void OsdDynamicInfo::clear_ispendingcreate() {
  ispendingcreate_ = false;
}
inline bool OsdDynamicInfo::_internal_ispendingcreate() const {
  return ispendingcreate_;
}
inline bool OsdDynamicInfo::ispendingcreate() const {
  // @@protoc_insertion_point(field_get:msg.OsdDynamicInfo.ispendingcreate)
  return _internal_ispendingcreate();
}
inline void OsdDynamicInfo::_internal_set_ispendingcreate(bool value) {
  
  ispendingcreate_ = value;
}
inline void OsdDynamicInfo::set_ispendingcreate(bool value) {
  _internal_set_ispendingcreate(value);
  // @@protoc_insertion_point(field_set:msg.OsdDynamicInfo.ispendingcreate)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// GetPgMapResponse

// map<int32, .msg.GetPgMapErrorCode> errorcode = 1;
inline int GetPgMapResponse::_internal_errorcode_size() const {
  return errorcode_.size();
}
inline int GetPgMapResponse::errorcode_size() const {
  return _internal_errorcode_size();
}
inline void GetPgMapResponse::clear_errorcode() {
  errorcode_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::msg::GetPgMapErrorCode >&
GetPgMapResponse::_internal_errorcode() const {
  return errorcode_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::msg::GetPgMapErrorCode >&
GetPgMapResponse::errorcode() const {
  // @@protoc_insertion_point(field_map:msg.GetPgMapResponse.errorcode)
  return _internal_errorcode();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::msg::GetPgMapErrorCode >*
GetPgMapResponse::_internal_mutable_errorcode() {
  return errorcode_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::msg::GetPgMapErrorCode >*
GetPgMapResponse::mutable_errorcode() {
  // @@protoc_insertion_point(field_mutable_map:msg.GetPgMapResponse.errorcode)
  return _internal_mutable_errorcode();
}

// map<int32, int64> poolid_pgmapversion = 2;
inline int GetPgMapResponse::_internal_poolid_pgmapversion_size() const {
  return poolid_pgmapversion_.size();
}
inline int GetPgMapResponse::poolid_pgmapversion_size() const {
  return _internal_poolid_pgmapversion_size();
}
inline void GetPgMapResponse::clear_poolid_pgmapversion() {
  poolid_pgmapversion_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int64 >&
GetPgMapResponse::_internal_poolid_pgmapversion() const {
  return poolid_pgmapversion_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int64 >&
GetPgMapResponse::poolid_pgmapversion() const {
  // @@protoc_insertion_point(field_map:msg.GetPgMapResponse.poolid_pgmapversion)
  return _internal_poolid_pgmapversion();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int64 >*
GetPgMapResponse::_internal_mutable_poolid_pgmapversion() {
  return poolid_pgmapversion_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int64 >*
GetPgMapResponse::mutable_poolid_pgmapversion() {
  // @@protoc_insertion_point(field_mutable_map:msg.GetPgMapResponse.poolid_pgmapversion)
  return _internal_mutable_poolid_pgmapversion();
}

// map<int32, .msg.PGInfos> pgs = 3;
inline int GetPgMapResponse::_internal_pgs_size() const {
  return pgs_.size();
}
inline int GetPgMapResponse::pgs_size() const {
  return _internal_pgs_size();
}
inline void GetPgMapResponse::clear_pgs() {
  pgs_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::msg::PGInfos >&
GetPgMapResponse::_internal_pgs() const {
  return pgs_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::msg::PGInfos >&
GetPgMapResponse::pgs() const {
  // @@protoc_insertion_point(field_map:msg.GetPgMapResponse.pgs)
  return _internal_pgs();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::msg::PGInfos >*
GetPgMapResponse::_internal_mutable_pgs() {
  return pgs_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::msg::PGInfos >*
GetPgMapResponse::mutable_pgs() {
  // @@protoc_insertion_point(field_mutable_map:msg.GetPgMapResponse.pgs)
  return _internal_mutable_pgs();
}

// -------------------------------------------------------------------

// GetOsdMapRequest

// int32 osdid = 1;
inline void GetOsdMapRequest::clear_osdid() {
  osdid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetOsdMapRequest::_internal_osdid() const {
  return osdid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetOsdMapRequest::osdid() const {
  // @@protoc_insertion_point(field_get:msg.GetOsdMapRequest.osdid)
  return _internal_osdid();
}
inline void GetOsdMapRequest::_internal_set_osdid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  osdid_ = value;
}
inline void GetOsdMapRequest::set_osdid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_osdid(value);
  // @@protoc_insertion_point(field_set:msg.GetOsdMapRequest.osdid)
}

// int64 currentversion = 2;
inline void GetOsdMapRequest::clear_currentversion() {
  currentversion_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetOsdMapRequest::_internal_currentversion() const {
  return currentversion_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetOsdMapRequest::currentversion() const {
  // @@protoc_insertion_point(field_get:msg.GetOsdMapRequest.currentversion)
  return _internal_currentversion();
}
inline void GetOsdMapRequest::_internal_set_currentversion(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  currentversion_ = value;
}
inline void GetOsdMapRequest::set_currentversion(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_currentversion(value);
  // @@protoc_insertion_point(field_set:msg.GetOsdMapRequest.currentversion)
}

// -------------------------------------------------------------------

// GetOsdMapResponse

// .msg.OsdMapErrorCode errorcode = 1;
inline void GetOsdMapResponse::clear_errorcode() {
  errorcode_ = 0;
}
inline ::msg::OsdMapErrorCode GetOsdMapResponse::_internal_errorcode() const {
  return static_cast< ::msg::OsdMapErrorCode >(errorcode_);
}
inline ::msg::OsdMapErrorCode GetOsdMapResponse::errorcode() const {
  // @@protoc_insertion_point(field_get:msg.GetOsdMapResponse.errorcode)
  return _internal_errorcode();
}
inline void GetOsdMapResponse::_internal_set_errorcode(::msg::OsdMapErrorCode value) {
  
  errorcode_ = value;
}
inline void GetOsdMapResponse::set_errorcode(::msg::OsdMapErrorCode value) {
  _internal_set_errorcode(value);
  // @@protoc_insertion_point(field_set:msg.GetOsdMapResponse.errorcode)
}

// int64 osdmapversion = 2;
inline void GetOsdMapResponse::clear_osdmapversion() {
  osdmapversion_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetOsdMapResponse::_internal_osdmapversion() const {
  return osdmapversion_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetOsdMapResponse::osdmapversion() const {
  // @@protoc_insertion_point(field_get:msg.GetOsdMapResponse.osdmapversion)
  return _internal_osdmapversion();
}
inline void GetOsdMapResponse::_internal_set_osdmapversion(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  osdmapversion_ = value;
}
inline void GetOsdMapResponse::set_osdmapversion(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_osdmapversion(value);
  // @@protoc_insertion_point(field_set:msg.GetOsdMapResponse.osdmapversion)
}

// repeated .msg.OsdDynamicInfo osds = 3;
inline int GetOsdMapResponse::_internal_osds_size() const {
  return osds_.size();
}
inline int GetOsdMapResponse::osds_size() const {
  return _internal_osds_size();
}
inline void GetOsdMapResponse::clear_osds() {
  osds_.Clear();
}
inline ::msg::OsdDynamicInfo* GetOsdMapResponse::mutable_osds(int index) {
  // @@protoc_insertion_point(field_mutable:msg.GetOsdMapResponse.osds)
  return osds_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::OsdDynamicInfo >*
GetOsdMapResponse::mutable_osds() {
  // @@protoc_insertion_point(field_mutable_list:msg.GetOsdMapResponse.osds)
  return &osds_;
}
inline const ::msg::OsdDynamicInfo& GetOsdMapResponse::_internal_osds(int index) const {
  return osds_.Get(index);
}
inline const ::msg::OsdDynamicInfo& GetOsdMapResponse::osds(int index) const {
  // @@protoc_insertion_point(field_get:msg.GetOsdMapResponse.osds)
  return _internal_osds(index);
}
inline ::msg::OsdDynamicInfo* GetOsdMapResponse::_internal_add_osds() {
  return osds_.Add();
}
inline ::msg::OsdDynamicInfo* GetOsdMapResponse::add_osds() {
  // @@protoc_insertion_point(field_add:msg.GetOsdMapResponse.osds)
  return _internal_add_osds();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::OsdDynamicInfo >&
GetOsdMapResponse::osds() const {
  // @@protoc_insertion_point(field_list:msg.GetOsdMapResponse.osds)
  return osds_;
}

// -------------------------------------------------------------------

// GetClusterMapRequest

// .msg.GetOsdMapRequest gom_request = 1;
inline bool GetClusterMapRequest::_internal_has_gom_request() const {
  return this != internal_default_instance() && gom_request_ != nullptr;
}
inline bool GetClusterMapRequest::has_gom_request() const {
  return _internal_has_gom_request();
}
inline void GetClusterMapRequest::clear_gom_request() {
  if (GetArena() == nullptr && gom_request_ != nullptr) {
    delete gom_request_;
  }
  gom_request_ = nullptr;
}
inline const ::msg::GetOsdMapRequest& GetClusterMapRequest::_internal_gom_request() const {
  const ::msg::GetOsdMapRequest* p = gom_request_;
  return p != nullptr ? *p : *reinterpret_cast<const ::msg::GetOsdMapRequest*>(
      &::msg::_GetOsdMapRequest_default_instance_);
}
inline const ::msg::GetOsdMapRequest& GetClusterMapRequest::gom_request() const {
  // @@protoc_insertion_point(field_get:msg.GetClusterMapRequest.gom_request)
  return _internal_gom_request();
}
inline void GetClusterMapRequest::unsafe_arena_set_allocated_gom_request(
    ::msg::GetOsdMapRequest* gom_request) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gom_request_);
  }
  gom_request_ = gom_request;
  if (gom_request) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.GetClusterMapRequest.gom_request)
}
inline ::msg::GetOsdMapRequest* GetClusterMapRequest::release_gom_request() {
  auto temp = unsafe_arena_release_gom_request();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::msg::GetOsdMapRequest* GetClusterMapRequest::unsafe_arena_release_gom_request() {
  // @@protoc_insertion_point(field_release:msg.GetClusterMapRequest.gom_request)
  
  ::msg::GetOsdMapRequest* temp = gom_request_;
  gom_request_ = nullptr;
  return temp;
}
inline ::msg::GetOsdMapRequest* GetClusterMapRequest::_internal_mutable_gom_request() {
  
  if (gom_request_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::GetOsdMapRequest>(GetArena());
    gom_request_ = p;
  }
  return gom_request_;
}
inline ::msg::GetOsdMapRequest* GetClusterMapRequest::mutable_gom_request() {
  // @@protoc_insertion_point(field_mutable:msg.GetClusterMapRequest.gom_request)
  return _internal_mutable_gom_request();
}
inline void GetClusterMapRequest::set_allocated_gom_request(::msg::GetOsdMapRequest* gom_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete gom_request_;
  }
  if (gom_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(gom_request);
    if (message_arena != submessage_arena) {
      gom_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gom_request, submessage_arena);
    }
    
  } else {
    
  }
  gom_request_ = gom_request;
  // @@protoc_insertion_point(field_set_allocated:msg.GetClusterMapRequest.gom_request)
}

// .msg.GetPgMapRequest gpm_request = 2;
inline bool GetClusterMapRequest::_internal_has_gpm_request() const {
  return this != internal_default_instance() && gpm_request_ != nullptr;
}
inline bool GetClusterMapRequest::has_gpm_request() const {
  return _internal_has_gpm_request();
}
inline void GetClusterMapRequest::clear_gpm_request() {
  if (GetArena() == nullptr && gpm_request_ != nullptr) {
    delete gpm_request_;
  }
  gpm_request_ = nullptr;
}
inline const ::msg::GetPgMapRequest& GetClusterMapRequest::_internal_gpm_request() const {
  const ::msg::GetPgMapRequest* p = gpm_request_;
  return p != nullptr ? *p : *reinterpret_cast<const ::msg::GetPgMapRequest*>(
      &::msg::_GetPgMapRequest_default_instance_);
}
inline const ::msg::GetPgMapRequest& GetClusterMapRequest::gpm_request() const {
  // @@protoc_insertion_point(field_get:msg.GetClusterMapRequest.gpm_request)
  return _internal_gpm_request();
}
inline void GetClusterMapRequest::unsafe_arena_set_allocated_gpm_request(
    ::msg::GetPgMapRequest* gpm_request) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gpm_request_);
  }
  gpm_request_ = gpm_request;
  if (gpm_request) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.GetClusterMapRequest.gpm_request)
}
inline ::msg::GetPgMapRequest* GetClusterMapRequest::release_gpm_request() {
  auto temp = unsafe_arena_release_gpm_request();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::msg::GetPgMapRequest* GetClusterMapRequest::unsafe_arena_release_gpm_request() {
  // @@protoc_insertion_point(field_release:msg.GetClusterMapRequest.gpm_request)
  
  ::msg::GetPgMapRequest* temp = gpm_request_;
  gpm_request_ = nullptr;
  return temp;
}
inline ::msg::GetPgMapRequest* GetClusterMapRequest::_internal_mutable_gpm_request() {
  
  if (gpm_request_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::GetPgMapRequest>(GetArena());
    gpm_request_ = p;
  }
  return gpm_request_;
}
inline ::msg::GetPgMapRequest* GetClusterMapRequest::mutable_gpm_request() {
  // @@protoc_insertion_point(field_mutable:msg.GetClusterMapRequest.gpm_request)
  return _internal_mutable_gpm_request();
}
inline void GetClusterMapRequest::set_allocated_gpm_request(::msg::GetPgMapRequest* gpm_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete gpm_request_;
  }
  if (gpm_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(gpm_request);
    if (message_arena != submessage_arena) {
      gpm_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gpm_request, submessage_arena);
    }
    
  } else {
    
  }
  gpm_request_ = gpm_request;
  // @@protoc_insertion_point(field_set_allocated:msg.GetClusterMapRequest.gpm_request)
}

// -------------------------------------------------------------------

// GetClusterMapResponse

// .msg.GetOsdMapResponse gom_response = 1;
inline bool GetClusterMapResponse::_internal_has_gom_response() const {
  return this != internal_default_instance() && gom_response_ != nullptr;
}
inline bool GetClusterMapResponse::has_gom_response() const {
  return _internal_has_gom_response();
}
inline void GetClusterMapResponse::clear_gom_response() {
  if (GetArena() == nullptr && gom_response_ != nullptr) {
    delete gom_response_;
  }
  gom_response_ = nullptr;
}
inline const ::msg::GetOsdMapResponse& GetClusterMapResponse::_internal_gom_response() const {
  const ::msg::GetOsdMapResponse* p = gom_response_;
  return p != nullptr ? *p : *reinterpret_cast<const ::msg::GetOsdMapResponse*>(
      &::msg::_GetOsdMapResponse_default_instance_);
}
inline const ::msg::GetOsdMapResponse& GetClusterMapResponse::gom_response() const {
  // @@protoc_insertion_point(field_get:msg.GetClusterMapResponse.gom_response)
  return _internal_gom_response();
}
inline void GetClusterMapResponse::unsafe_arena_set_allocated_gom_response(
    ::msg::GetOsdMapResponse* gom_response) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gom_response_);
  }
  gom_response_ = gom_response;
  if (gom_response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.GetClusterMapResponse.gom_response)
}
inline ::msg::GetOsdMapResponse* GetClusterMapResponse::release_gom_response() {
  auto temp = unsafe_arena_release_gom_response();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::msg::GetOsdMapResponse* GetClusterMapResponse::unsafe_arena_release_gom_response() {
  // @@protoc_insertion_point(field_release:msg.GetClusterMapResponse.gom_response)
  
  ::msg::GetOsdMapResponse* temp = gom_response_;
  gom_response_ = nullptr;
  return temp;
}
inline ::msg::GetOsdMapResponse* GetClusterMapResponse::_internal_mutable_gom_response() {
  
  if (gom_response_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::GetOsdMapResponse>(GetArena());
    gom_response_ = p;
  }
  return gom_response_;
}
inline ::msg::GetOsdMapResponse* GetClusterMapResponse::mutable_gom_response() {
  // @@protoc_insertion_point(field_mutable:msg.GetClusterMapResponse.gom_response)
  return _internal_mutable_gom_response();
}
inline void GetClusterMapResponse::set_allocated_gom_response(::msg::GetOsdMapResponse* gom_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete gom_response_;
  }
  if (gom_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(gom_response);
    if (message_arena != submessage_arena) {
      gom_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gom_response, submessage_arena);
    }
    
  } else {
    
  }
  gom_response_ = gom_response;
  // @@protoc_insertion_point(field_set_allocated:msg.GetClusterMapResponse.gom_response)
}

// .msg.GetPgMapResponse gpm_response = 2;
inline bool GetClusterMapResponse::_internal_has_gpm_response() const {
  return this != internal_default_instance() && gpm_response_ != nullptr;
}
inline bool GetClusterMapResponse::has_gpm_response() const {
  return _internal_has_gpm_response();
}
inline void GetClusterMapResponse::clear_gpm_response() {
  if (GetArena() == nullptr && gpm_response_ != nullptr) {
    delete gpm_response_;
  }
  gpm_response_ = nullptr;
}
inline const ::msg::GetPgMapResponse& GetClusterMapResponse::_internal_gpm_response() const {
  const ::msg::GetPgMapResponse* p = gpm_response_;
  return p != nullptr ? *p : *reinterpret_cast<const ::msg::GetPgMapResponse*>(
      &::msg::_GetPgMapResponse_default_instance_);
}
inline const ::msg::GetPgMapResponse& GetClusterMapResponse::gpm_response() const {
  // @@protoc_insertion_point(field_get:msg.GetClusterMapResponse.gpm_response)
  return _internal_gpm_response();
}
inline void GetClusterMapResponse::unsafe_arena_set_allocated_gpm_response(
    ::msg::GetPgMapResponse* gpm_response) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gpm_response_);
  }
  gpm_response_ = gpm_response;
  if (gpm_response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.GetClusterMapResponse.gpm_response)
}
inline ::msg::GetPgMapResponse* GetClusterMapResponse::release_gpm_response() {
  auto temp = unsafe_arena_release_gpm_response();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::msg::GetPgMapResponse* GetClusterMapResponse::unsafe_arena_release_gpm_response() {
  // @@protoc_insertion_point(field_release:msg.GetClusterMapResponse.gpm_response)
  
  ::msg::GetPgMapResponse* temp = gpm_response_;
  gpm_response_ = nullptr;
  return temp;
}
inline ::msg::GetPgMapResponse* GetClusterMapResponse::_internal_mutable_gpm_response() {
  
  if (gpm_response_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::GetPgMapResponse>(GetArena());
    gpm_response_ = p;
  }
  return gpm_response_;
}
inline ::msg::GetPgMapResponse* GetClusterMapResponse::mutable_gpm_response() {
  // @@protoc_insertion_point(field_mutable:msg.GetClusterMapResponse.gpm_response)
  return _internal_mutable_gpm_response();
}
inline void GetClusterMapResponse::set_allocated_gpm_response(::msg::GetPgMapResponse* gpm_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete gpm_response_;
  }
  if (gpm_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(gpm_response);
    if (message_arena != submessage_arena) {
      gpm_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gpm_response, submessage_arena);
    }
    
  } else {
    
  }
  gpm_response_ = gpm_response;
  // @@protoc_insertion_point(field_set_allocated:msg.GetClusterMapResponse.gpm_response)
}

// -------------------------------------------------------------------

// BootResponse

// bool ok = 1;
inline void BootResponse::clear_ok() {
  ok_ = false;
}
inline bool BootResponse::_internal_ok() const {
  return ok_;
}
inline bool BootResponse::ok() const {
  // @@protoc_insertion_point(field_get:msg.BootResponse.ok)
  return _internal_ok();
}
inline void BootResponse::_internal_set_ok(bool value) {
  
  ok_ = value;
}
inline void BootResponse::set_ok(bool value) {
  _internal_set_ok(value);
  // @@protoc_insertion_point(field_set:msg.BootResponse.ok)
}

// -------------------------------------------------------------------

// OsdStopRequest

// int32 id = 1;
inline void OsdStopRequest::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OsdStopRequest::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OsdStopRequest::id() const {
  // @@protoc_insertion_point(field_get:msg.OsdStopRequest.id)
  return _internal_id();
}
inline void OsdStopRequest::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void OsdStopRequest::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:msg.OsdStopRequest.id)
}

// -------------------------------------------------------------------

// OsdStopResponse

// bool ok = 1;
inline void OsdStopResponse::clear_ok() {
  ok_ = false;
}
inline bool OsdStopResponse::_internal_ok() const {
  return ok_;
}
inline bool OsdStopResponse::ok() const {
  // @@protoc_insertion_point(field_get:msg.OsdStopResponse.ok)
  return _internal_ok();
}
inline void OsdStopResponse::_internal_set_ok(bool value) {
  
  ok_ = value;
}
inline void OsdStopResponse::set_ok(bool value) {
  _internal_set_ok(value);
  // @@protoc_insertion_point(field_set:msg.OsdStopResponse.ok)
}

// -------------------------------------------------------------------

// HeartbeatRequest

// int32 id = 1;
inline void HeartbeatRequest::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HeartbeatRequest::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HeartbeatRequest::id() const {
  // @@protoc_insertion_point(field_get:msg.HeartbeatRequest.id)
  return _internal_id();
}
inline void HeartbeatRequest::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void HeartbeatRequest::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:msg.HeartbeatRequest.id)
}

// -------------------------------------------------------------------

// HeartbeatResponse

// bool ok = 1;
inline void HeartbeatResponse::clear_ok() {
  ok_ = false;
}
inline bool HeartbeatResponse::_internal_ok() const {
  return ok_;
}
inline bool HeartbeatResponse::ok() const {
  // @@protoc_insertion_point(field_get:msg.HeartbeatResponse.ok)
  return _internal_ok();
}
inline void HeartbeatResponse::_internal_set_ok(bool value) {
  
  ok_ = value;
}
inline void HeartbeatResponse::set_ok(bool value) {
  _internal_set_ok(value);
  // @@protoc_insertion_point(field_set:msg.HeartbeatResponse.ok)
}

// -------------------------------------------------------------------

// ImageInfo

// string poolname = 1;
inline void ImageInfo::clear_poolname() {
  poolname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ImageInfo::poolname() const {
  // @@protoc_insertion_point(field_get:msg.ImageInfo.poolname)
  return _internal_poolname();
}
inline void ImageInfo::set_poolname(const std::string& value) {
  _internal_set_poolname(value);
  // @@protoc_insertion_point(field_set:msg.ImageInfo.poolname)
}
inline std::string* ImageInfo::mutable_poolname() {
  // @@protoc_insertion_point(field_mutable:msg.ImageInfo.poolname)
  return _internal_mutable_poolname();
}
inline const std::string& ImageInfo::_internal_poolname() const {
  return poolname_.Get();
}
inline void ImageInfo::_internal_set_poolname(const std::string& value) {
  
  poolname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ImageInfo::set_poolname(std::string&& value) {
  
  poolname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:msg.ImageInfo.poolname)
}
inline void ImageInfo::set_poolname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  poolname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:msg.ImageInfo.poolname)
}
inline void ImageInfo::set_poolname(const char* value,
    size_t size) {
  
  poolname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:msg.ImageInfo.poolname)
}
inline std::string* ImageInfo::_internal_mutable_poolname() {
  
  return poolname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ImageInfo::release_poolname() {
  // @@protoc_insertion_point(field_release:msg.ImageInfo.poolname)
  return poolname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ImageInfo::set_allocated_poolname(std::string* poolname) {
  if (poolname != nullptr) {
    
  } else {
    
  }
  poolname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), poolname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:msg.ImageInfo.poolname)
}
inline std::string* ImageInfo::unsafe_arena_release_poolname() {
  // @@protoc_insertion_point(field_unsafe_arena_release:msg.ImageInfo.poolname)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return poolname_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ImageInfo::unsafe_arena_set_allocated_poolname(
    std::string* poolname) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (poolname != nullptr) {
    
  } else {
    
  }
  poolname_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      poolname, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.ImageInfo.poolname)
}

// string imagename = 2;
inline void ImageInfo::clear_imagename() {
  imagename_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ImageInfo::imagename() const {
  // @@protoc_insertion_point(field_get:msg.ImageInfo.imagename)
  return _internal_imagename();
}
inline void ImageInfo::set_imagename(const std::string& value) {
  _internal_set_imagename(value);
  // @@protoc_insertion_point(field_set:msg.ImageInfo.imagename)
}
inline std::string* ImageInfo::mutable_imagename() {
  // @@protoc_insertion_point(field_mutable:msg.ImageInfo.imagename)
  return _internal_mutable_imagename();
}
inline const std::string& ImageInfo::_internal_imagename() const {
  return imagename_.Get();
}
inline void ImageInfo::_internal_set_imagename(const std::string& value) {
  
  imagename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ImageInfo::set_imagename(std::string&& value) {
  
  imagename_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:msg.ImageInfo.imagename)
}
inline void ImageInfo::set_imagename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  imagename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:msg.ImageInfo.imagename)
}
inline void ImageInfo::set_imagename(const char* value,
    size_t size) {
  
  imagename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:msg.ImageInfo.imagename)
}
inline std::string* ImageInfo::_internal_mutable_imagename() {
  
  return imagename_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ImageInfo::release_imagename() {
  // @@protoc_insertion_point(field_release:msg.ImageInfo.imagename)
  return imagename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ImageInfo::set_allocated_imagename(std::string* imagename) {
  if (imagename != nullptr) {
    
  } else {
    
  }
  imagename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), imagename,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:msg.ImageInfo.imagename)
}
inline std::string* ImageInfo::unsafe_arena_release_imagename() {
  // @@protoc_insertion_point(field_unsafe_arena_release:msg.ImageInfo.imagename)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return imagename_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ImageInfo::unsafe_arena_set_allocated_imagename(
    std::string* imagename) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (imagename != nullptr) {
    
  } else {
    
  }
  imagename_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      imagename, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.ImageInfo.imagename)
}

// int64 size = 3;
inline void ImageInfo::clear_size() {
  size_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ImageInfo::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ImageInfo::size() const {
  // @@protoc_insertion_point(field_get:msg.ImageInfo.size)
  return _internal_size();
}
inline void ImageInfo::_internal_set_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  size_ = value;
}
inline void ImageInfo::set_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:msg.ImageInfo.size)
}

// int64 object_size = 4;
inline void ImageInfo::clear_object_size() {
  object_size_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ImageInfo::_internal_object_size() const {
  return object_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ImageInfo::object_size() const {
  // @@protoc_insertion_point(field_get:msg.ImageInfo.object_size)
  return _internal_object_size();
}
inline void ImageInfo::_internal_set_object_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  object_size_ = value;
}
inline void ImageInfo::set_object_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_object_size(value);
  // @@protoc_insertion_point(field_set:msg.ImageInfo.object_size)
}

// -------------------------------------------------------------------

// CreateImageRequest

// string poolname = 1;
inline void CreateImageRequest::clear_poolname() {
  poolname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CreateImageRequest::poolname() const {
  // @@protoc_insertion_point(field_get:msg.CreateImageRequest.poolname)
  return _internal_poolname();
}
inline void CreateImageRequest::set_poolname(const std::string& value) {
  _internal_set_poolname(value);
  // @@protoc_insertion_point(field_set:msg.CreateImageRequest.poolname)
}
inline std::string* CreateImageRequest::mutable_poolname() {
  // @@protoc_insertion_point(field_mutable:msg.CreateImageRequest.poolname)
  return _internal_mutable_poolname();
}
inline const std::string& CreateImageRequest::_internal_poolname() const {
  return poolname_.Get();
}
inline void CreateImageRequest::_internal_set_poolname(const std::string& value) {
  
  poolname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CreateImageRequest::set_poolname(std::string&& value) {
  
  poolname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:msg.CreateImageRequest.poolname)
}
inline void CreateImageRequest::set_poolname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  poolname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:msg.CreateImageRequest.poolname)
}
inline void CreateImageRequest::set_poolname(const char* value,
    size_t size) {
  
  poolname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:msg.CreateImageRequest.poolname)
}
inline std::string* CreateImageRequest::_internal_mutable_poolname() {
  
  return poolname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CreateImageRequest::release_poolname() {
  // @@protoc_insertion_point(field_release:msg.CreateImageRequest.poolname)
  return poolname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateImageRequest::set_allocated_poolname(std::string* poolname) {
  if (poolname != nullptr) {
    
  } else {
    
  }
  poolname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), poolname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:msg.CreateImageRequest.poolname)
}
inline std::string* CreateImageRequest::unsafe_arena_release_poolname() {
  // @@protoc_insertion_point(field_unsafe_arena_release:msg.CreateImageRequest.poolname)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return poolname_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CreateImageRequest::unsafe_arena_set_allocated_poolname(
    std::string* poolname) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (poolname != nullptr) {
    
  } else {
    
  }
  poolname_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      poolname, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CreateImageRequest.poolname)
}

// string imagename = 2;
inline void CreateImageRequest::clear_imagename() {
  imagename_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CreateImageRequest::imagename() const {
  // @@protoc_insertion_point(field_get:msg.CreateImageRequest.imagename)
  return _internal_imagename();
}
inline void CreateImageRequest::set_imagename(const std::string& value) {
  _internal_set_imagename(value);
  // @@protoc_insertion_point(field_set:msg.CreateImageRequest.imagename)
}
inline std::string* CreateImageRequest::mutable_imagename() {
  // @@protoc_insertion_point(field_mutable:msg.CreateImageRequest.imagename)
  return _internal_mutable_imagename();
}
inline const std::string& CreateImageRequest::_internal_imagename() const {
  return imagename_.Get();
}
inline void CreateImageRequest::_internal_set_imagename(const std::string& value) {
  
  imagename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CreateImageRequest::set_imagename(std::string&& value) {
  
  imagename_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:msg.CreateImageRequest.imagename)
}
inline void CreateImageRequest::set_imagename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  imagename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:msg.CreateImageRequest.imagename)
}
inline void CreateImageRequest::set_imagename(const char* value,
    size_t size) {
  
  imagename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:msg.CreateImageRequest.imagename)
}
inline std::string* CreateImageRequest::_internal_mutable_imagename() {
  
  return imagename_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CreateImageRequest::release_imagename() {
  // @@protoc_insertion_point(field_release:msg.CreateImageRequest.imagename)
  return imagename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateImageRequest::set_allocated_imagename(std::string* imagename) {
  if (imagename != nullptr) {
    
  } else {
    
  }
  imagename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), imagename,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:msg.CreateImageRequest.imagename)
}
inline std::string* CreateImageRequest::unsafe_arena_release_imagename() {
  // @@protoc_insertion_point(field_unsafe_arena_release:msg.CreateImageRequest.imagename)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return imagename_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CreateImageRequest::unsafe_arena_set_allocated_imagename(
    std::string* imagename) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (imagename != nullptr) {
    
  } else {
    
  }
  imagename_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      imagename, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CreateImageRequest.imagename)
}

// int64 size = 3;
inline void CreateImageRequest::clear_size() {
  size_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CreateImageRequest::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CreateImageRequest::size() const {
  // @@protoc_insertion_point(field_get:msg.CreateImageRequest.size)
  return _internal_size();
}
inline void CreateImageRequest::_internal_set_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  size_ = value;
}
inline void CreateImageRequest::set_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:msg.CreateImageRequest.size)
}

// int64 object_size = 4;
inline void CreateImageRequest::clear_object_size() {
  object_size_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CreateImageRequest::_internal_object_size() const {
  return object_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CreateImageRequest::object_size() const {
  // @@protoc_insertion_point(field_get:msg.CreateImageRequest.object_size)
  return _internal_object_size();
}
inline void CreateImageRequest::_internal_set_object_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  object_size_ = value;
}
inline void CreateImageRequest::set_object_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_object_size(value);
  // @@protoc_insertion_point(field_set:msg.CreateImageRequest.object_size)
}

// -------------------------------------------------------------------

// CreateImageResponse

// .msg.CreateImageErrorCode errorcode = 1;
inline void CreateImageResponse::clear_errorcode() {
  errorcode_ = 0;
}
inline ::msg::CreateImageErrorCode CreateImageResponse::_internal_errorcode() const {
  return static_cast< ::msg::CreateImageErrorCode >(errorcode_);
}
inline ::msg::CreateImageErrorCode CreateImageResponse::errorcode() const {
  // @@protoc_insertion_point(field_get:msg.CreateImageResponse.errorcode)
  return _internal_errorcode();
}
inline void CreateImageResponse::_internal_set_errorcode(::msg::CreateImageErrorCode value) {
  
  errorcode_ = value;
}
inline void CreateImageResponse::set_errorcode(::msg::CreateImageErrorCode value) {
  _internal_set_errorcode(value);
  // @@protoc_insertion_point(field_set:msg.CreateImageResponse.errorcode)
}

// .msg.ImageInfo ImageInfo = 2;
inline bool CreateImageResponse::_internal_has_imageinfo() const {
  return this != internal_default_instance() && imageinfo_ != nullptr;
}
inline bool CreateImageResponse::has_imageinfo() const {
  return _internal_has_imageinfo();
}
inline void CreateImageResponse::clear_imageinfo() {
  if (GetArena() == nullptr && imageinfo_ != nullptr) {
    delete imageinfo_;
  }
  imageinfo_ = nullptr;
}
inline const ::msg::ImageInfo& CreateImageResponse::_internal_imageinfo() const {
  const ::msg::ImageInfo* p = imageinfo_;
  return p != nullptr ? *p : *reinterpret_cast<const ::msg::ImageInfo*>(
      &::msg::_ImageInfo_default_instance_);
}
inline const ::msg::ImageInfo& CreateImageResponse::imageinfo() const {
  // @@protoc_insertion_point(field_get:msg.CreateImageResponse.ImageInfo)
  return _internal_imageinfo();
}
inline void CreateImageResponse::unsafe_arena_set_allocated_imageinfo(
    ::msg::ImageInfo* imageinfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(imageinfo_);
  }
  imageinfo_ = imageinfo;
  if (imageinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CreateImageResponse.ImageInfo)
}
inline ::msg::ImageInfo* CreateImageResponse::release_imageinfo() {
  auto temp = unsafe_arena_release_imageinfo();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::msg::ImageInfo* CreateImageResponse::unsafe_arena_release_imageinfo() {
  // @@protoc_insertion_point(field_release:msg.CreateImageResponse.ImageInfo)
  
  ::msg::ImageInfo* temp = imageinfo_;
  imageinfo_ = nullptr;
  return temp;
}
inline ::msg::ImageInfo* CreateImageResponse::_internal_mutable_imageinfo() {
  
  if (imageinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::ImageInfo>(GetArena());
    imageinfo_ = p;
  }
  return imageinfo_;
}
inline ::msg::ImageInfo* CreateImageResponse::mutable_imageinfo() {
  // @@protoc_insertion_point(field_mutable:msg.CreateImageResponse.ImageInfo)
  return _internal_mutable_imageinfo();
}
inline void CreateImageResponse::set_allocated_imageinfo(::msg::ImageInfo* imageinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete imageinfo_;
  }
  if (imageinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(imageinfo);
    if (message_arena != submessage_arena) {
      imageinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, imageinfo, submessage_arena);
    }
    
  } else {
    
  }
  imageinfo_ = imageinfo;
  // @@protoc_insertion_point(field_set_allocated:msg.CreateImageResponse.ImageInfo)
}

// -------------------------------------------------------------------

// RemoveImageRequest

// string poolname = 1;
inline void RemoveImageRequest::clear_poolname() {
  poolname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RemoveImageRequest::poolname() const {
  // @@protoc_insertion_point(field_get:msg.RemoveImageRequest.poolname)
  return _internal_poolname();
}
inline void RemoveImageRequest::set_poolname(const std::string& value) {
  _internal_set_poolname(value);
  // @@protoc_insertion_point(field_set:msg.RemoveImageRequest.poolname)
}
inline std::string* RemoveImageRequest::mutable_poolname() {
  // @@protoc_insertion_point(field_mutable:msg.RemoveImageRequest.poolname)
  return _internal_mutable_poolname();
}
inline const std::string& RemoveImageRequest::_internal_poolname() const {
  return poolname_.Get();
}
inline void RemoveImageRequest::_internal_set_poolname(const std::string& value) {
  
  poolname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RemoveImageRequest::set_poolname(std::string&& value) {
  
  poolname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:msg.RemoveImageRequest.poolname)
}
inline void RemoveImageRequest::set_poolname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  poolname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:msg.RemoveImageRequest.poolname)
}
inline void RemoveImageRequest::set_poolname(const char* value,
    size_t size) {
  
  poolname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:msg.RemoveImageRequest.poolname)
}
inline std::string* RemoveImageRequest::_internal_mutable_poolname() {
  
  return poolname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RemoveImageRequest::release_poolname() {
  // @@protoc_insertion_point(field_release:msg.RemoveImageRequest.poolname)
  return poolname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RemoveImageRequest::set_allocated_poolname(std::string* poolname) {
  if (poolname != nullptr) {
    
  } else {
    
  }
  poolname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), poolname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:msg.RemoveImageRequest.poolname)
}
inline std::string* RemoveImageRequest::unsafe_arena_release_poolname() {
  // @@protoc_insertion_point(field_unsafe_arena_release:msg.RemoveImageRequest.poolname)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return poolname_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RemoveImageRequest::unsafe_arena_set_allocated_poolname(
    std::string* poolname) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (poolname != nullptr) {
    
  } else {
    
  }
  poolname_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      poolname, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.RemoveImageRequest.poolname)
}

// string imagename = 2;
inline void RemoveImageRequest::clear_imagename() {
  imagename_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RemoveImageRequest::imagename() const {
  // @@protoc_insertion_point(field_get:msg.RemoveImageRequest.imagename)
  return _internal_imagename();
}
inline void RemoveImageRequest::set_imagename(const std::string& value) {
  _internal_set_imagename(value);
  // @@protoc_insertion_point(field_set:msg.RemoveImageRequest.imagename)
}
inline std::string* RemoveImageRequest::mutable_imagename() {
  // @@protoc_insertion_point(field_mutable:msg.RemoveImageRequest.imagename)
  return _internal_mutable_imagename();
}
inline const std::string& RemoveImageRequest::_internal_imagename() const {
  return imagename_.Get();
}
inline void RemoveImageRequest::_internal_set_imagename(const std::string& value) {
  
  imagename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RemoveImageRequest::set_imagename(std::string&& value) {
  
  imagename_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:msg.RemoveImageRequest.imagename)
}
inline void RemoveImageRequest::set_imagename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  imagename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:msg.RemoveImageRequest.imagename)
}
inline void RemoveImageRequest::set_imagename(const char* value,
    size_t size) {
  
  imagename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:msg.RemoveImageRequest.imagename)
}
inline std::string* RemoveImageRequest::_internal_mutable_imagename() {
  
  return imagename_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RemoveImageRequest::release_imagename() {
  // @@protoc_insertion_point(field_release:msg.RemoveImageRequest.imagename)
  return imagename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RemoveImageRequest::set_allocated_imagename(std::string* imagename) {
  if (imagename != nullptr) {
    
  } else {
    
  }
  imagename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), imagename,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:msg.RemoveImageRequest.imagename)
}
inline std::string* RemoveImageRequest::unsafe_arena_release_imagename() {
  // @@protoc_insertion_point(field_unsafe_arena_release:msg.RemoveImageRequest.imagename)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return imagename_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RemoveImageRequest::unsafe_arena_set_allocated_imagename(
    std::string* imagename) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (imagename != nullptr) {
    
  } else {
    
  }
  imagename_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      imagename, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.RemoveImageRequest.imagename)
}

// -------------------------------------------------------------------

// RemoveImageResponse

// .msg.RemoveImageErrorCode errorcode = 1;
inline void RemoveImageResponse::clear_errorcode() {
  errorcode_ = 0;
}
inline ::msg::RemoveImageErrorCode RemoveImageResponse::_internal_errorcode() const {
  return static_cast< ::msg::RemoveImageErrorCode >(errorcode_);
}
inline ::msg::RemoveImageErrorCode RemoveImageResponse::errorcode() const {
  // @@protoc_insertion_point(field_get:msg.RemoveImageResponse.errorcode)
  return _internal_errorcode();
}
inline void RemoveImageResponse::_internal_set_errorcode(::msg::RemoveImageErrorCode value) {
  
  errorcode_ = value;
}
inline void RemoveImageResponse::set_errorcode(::msg::RemoveImageErrorCode value) {
  _internal_set_errorcode(value);
  // @@protoc_insertion_point(field_set:msg.RemoveImageResponse.errorcode)
}

// .msg.ImageInfo ImageInfo = 2;
inline bool RemoveImageResponse::_internal_has_imageinfo() const {
  return this != internal_default_instance() && imageinfo_ != nullptr;
}
inline bool RemoveImageResponse::has_imageinfo() const {
  return _internal_has_imageinfo();
}
inline void RemoveImageResponse::clear_imageinfo() {
  if (GetArena() == nullptr && imageinfo_ != nullptr) {
    delete imageinfo_;
  }
  imageinfo_ = nullptr;
}
inline const ::msg::ImageInfo& RemoveImageResponse::_internal_imageinfo() const {
  const ::msg::ImageInfo* p = imageinfo_;
  return p != nullptr ? *p : *reinterpret_cast<const ::msg::ImageInfo*>(
      &::msg::_ImageInfo_default_instance_);
}
inline const ::msg::ImageInfo& RemoveImageResponse::imageinfo() const {
  // @@protoc_insertion_point(field_get:msg.RemoveImageResponse.ImageInfo)
  return _internal_imageinfo();
}
inline void RemoveImageResponse::unsafe_arena_set_allocated_imageinfo(
    ::msg::ImageInfo* imageinfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(imageinfo_);
  }
  imageinfo_ = imageinfo;
  if (imageinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.RemoveImageResponse.ImageInfo)
}
inline ::msg::ImageInfo* RemoveImageResponse::release_imageinfo() {
  auto temp = unsafe_arena_release_imageinfo();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::msg::ImageInfo* RemoveImageResponse::unsafe_arena_release_imageinfo() {
  // @@protoc_insertion_point(field_release:msg.RemoveImageResponse.ImageInfo)
  
  ::msg::ImageInfo* temp = imageinfo_;
  imageinfo_ = nullptr;
  return temp;
}
inline ::msg::ImageInfo* RemoveImageResponse::_internal_mutable_imageinfo() {
  
  if (imageinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::ImageInfo>(GetArena());
    imageinfo_ = p;
  }
  return imageinfo_;
}
inline ::msg::ImageInfo* RemoveImageResponse::mutable_imageinfo() {
  // @@protoc_insertion_point(field_mutable:msg.RemoveImageResponse.ImageInfo)
  return _internal_mutable_imageinfo();
}
inline void RemoveImageResponse::set_allocated_imageinfo(::msg::ImageInfo* imageinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete imageinfo_;
  }
  if (imageinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(imageinfo);
    if (message_arena != submessage_arena) {
      imageinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, imageinfo, submessage_arena);
    }
    
  } else {
    
  }
  imageinfo_ = imageinfo;
  // @@protoc_insertion_point(field_set_allocated:msg.RemoveImageResponse.ImageInfo)
}

// -------------------------------------------------------------------

// ResizeImageRequest

// string poolname = 1;
inline void ResizeImageRequest::clear_poolname() {
  poolname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ResizeImageRequest::poolname() const {
  // @@protoc_insertion_point(field_get:msg.ResizeImageRequest.poolname)
  return _internal_poolname();
}
inline void ResizeImageRequest::set_poolname(const std::string& value) {
  _internal_set_poolname(value);
  // @@protoc_insertion_point(field_set:msg.ResizeImageRequest.poolname)
}
inline std::string* ResizeImageRequest::mutable_poolname() {
  // @@protoc_insertion_point(field_mutable:msg.ResizeImageRequest.poolname)
  return _internal_mutable_poolname();
}
inline const std::string& ResizeImageRequest::_internal_poolname() const {
  return poolname_.Get();
}
inline void ResizeImageRequest::_internal_set_poolname(const std::string& value) {
  
  poolname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ResizeImageRequest::set_poolname(std::string&& value) {
  
  poolname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:msg.ResizeImageRequest.poolname)
}
inline void ResizeImageRequest::set_poolname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  poolname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:msg.ResizeImageRequest.poolname)
}
inline void ResizeImageRequest::set_poolname(const char* value,
    size_t size) {
  
  poolname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:msg.ResizeImageRequest.poolname)
}
inline std::string* ResizeImageRequest::_internal_mutable_poolname() {
  
  return poolname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ResizeImageRequest::release_poolname() {
  // @@protoc_insertion_point(field_release:msg.ResizeImageRequest.poolname)
  return poolname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ResizeImageRequest::set_allocated_poolname(std::string* poolname) {
  if (poolname != nullptr) {
    
  } else {
    
  }
  poolname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), poolname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:msg.ResizeImageRequest.poolname)
}
inline std::string* ResizeImageRequest::unsafe_arena_release_poolname() {
  // @@protoc_insertion_point(field_unsafe_arena_release:msg.ResizeImageRequest.poolname)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return poolname_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ResizeImageRequest::unsafe_arena_set_allocated_poolname(
    std::string* poolname) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (poolname != nullptr) {
    
  } else {
    
  }
  poolname_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      poolname, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.ResizeImageRequest.poolname)
}

// string imagename = 2;
inline void ResizeImageRequest::clear_imagename() {
  imagename_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ResizeImageRequest::imagename() const {
  // @@protoc_insertion_point(field_get:msg.ResizeImageRequest.imagename)
  return _internal_imagename();
}
inline void ResizeImageRequest::set_imagename(const std::string& value) {
  _internal_set_imagename(value);
  // @@protoc_insertion_point(field_set:msg.ResizeImageRequest.imagename)
}
inline std::string* ResizeImageRequest::mutable_imagename() {
  // @@protoc_insertion_point(field_mutable:msg.ResizeImageRequest.imagename)
  return _internal_mutable_imagename();
}
inline const std::string& ResizeImageRequest::_internal_imagename() const {
  return imagename_.Get();
}
inline void ResizeImageRequest::_internal_set_imagename(const std::string& value) {
  
  imagename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ResizeImageRequest::set_imagename(std::string&& value) {
  
  imagename_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:msg.ResizeImageRequest.imagename)
}
inline void ResizeImageRequest::set_imagename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  imagename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:msg.ResizeImageRequest.imagename)
}
inline void ResizeImageRequest::set_imagename(const char* value,
    size_t size) {
  
  imagename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:msg.ResizeImageRequest.imagename)
}
inline std::string* ResizeImageRequest::_internal_mutable_imagename() {
  
  return imagename_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ResizeImageRequest::release_imagename() {
  // @@protoc_insertion_point(field_release:msg.ResizeImageRequest.imagename)
  return imagename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ResizeImageRequest::set_allocated_imagename(std::string* imagename) {
  if (imagename != nullptr) {
    
  } else {
    
  }
  imagename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), imagename,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:msg.ResizeImageRequest.imagename)
}
inline std::string* ResizeImageRequest::unsafe_arena_release_imagename() {
  // @@protoc_insertion_point(field_unsafe_arena_release:msg.ResizeImageRequest.imagename)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return imagename_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ResizeImageRequest::unsafe_arena_set_allocated_imagename(
    std::string* imagename) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (imagename != nullptr) {
    
  } else {
    
  }
  imagename_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      imagename, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.ResizeImageRequest.imagename)
}

// int64 size = 3;
inline void ResizeImageRequest::clear_size() {
  size_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ResizeImageRequest::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ResizeImageRequest::size() const {
  // @@protoc_insertion_point(field_get:msg.ResizeImageRequest.size)
  return _internal_size();
}
inline void ResizeImageRequest::_internal_set_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  size_ = value;
}
inline void ResizeImageRequest::set_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:msg.ResizeImageRequest.size)
}

// -------------------------------------------------------------------

// ResizeImageResponse

// .msg.ResizeImageErrorCode errorcode = 1;
inline void ResizeImageResponse::clear_errorcode() {
  errorcode_ = 0;
}
inline ::msg::ResizeImageErrorCode ResizeImageResponse::_internal_errorcode() const {
  return static_cast< ::msg::ResizeImageErrorCode >(errorcode_);
}
inline ::msg::ResizeImageErrorCode ResizeImageResponse::errorcode() const {
  // @@protoc_insertion_point(field_get:msg.ResizeImageResponse.errorcode)
  return _internal_errorcode();
}
inline void ResizeImageResponse::_internal_set_errorcode(::msg::ResizeImageErrorCode value) {
  
  errorcode_ = value;
}
inline void ResizeImageResponse::set_errorcode(::msg::ResizeImageErrorCode value) {
  _internal_set_errorcode(value);
  // @@protoc_insertion_point(field_set:msg.ResizeImageResponse.errorcode)
}

// .msg.ImageInfo ImageInfo = 2;
inline bool ResizeImageResponse::_internal_has_imageinfo() const {
  return this != internal_default_instance() && imageinfo_ != nullptr;
}
inline bool ResizeImageResponse::has_imageinfo() const {
  return _internal_has_imageinfo();
}
inline void ResizeImageResponse::clear_imageinfo() {
  if (GetArena() == nullptr && imageinfo_ != nullptr) {
    delete imageinfo_;
  }
  imageinfo_ = nullptr;
}
inline const ::msg::ImageInfo& ResizeImageResponse::_internal_imageinfo() const {
  const ::msg::ImageInfo* p = imageinfo_;
  return p != nullptr ? *p : *reinterpret_cast<const ::msg::ImageInfo*>(
      &::msg::_ImageInfo_default_instance_);
}
inline const ::msg::ImageInfo& ResizeImageResponse::imageinfo() const {
  // @@protoc_insertion_point(field_get:msg.ResizeImageResponse.ImageInfo)
  return _internal_imageinfo();
}
inline void ResizeImageResponse::unsafe_arena_set_allocated_imageinfo(
    ::msg::ImageInfo* imageinfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(imageinfo_);
  }
  imageinfo_ = imageinfo;
  if (imageinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.ResizeImageResponse.ImageInfo)
}
inline ::msg::ImageInfo* ResizeImageResponse::release_imageinfo() {
  auto temp = unsafe_arena_release_imageinfo();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::msg::ImageInfo* ResizeImageResponse::unsafe_arena_release_imageinfo() {
  // @@protoc_insertion_point(field_release:msg.ResizeImageResponse.ImageInfo)
  
  ::msg::ImageInfo* temp = imageinfo_;
  imageinfo_ = nullptr;
  return temp;
}
inline ::msg::ImageInfo* ResizeImageResponse::_internal_mutable_imageinfo() {
  
  if (imageinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::ImageInfo>(GetArena());
    imageinfo_ = p;
  }
  return imageinfo_;
}
inline ::msg::ImageInfo* ResizeImageResponse::mutable_imageinfo() {
  // @@protoc_insertion_point(field_mutable:msg.ResizeImageResponse.ImageInfo)
  return _internal_mutable_imageinfo();
}
inline void ResizeImageResponse::set_allocated_imageinfo(::msg::ImageInfo* imageinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete imageinfo_;
  }
  if (imageinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(imageinfo);
    if (message_arena != submessage_arena) {
      imageinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, imageinfo, submessage_arena);
    }
    
  } else {
    
  }
  imageinfo_ = imageinfo;
  // @@protoc_insertion_point(field_set_allocated:msg.ResizeImageResponse.ImageInfo)
}

// -------------------------------------------------------------------

// GetImageInfoRequest

// string poolname = 1;
inline void GetImageInfoRequest::clear_poolname() {
  poolname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetImageInfoRequest::poolname() const {
  // @@protoc_insertion_point(field_get:msg.GetImageInfoRequest.poolname)
  return _internal_poolname();
}
inline void GetImageInfoRequest::set_poolname(const std::string& value) {
  _internal_set_poolname(value);
  // @@protoc_insertion_point(field_set:msg.GetImageInfoRequest.poolname)
}
inline std::string* GetImageInfoRequest::mutable_poolname() {
  // @@protoc_insertion_point(field_mutable:msg.GetImageInfoRequest.poolname)
  return _internal_mutable_poolname();
}
inline const std::string& GetImageInfoRequest::_internal_poolname() const {
  return poolname_.Get();
}
inline void GetImageInfoRequest::_internal_set_poolname(const std::string& value) {
  
  poolname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetImageInfoRequest::set_poolname(std::string&& value) {
  
  poolname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:msg.GetImageInfoRequest.poolname)
}
inline void GetImageInfoRequest::set_poolname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  poolname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:msg.GetImageInfoRequest.poolname)
}
inline void GetImageInfoRequest::set_poolname(const char* value,
    size_t size) {
  
  poolname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:msg.GetImageInfoRequest.poolname)
}
inline std::string* GetImageInfoRequest::_internal_mutable_poolname() {
  
  return poolname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetImageInfoRequest::release_poolname() {
  // @@protoc_insertion_point(field_release:msg.GetImageInfoRequest.poolname)
  return poolname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetImageInfoRequest::set_allocated_poolname(std::string* poolname) {
  if (poolname != nullptr) {
    
  } else {
    
  }
  poolname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), poolname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:msg.GetImageInfoRequest.poolname)
}
inline std::string* GetImageInfoRequest::unsafe_arena_release_poolname() {
  // @@protoc_insertion_point(field_unsafe_arena_release:msg.GetImageInfoRequest.poolname)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return poolname_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetImageInfoRequest::unsafe_arena_set_allocated_poolname(
    std::string* poolname) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (poolname != nullptr) {
    
  } else {
    
  }
  poolname_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      poolname, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.GetImageInfoRequest.poolname)
}

// string imagename = 2;
inline void GetImageInfoRequest::clear_imagename() {
  imagename_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetImageInfoRequest::imagename() const {
  // @@protoc_insertion_point(field_get:msg.GetImageInfoRequest.imagename)
  return _internal_imagename();
}
inline void GetImageInfoRequest::set_imagename(const std::string& value) {
  _internal_set_imagename(value);
  // @@protoc_insertion_point(field_set:msg.GetImageInfoRequest.imagename)
}
inline std::string* GetImageInfoRequest::mutable_imagename() {
  // @@protoc_insertion_point(field_mutable:msg.GetImageInfoRequest.imagename)
  return _internal_mutable_imagename();
}
inline const std::string& GetImageInfoRequest::_internal_imagename() const {
  return imagename_.Get();
}
inline void GetImageInfoRequest::_internal_set_imagename(const std::string& value) {
  
  imagename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetImageInfoRequest::set_imagename(std::string&& value) {
  
  imagename_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:msg.GetImageInfoRequest.imagename)
}
inline void GetImageInfoRequest::set_imagename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  imagename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:msg.GetImageInfoRequest.imagename)
}
inline void GetImageInfoRequest::set_imagename(const char* value,
    size_t size) {
  
  imagename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:msg.GetImageInfoRequest.imagename)
}
inline std::string* GetImageInfoRequest::_internal_mutable_imagename() {
  
  return imagename_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetImageInfoRequest::release_imagename() {
  // @@protoc_insertion_point(field_release:msg.GetImageInfoRequest.imagename)
  return imagename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetImageInfoRequest::set_allocated_imagename(std::string* imagename) {
  if (imagename != nullptr) {
    
  } else {
    
  }
  imagename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), imagename,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:msg.GetImageInfoRequest.imagename)
}
inline std::string* GetImageInfoRequest::unsafe_arena_release_imagename() {
  // @@protoc_insertion_point(field_unsafe_arena_release:msg.GetImageInfoRequest.imagename)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return imagename_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetImageInfoRequest::unsafe_arena_set_allocated_imagename(
    std::string* imagename) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (imagename != nullptr) {
    
  } else {
    
  }
  imagename_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      imagename, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.GetImageInfoRequest.imagename)
}

// -------------------------------------------------------------------

// GetImageInfoResponse

// .msg.GetImageErrorCode errorcode = 1;
inline void GetImageInfoResponse::clear_errorcode() {
  errorcode_ = 0;
}
inline ::msg::GetImageErrorCode GetImageInfoResponse::_internal_errorcode() const {
  return static_cast< ::msg::GetImageErrorCode >(errorcode_);
}
inline ::msg::GetImageErrorCode GetImageInfoResponse::errorcode() const {
  // @@protoc_insertion_point(field_get:msg.GetImageInfoResponse.errorcode)
  return _internal_errorcode();
}
inline void GetImageInfoResponse::_internal_set_errorcode(::msg::GetImageErrorCode value) {
  
  errorcode_ = value;
}
inline void GetImageInfoResponse::set_errorcode(::msg::GetImageErrorCode value) {
  _internal_set_errorcode(value);
  // @@protoc_insertion_point(field_set:msg.GetImageInfoResponse.errorcode)
}

// .msg.ImageInfo ImageInfo = 2;
inline bool GetImageInfoResponse::_internal_has_imageinfo() const {
  return this != internal_default_instance() && imageinfo_ != nullptr;
}
inline bool GetImageInfoResponse::has_imageinfo() const {
  return _internal_has_imageinfo();
}
inline void GetImageInfoResponse::clear_imageinfo() {
  if (GetArena() == nullptr && imageinfo_ != nullptr) {
    delete imageinfo_;
  }
  imageinfo_ = nullptr;
}
inline const ::msg::ImageInfo& GetImageInfoResponse::_internal_imageinfo() const {
  const ::msg::ImageInfo* p = imageinfo_;
  return p != nullptr ? *p : *reinterpret_cast<const ::msg::ImageInfo*>(
      &::msg::_ImageInfo_default_instance_);
}
inline const ::msg::ImageInfo& GetImageInfoResponse::imageinfo() const {
  // @@protoc_insertion_point(field_get:msg.GetImageInfoResponse.ImageInfo)
  return _internal_imageinfo();
}
inline void GetImageInfoResponse::unsafe_arena_set_allocated_imageinfo(
    ::msg::ImageInfo* imageinfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(imageinfo_);
  }
  imageinfo_ = imageinfo;
  if (imageinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.GetImageInfoResponse.ImageInfo)
}
inline ::msg::ImageInfo* GetImageInfoResponse::release_imageinfo() {
  auto temp = unsafe_arena_release_imageinfo();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::msg::ImageInfo* GetImageInfoResponse::unsafe_arena_release_imageinfo() {
  // @@protoc_insertion_point(field_release:msg.GetImageInfoResponse.ImageInfo)
  
  ::msg::ImageInfo* temp = imageinfo_;
  imageinfo_ = nullptr;
  return temp;
}
inline ::msg::ImageInfo* GetImageInfoResponse::_internal_mutable_imageinfo() {
  
  if (imageinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::ImageInfo>(GetArena());
    imageinfo_ = p;
  }
  return imageinfo_;
}
inline ::msg::ImageInfo* GetImageInfoResponse::mutable_imageinfo() {
  // @@protoc_insertion_point(field_mutable:msg.GetImageInfoResponse.ImageInfo)
  return _internal_mutable_imageinfo();
}
inline void GetImageInfoResponse::set_allocated_imageinfo(::msg::ImageInfo* imageinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete imageinfo_;
  }
  if (imageinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(imageinfo);
    if (message_arena != submessage_arena) {
      imageinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, imageinfo, submessage_arena);
    }
    
  } else {
    
  }
  imageinfo_ = imageinfo;
  // @@protoc_insertion_point(field_set_allocated:msg.GetImageInfoResponse.ImageInfo)
}

// -------------------------------------------------------------------

// Request

// .msg.BootRequest boot_request = 1;
inline bool Request::_internal_has_boot_request() const {
  return union_case() == kBootRequest;
}
inline bool Request::has_boot_request() const {
  return _internal_has_boot_request();
}
inline void Request::set_has_boot_request() {
  _oneof_case_[0] = kBootRequest;
}
inline void Request::clear_boot_request() {
  if (_internal_has_boot_request()) {
    if (GetArena() == nullptr) {
      delete union_.boot_request_;
    }
    clear_has_union();
  }
}
inline ::msg::BootRequest* Request::release_boot_request() {
  // @@protoc_insertion_point(field_release:msg.Request.boot_request)
  if (_internal_has_boot_request()) {
    clear_has_union();
      ::msg::BootRequest* temp = union_.boot_request_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    union_.boot_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::msg::BootRequest& Request::_internal_boot_request() const {
  return _internal_has_boot_request()
      ? *union_.boot_request_
      : *reinterpret_cast< ::msg::BootRequest*>(&::msg::_BootRequest_default_instance_);
}
inline const ::msg::BootRequest& Request::boot_request() const {
  // @@protoc_insertion_point(field_get:msg.Request.boot_request)
  return _internal_boot_request();
}
inline ::msg::BootRequest* Request::unsafe_arena_release_boot_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:msg.Request.boot_request)
  if (_internal_has_boot_request()) {
    clear_has_union();
    ::msg::BootRequest* temp = union_.boot_request_;
    union_.boot_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_boot_request(::msg::BootRequest* boot_request) {
  clear_union();
  if (boot_request) {
    set_has_boot_request();
    union_.boot_request_ = boot_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.Request.boot_request)
}
inline ::msg::BootRequest* Request::_internal_mutable_boot_request() {
  if (!_internal_has_boot_request()) {
    clear_union();
    set_has_boot_request();
    union_.boot_request_ = CreateMaybeMessage< ::msg::BootRequest >(GetArena());
  }
  return union_.boot_request_;
}
inline ::msg::BootRequest* Request::mutable_boot_request() {
  // @@protoc_insertion_point(field_mutable:msg.Request.boot_request)
  return _internal_mutable_boot_request();
}

// .msg.OsdStopRequest osd_stop_request = 2;
inline bool Request::_internal_has_osd_stop_request() const {
  return union_case() == kOsdStopRequest;
}
inline bool Request::has_osd_stop_request() const {
  return _internal_has_osd_stop_request();
}
inline void Request::set_has_osd_stop_request() {
  _oneof_case_[0] = kOsdStopRequest;
}
inline void Request::clear_osd_stop_request() {
  if (_internal_has_osd_stop_request()) {
    if (GetArena() == nullptr) {
      delete union_.osd_stop_request_;
    }
    clear_has_union();
  }
}
inline ::msg::OsdStopRequest* Request::release_osd_stop_request() {
  // @@protoc_insertion_point(field_release:msg.Request.osd_stop_request)
  if (_internal_has_osd_stop_request()) {
    clear_has_union();
      ::msg::OsdStopRequest* temp = union_.osd_stop_request_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    union_.osd_stop_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::msg::OsdStopRequest& Request::_internal_osd_stop_request() const {
  return _internal_has_osd_stop_request()
      ? *union_.osd_stop_request_
      : *reinterpret_cast< ::msg::OsdStopRequest*>(&::msg::_OsdStopRequest_default_instance_);
}
inline const ::msg::OsdStopRequest& Request::osd_stop_request() const {
  // @@protoc_insertion_point(field_get:msg.Request.osd_stop_request)
  return _internal_osd_stop_request();
}
inline ::msg::OsdStopRequest* Request::unsafe_arena_release_osd_stop_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:msg.Request.osd_stop_request)
  if (_internal_has_osd_stop_request()) {
    clear_has_union();
    ::msg::OsdStopRequest* temp = union_.osd_stop_request_;
    union_.osd_stop_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_osd_stop_request(::msg::OsdStopRequest* osd_stop_request) {
  clear_union();
  if (osd_stop_request) {
    set_has_osd_stop_request();
    union_.osd_stop_request_ = osd_stop_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.Request.osd_stop_request)
}
inline ::msg::OsdStopRequest* Request::_internal_mutable_osd_stop_request() {
  if (!_internal_has_osd_stop_request()) {
    clear_union();
    set_has_osd_stop_request();
    union_.osd_stop_request_ = CreateMaybeMessage< ::msg::OsdStopRequest >(GetArena());
  }
  return union_.osd_stop_request_;
}
inline ::msg::OsdStopRequest* Request::mutable_osd_stop_request() {
  // @@protoc_insertion_point(field_mutable:msg.Request.osd_stop_request)
  return _internal_mutable_osd_stop_request();
}

// .msg.HeartbeatRequest heartbeat_request = 3;
inline bool Request::_internal_has_heartbeat_request() const {
  return union_case() == kHeartbeatRequest;
}
inline bool Request::has_heartbeat_request() const {
  return _internal_has_heartbeat_request();
}
inline void Request::set_has_heartbeat_request() {
  _oneof_case_[0] = kHeartbeatRequest;
}
inline void Request::clear_heartbeat_request() {
  if (_internal_has_heartbeat_request()) {
    if (GetArena() == nullptr) {
      delete union_.heartbeat_request_;
    }
    clear_has_union();
  }
}
inline ::msg::HeartbeatRequest* Request::release_heartbeat_request() {
  // @@protoc_insertion_point(field_release:msg.Request.heartbeat_request)
  if (_internal_has_heartbeat_request()) {
    clear_has_union();
      ::msg::HeartbeatRequest* temp = union_.heartbeat_request_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    union_.heartbeat_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::msg::HeartbeatRequest& Request::_internal_heartbeat_request() const {
  return _internal_has_heartbeat_request()
      ? *union_.heartbeat_request_
      : *reinterpret_cast< ::msg::HeartbeatRequest*>(&::msg::_HeartbeatRequest_default_instance_);
}
inline const ::msg::HeartbeatRequest& Request::heartbeat_request() const {
  // @@protoc_insertion_point(field_get:msg.Request.heartbeat_request)
  return _internal_heartbeat_request();
}
inline ::msg::HeartbeatRequest* Request::unsafe_arena_release_heartbeat_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:msg.Request.heartbeat_request)
  if (_internal_has_heartbeat_request()) {
    clear_has_union();
    ::msg::HeartbeatRequest* temp = union_.heartbeat_request_;
    union_.heartbeat_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_heartbeat_request(::msg::HeartbeatRequest* heartbeat_request) {
  clear_union();
  if (heartbeat_request) {
    set_has_heartbeat_request();
    union_.heartbeat_request_ = heartbeat_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.Request.heartbeat_request)
}
inline ::msg::HeartbeatRequest* Request::_internal_mutable_heartbeat_request() {
  if (!_internal_has_heartbeat_request()) {
    clear_union();
    set_has_heartbeat_request();
    union_.heartbeat_request_ = CreateMaybeMessage< ::msg::HeartbeatRequest >(GetArena());
  }
  return union_.heartbeat_request_;
}
inline ::msg::HeartbeatRequest* Request::mutable_heartbeat_request() {
  // @@protoc_insertion_point(field_mutable:msg.Request.heartbeat_request)
  return _internal_mutable_heartbeat_request();
}

// .msg.GetOsdMapRequest get_osdmap_request = 4;
inline bool Request::_internal_has_get_osdmap_request() const {
  return union_case() == kGetOsdmapRequest;
}
inline bool Request::has_get_osdmap_request() const {
  return _internal_has_get_osdmap_request();
}
inline void Request::set_has_get_osdmap_request() {
  _oneof_case_[0] = kGetOsdmapRequest;
}
inline void Request::clear_get_osdmap_request() {
  if (_internal_has_get_osdmap_request()) {
    if (GetArena() == nullptr) {
      delete union_.get_osdmap_request_;
    }
    clear_has_union();
  }
}
inline ::msg::GetOsdMapRequest* Request::release_get_osdmap_request() {
  // @@protoc_insertion_point(field_release:msg.Request.get_osdmap_request)
  if (_internal_has_get_osdmap_request()) {
    clear_has_union();
      ::msg::GetOsdMapRequest* temp = union_.get_osdmap_request_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    union_.get_osdmap_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::msg::GetOsdMapRequest& Request::_internal_get_osdmap_request() const {
  return _internal_has_get_osdmap_request()
      ? *union_.get_osdmap_request_
      : *reinterpret_cast< ::msg::GetOsdMapRequest*>(&::msg::_GetOsdMapRequest_default_instance_);
}
inline const ::msg::GetOsdMapRequest& Request::get_osdmap_request() const {
  // @@protoc_insertion_point(field_get:msg.Request.get_osdmap_request)
  return _internal_get_osdmap_request();
}
inline ::msg::GetOsdMapRequest* Request::unsafe_arena_release_get_osdmap_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:msg.Request.get_osdmap_request)
  if (_internal_has_get_osdmap_request()) {
    clear_has_union();
    ::msg::GetOsdMapRequest* temp = union_.get_osdmap_request_;
    union_.get_osdmap_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_get_osdmap_request(::msg::GetOsdMapRequest* get_osdmap_request) {
  clear_union();
  if (get_osdmap_request) {
    set_has_get_osdmap_request();
    union_.get_osdmap_request_ = get_osdmap_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.Request.get_osdmap_request)
}
inline ::msg::GetOsdMapRequest* Request::_internal_mutable_get_osdmap_request() {
  if (!_internal_has_get_osdmap_request()) {
    clear_union();
    set_has_get_osdmap_request();
    union_.get_osdmap_request_ = CreateMaybeMessage< ::msg::GetOsdMapRequest >(GetArena());
  }
  return union_.get_osdmap_request_;
}
inline ::msg::GetOsdMapRequest* Request::mutable_get_osdmap_request() {
  // @@protoc_insertion_point(field_mutable:msg.Request.get_osdmap_request)
  return _internal_mutable_get_osdmap_request();
}

// .msg.ListPoolsRequest list_pools_request = 5;
inline bool Request::_internal_has_list_pools_request() const {
  return union_case() == kListPoolsRequest;
}
inline bool Request::has_list_pools_request() const {
  return _internal_has_list_pools_request();
}
inline void Request::set_has_list_pools_request() {
  _oneof_case_[0] = kListPoolsRequest;
}
inline void Request::clear_list_pools_request() {
  if (_internal_has_list_pools_request()) {
    if (GetArena() == nullptr) {
      delete union_.list_pools_request_;
    }
    clear_has_union();
  }
}
inline ::msg::ListPoolsRequest* Request::release_list_pools_request() {
  // @@protoc_insertion_point(field_release:msg.Request.list_pools_request)
  if (_internal_has_list_pools_request()) {
    clear_has_union();
      ::msg::ListPoolsRequest* temp = union_.list_pools_request_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    union_.list_pools_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::msg::ListPoolsRequest& Request::_internal_list_pools_request() const {
  return _internal_has_list_pools_request()
      ? *union_.list_pools_request_
      : *reinterpret_cast< ::msg::ListPoolsRequest*>(&::msg::_ListPoolsRequest_default_instance_);
}
inline const ::msg::ListPoolsRequest& Request::list_pools_request() const {
  // @@protoc_insertion_point(field_get:msg.Request.list_pools_request)
  return _internal_list_pools_request();
}
inline ::msg::ListPoolsRequest* Request::unsafe_arena_release_list_pools_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:msg.Request.list_pools_request)
  if (_internal_has_list_pools_request()) {
    clear_has_union();
    ::msg::ListPoolsRequest* temp = union_.list_pools_request_;
    union_.list_pools_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_list_pools_request(::msg::ListPoolsRequest* list_pools_request) {
  clear_union();
  if (list_pools_request) {
    set_has_list_pools_request();
    union_.list_pools_request_ = list_pools_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.Request.list_pools_request)
}
inline ::msg::ListPoolsRequest* Request::_internal_mutable_list_pools_request() {
  if (!_internal_has_list_pools_request()) {
    clear_union();
    set_has_list_pools_request();
    union_.list_pools_request_ = CreateMaybeMessage< ::msg::ListPoolsRequest >(GetArena());
  }
  return union_.list_pools_request_;
}
inline ::msg::ListPoolsRequest* Request::mutable_list_pools_request() {
  // @@protoc_insertion_point(field_mutable:msg.Request.list_pools_request)
  return _internal_mutable_list_pools_request();
}

// .msg.ApplyIDRequest apply_id_request = 6;
inline bool Request::_internal_has_apply_id_request() const {
  return union_case() == kApplyIdRequest;
}
inline bool Request::has_apply_id_request() const {
  return _internal_has_apply_id_request();
}
inline void Request::set_has_apply_id_request() {
  _oneof_case_[0] = kApplyIdRequest;
}
inline void Request::clear_apply_id_request() {
  if (_internal_has_apply_id_request()) {
    if (GetArena() == nullptr) {
      delete union_.apply_id_request_;
    }
    clear_has_union();
  }
}
inline ::msg::ApplyIDRequest* Request::release_apply_id_request() {
  // @@protoc_insertion_point(field_release:msg.Request.apply_id_request)
  if (_internal_has_apply_id_request()) {
    clear_has_union();
      ::msg::ApplyIDRequest* temp = union_.apply_id_request_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    union_.apply_id_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::msg::ApplyIDRequest& Request::_internal_apply_id_request() const {
  return _internal_has_apply_id_request()
      ? *union_.apply_id_request_
      : *reinterpret_cast< ::msg::ApplyIDRequest*>(&::msg::_ApplyIDRequest_default_instance_);
}
inline const ::msg::ApplyIDRequest& Request::apply_id_request() const {
  // @@protoc_insertion_point(field_get:msg.Request.apply_id_request)
  return _internal_apply_id_request();
}
inline ::msg::ApplyIDRequest* Request::unsafe_arena_release_apply_id_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:msg.Request.apply_id_request)
  if (_internal_has_apply_id_request()) {
    clear_has_union();
    ::msg::ApplyIDRequest* temp = union_.apply_id_request_;
    union_.apply_id_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_apply_id_request(::msg::ApplyIDRequest* apply_id_request) {
  clear_union();
  if (apply_id_request) {
    set_has_apply_id_request();
    union_.apply_id_request_ = apply_id_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.Request.apply_id_request)
}
inline ::msg::ApplyIDRequest* Request::_internal_mutable_apply_id_request() {
  if (!_internal_has_apply_id_request()) {
    clear_union();
    set_has_apply_id_request();
    union_.apply_id_request_ = CreateMaybeMessage< ::msg::ApplyIDRequest >(GetArena());
  }
  return union_.apply_id_request_;
}
inline ::msg::ApplyIDRequest* Request::mutable_apply_id_request() {
  // @@protoc_insertion_point(field_mutable:msg.Request.apply_id_request)
  return _internal_mutable_apply_id_request();
}

// .msg.CreatePoolRequest create_pool_request = 7;
inline bool Request::_internal_has_create_pool_request() const {
  return union_case() == kCreatePoolRequest;
}
inline bool Request::has_create_pool_request() const {
  return _internal_has_create_pool_request();
}
inline void Request::set_has_create_pool_request() {
  _oneof_case_[0] = kCreatePoolRequest;
}
inline void Request::clear_create_pool_request() {
  if (_internal_has_create_pool_request()) {
    if (GetArena() == nullptr) {
      delete union_.create_pool_request_;
    }
    clear_has_union();
  }
}
inline ::msg::CreatePoolRequest* Request::release_create_pool_request() {
  // @@protoc_insertion_point(field_release:msg.Request.create_pool_request)
  if (_internal_has_create_pool_request()) {
    clear_has_union();
      ::msg::CreatePoolRequest* temp = union_.create_pool_request_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    union_.create_pool_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::msg::CreatePoolRequest& Request::_internal_create_pool_request() const {
  return _internal_has_create_pool_request()
      ? *union_.create_pool_request_
      : *reinterpret_cast< ::msg::CreatePoolRequest*>(&::msg::_CreatePoolRequest_default_instance_);
}
inline const ::msg::CreatePoolRequest& Request::create_pool_request() const {
  // @@protoc_insertion_point(field_get:msg.Request.create_pool_request)
  return _internal_create_pool_request();
}
inline ::msg::CreatePoolRequest* Request::unsafe_arena_release_create_pool_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:msg.Request.create_pool_request)
  if (_internal_has_create_pool_request()) {
    clear_has_union();
    ::msg::CreatePoolRequest* temp = union_.create_pool_request_;
    union_.create_pool_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_create_pool_request(::msg::CreatePoolRequest* create_pool_request) {
  clear_union();
  if (create_pool_request) {
    set_has_create_pool_request();
    union_.create_pool_request_ = create_pool_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.Request.create_pool_request)
}
inline ::msg::CreatePoolRequest* Request::_internal_mutable_create_pool_request() {
  if (!_internal_has_create_pool_request()) {
    clear_union();
    set_has_create_pool_request();
    union_.create_pool_request_ = CreateMaybeMessage< ::msg::CreatePoolRequest >(GetArena());
  }
  return union_.create_pool_request_;
}
inline ::msg::CreatePoolRequest* Request::mutable_create_pool_request() {
  // @@protoc_insertion_point(field_mutable:msg.Request.create_pool_request)
  return _internal_mutable_create_pool_request();
}

// .msg.GetPgMapRequest get_pgmap_request = 8;
inline bool Request::_internal_has_get_pgmap_request() const {
  return union_case() == kGetPgmapRequest;
}
inline bool Request::has_get_pgmap_request() const {
  return _internal_has_get_pgmap_request();
}
inline void Request::set_has_get_pgmap_request() {
  _oneof_case_[0] = kGetPgmapRequest;
}
inline void Request::clear_get_pgmap_request() {
  if (_internal_has_get_pgmap_request()) {
    if (GetArena() == nullptr) {
      delete union_.get_pgmap_request_;
    }
    clear_has_union();
  }
}
inline ::msg::GetPgMapRequest* Request::release_get_pgmap_request() {
  // @@protoc_insertion_point(field_release:msg.Request.get_pgmap_request)
  if (_internal_has_get_pgmap_request()) {
    clear_has_union();
      ::msg::GetPgMapRequest* temp = union_.get_pgmap_request_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    union_.get_pgmap_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::msg::GetPgMapRequest& Request::_internal_get_pgmap_request() const {
  return _internal_has_get_pgmap_request()
      ? *union_.get_pgmap_request_
      : *reinterpret_cast< ::msg::GetPgMapRequest*>(&::msg::_GetPgMapRequest_default_instance_);
}
inline const ::msg::GetPgMapRequest& Request::get_pgmap_request() const {
  // @@protoc_insertion_point(field_get:msg.Request.get_pgmap_request)
  return _internal_get_pgmap_request();
}
inline ::msg::GetPgMapRequest* Request::unsafe_arena_release_get_pgmap_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:msg.Request.get_pgmap_request)
  if (_internal_has_get_pgmap_request()) {
    clear_has_union();
    ::msg::GetPgMapRequest* temp = union_.get_pgmap_request_;
    union_.get_pgmap_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_get_pgmap_request(::msg::GetPgMapRequest* get_pgmap_request) {
  clear_union();
  if (get_pgmap_request) {
    set_has_get_pgmap_request();
    union_.get_pgmap_request_ = get_pgmap_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.Request.get_pgmap_request)
}
inline ::msg::GetPgMapRequest* Request::_internal_mutable_get_pgmap_request() {
  if (!_internal_has_get_pgmap_request()) {
    clear_union();
    set_has_get_pgmap_request();
    union_.get_pgmap_request_ = CreateMaybeMessage< ::msg::GetPgMapRequest >(GetArena());
  }
  return union_.get_pgmap_request_;
}
inline ::msg::GetPgMapRequest* Request::mutable_get_pgmap_request() {
  // @@protoc_insertion_point(field_mutable:msg.Request.get_pgmap_request)
  return _internal_mutable_get_pgmap_request();
}

// .msg.DeletePoolRequest delete_pool_request = 9;
inline bool Request::_internal_has_delete_pool_request() const {
  return union_case() == kDeletePoolRequest;
}
inline bool Request::has_delete_pool_request() const {
  return _internal_has_delete_pool_request();
}
inline void Request::set_has_delete_pool_request() {
  _oneof_case_[0] = kDeletePoolRequest;
}
inline void Request::clear_delete_pool_request() {
  if (_internal_has_delete_pool_request()) {
    if (GetArena() == nullptr) {
      delete union_.delete_pool_request_;
    }
    clear_has_union();
  }
}
inline ::msg::DeletePoolRequest* Request::release_delete_pool_request() {
  // @@protoc_insertion_point(field_release:msg.Request.delete_pool_request)
  if (_internal_has_delete_pool_request()) {
    clear_has_union();
      ::msg::DeletePoolRequest* temp = union_.delete_pool_request_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    union_.delete_pool_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::msg::DeletePoolRequest& Request::_internal_delete_pool_request() const {
  return _internal_has_delete_pool_request()
      ? *union_.delete_pool_request_
      : *reinterpret_cast< ::msg::DeletePoolRequest*>(&::msg::_DeletePoolRequest_default_instance_);
}
inline const ::msg::DeletePoolRequest& Request::delete_pool_request() const {
  // @@protoc_insertion_point(field_get:msg.Request.delete_pool_request)
  return _internal_delete_pool_request();
}
inline ::msg::DeletePoolRequest* Request::unsafe_arena_release_delete_pool_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:msg.Request.delete_pool_request)
  if (_internal_has_delete_pool_request()) {
    clear_has_union();
    ::msg::DeletePoolRequest* temp = union_.delete_pool_request_;
    union_.delete_pool_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_delete_pool_request(::msg::DeletePoolRequest* delete_pool_request) {
  clear_union();
  if (delete_pool_request) {
    set_has_delete_pool_request();
    union_.delete_pool_request_ = delete_pool_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.Request.delete_pool_request)
}
inline ::msg::DeletePoolRequest* Request::_internal_mutable_delete_pool_request() {
  if (!_internal_has_delete_pool_request()) {
    clear_union();
    set_has_delete_pool_request();
    union_.delete_pool_request_ = CreateMaybeMessage< ::msg::DeletePoolRequest >(GetArena());
  }
  return union_.delete_pool_request_;
}
inline ::msg::DeletePoolRequest* Request::mutable_delete_pool_request() {
  // @@protoc_insertion_point(field_mutable:msg.Request.delete_pool_request)
  return _internal_mutable_delete_pool_request();
}

// .msg.GetClusterMapRequest get_cluster_map_request = 10;
inline bool Request::_internal_has_get_cluster_map_request() const {
  return union_case() == kGetClusterMapRequest;
}
inline bool Request::has_get_cluster_map_request() const {
  return _internal_has_get_cluster_map_request();
}
inline void Request::set_has_get_cluster_map_request() {
  _oneof_case_[0] = kGetClusterMapRequest;
}
inline void Request::clear_get_cluster_map_request() {
  if (_internal_has_get_cluster_map_request()) {
    if (GetArena() == nullptr) {
      delete union_.get_cluster_map_request_;
    }
    clear_has_union();
  }
}
inline ::msg::GetClusterMapRequest* Request::release_get_cluster_map_request() {
  // @@protoc_insertion_point(field_release:msg.Request.get_cluster_map_request)
  if (_internal_has_get_cluster_map_request()) {
    clear_has_union();
      ::msg::GetClusterMapRequest* temp = union_.get_cluster_map_request_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    union_.get_cluster_map_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::msg::GetClusterMapRequest& Request::_internal_get_cluster_map_request() const {
  return _internal_has_get_cluster_map_request()
      ? *union_.get_cluster_map_request_
      : *reinterpret_cast< ::msg::GetClusterMapRequest*>(&::msg::_GetClusterMapRequest_default_instance_);
}
inline const ::msg::GetClusterMapRequest& Request::get_cluster_map_request() const {
  // @@protoc_insertion_point(field_get:msg.Request.get_cluster_map_request)
  return _internal_get_cluster_map_request();
}
inline ::msg::GetClusterMapRequest* Request::unsafe_arena_release_get_cluster_map_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:msg.Request.get_cluster_map_request)
  if (_internal_has_get_cluster_map_request()) {
    clear_has_union();
    ::msg::GetClusterMapRequest* temp = union_.get_cluster_map_request_;
    union_.get_cluster_map_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_get_cluster_map_request(::msg::GetClusterMapRequest* get_cluster_map_request) {
  clear_union();
  if (get_cluster_map_request) {
    set_has_get_cluster_map_request();
    union_.get_cluster_map_request_ = get_cluster_map_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.Request.get_cluster_map_request)
}
inline ::msg::GetClusterMapRequest* Request::_internal_mutable_get_cluster_map_request() {
  if (!_internal_has_get_cluster_map_request()) {
    clear_union();
    set_has_get_cluster_map_request();
    union_.get_cluster_map_request_ = CreateMaybeMessage< ::msg::GetClusterMapRequest >(GetArena());
  }
  return union_.get_cluster_map_request_;
}
inline ::msg::GetClusterMapRequest* Request::mutable_get_cluster_map_request() {
  // @@protoc_insertion_point(field_mutable:msg.Request.get_cluster_map_request)
  return _internal_mutable_get_cluster_map_request();
}

// .msg.CreateImageRequest create_image_request = 11;
inline bool Request::_internal_has_create_image_request() const {
  return union_case() == kCreateImageRequest;
}
inline bool Request::has_create_image_request() const {
  return _internal_has_create_image_request();
}
inline void Request::set_has_create_image_request() {
  _oneof_case_[0] = kCreateImageRequest;
}
inline void Request::clear_create_image_request() {
  if (_internal_has_create_image_request()) {
    if (GetArena() == nullptr) {
      delete union_.create_image_request_;
    }
    clear_has_union();
  }
}
inline ::msg::CreateImageRequest* Request::release_create_image_request() {
  // @@protoc_insertion_point(field_release:msg.Request.create_image_request)
  if (_internal_has_create_image_request()) {
    clear_has_union();
      ::msg::CreateImageRequest* temp = union_.create_image_request_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    union_.create_image_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::msg::CreateImageRequest& Request::_internal_create_image_request() const {
  return _internal_has_create_image_request()
      ? *union_.create_image_request_
      : *reinterpret_cast< ::msg::CreateImageRequest*>(&::msg::_CreateImageRequest_default_instance_);
}
inline const ::msg::CreateImageRequest& Request::create_image_request() const {
  // @@protoc_insertion_point(field_get:msg.Request.create_image_request)
  return _internal_create_image_request();
}
inline ::msg::CreateImageRequest* Request::unsafe_arena_release_create_image_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:msg.Request.create_image_request)
  if (_internal_has_create_image_request()) {
    clear_has_union();
    ::msg::CreateImageRequest* temp = union_.create_image_request_;
    union_.create_image_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_create_image_request(::msg::CreateImageRequest* create_image_request) {
  clear_union();
  if (create_image_request) {
    set_has_create_image_request();
    union_.create_image_request_ = create_image_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.Request.create_image_request)
}
inline ::msg::CreateImageRequest* Request::_internal_mutable_create_image_request() {
  if (!_internal_has_create_image_request()) {
    clear_union();
    set_has_create_image_request();
    union_.create_image_request_ = CreateMaybeMessage< ::msg::CreateImageRequest >(GetArena());
  }
  return union_.create_image_request_;
}
inline ::msg::CreateImageRequest* Request::mutable_create_image_request() {
  // @@protoc_insertion_point(field_mutable:msg.Request.create_image_request)
  return _internal_mutable_create_image_request();
}

// .msg.RemoveImageRequest remove_image_request = 12;
inline bool Request::_internal_has_remove_image_request() const {
  return union_case() == kRemoveImageRequest;
}
inline bool Request::has_remove_image_request() const {
  return _internal_has_remove_image_request();
}
inline void Request::set_has_remove_image_request() {
  _oneof_case_[0] = kRemoveImageRequest;
}
inline void Request::clear_remove_image_request() {
  if (_internal_has_remove_image_request()) {
    if (GetArena() == nullptr) {
      delete union_.remove_image_request_;
    }
    clear_has_union();
  }
}
inline ::msg::RemoveImageRequest* Request::release_remove_image_request() {
  // @@protoc_insertion_point(field_release:msg.Request.remove_image_request)
  if (_internal_has_remove_image_request()) {
    clear_has_union();
      ::msg::RemoveImageRequest* temp = union_.remove_image_request_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    union_.remove_image_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::msg::RemoveImageRequest& Request::_internal_remove_image_request() const {
  return _internal_has_remove_image_request()
      ? *union_.remove_image_request_
      : *reinterpret_cast< ::msg::RemoveImageRequest*>(&::msg::_RemoveImageRequest_default_instance_);
}
inline const ::msg::RemoveImageRequest& Request::remove_image_request() const {
  // @@protoc_insertion_point(field_get:msg.Request.remove_image_request)
  return _internal_remove_image_request();
}
inline ::msg::RemoveImageRequest* Request::unsafe_arena_release_remove_image_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:msg.Request.remove_image_request)
  if (_internal_has_remove_image_request()) {
    clear_has_union();
    ::msg::RemoveImageRequest* temp = union_.remove_image_request_;
    union_.remove_image_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_remove_image_request(::msg::RemoveImageRequest* remove_image_request) {
  clear_union();
  if (remove_image_request) {
    set_has_remove_image_request();
    union_.remove_image_request_ = remove_image_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.Request.remove_image_request)
}
inline ::msg::RemoveImageRequest* Request::_internal_mutable_remove_image_request() {
  if (!_internal_has_remove_image_request()) {
    clear_union();
    set_has_remove_image_request();
    union_.remove_image_request_ = CreateMaybeMessage< ::msg::RemoveImageRequest >(GetArena());
  }
  return union_.remove_image_request_;
}
inline ::msg::RemoveImageRequest* Request::mutable_remove_image_request() {
  // @@protoc_insertion_point(field_mutable:msg.Request.remove_image_request)
  return _internal_mutable_remove_image_request();
}

// .msg.ResizeImageRequest resize_image_request = 13;
inline bool Request::_internal_has_resize_image_request() const {
  return union_case() == kResizeImageRequest;
}
inline bool Request::has_resize_image_request() const {
  return _internal_has_resize_image_request();
}
inline void Request::set_has_resize_image_request() {
  _oneof_case_[0] = kResizeImageRequest;
}
inline void Request::clear_resize_image_request() {
  if (_internal_has_resize_image_request()) {
    if (GetArena() == nullptr) {
      delete union_.resize_image_request_;
    }
    clear_has_union();
  }
}
inline ::msg::ResizeImageRequest* Request::release_resize_image_request() {
  // @@protoc_insertion_point(field_release:msg.Request.resize_image_request)
  if (_internal_has_resize_image_request()) {
    clear_has_union();
      ::msg::ResizeImageRequest* temp = union_.resize_image_request_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    union_.resize_image_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::msg::ResizeImageRequest& Request::_internal_resize_image_request() const {
  return _internal_has_resize_image_request()
      ? *union_.resize_image_request_
      : *reinterpret_cast< ::msg::ResizeImageRequest*>(&::msg::_ResizeImageRequest_default_instance_);
}
inline const ::msg::ResizeImageRequest& Request::resize_image_request() const {
  // @@protoc_insertion_point(field_get:msg.Request.resize_image_request)
  return _internal_resize_image_request();
}
inline ::msg::ResizeImageRequest* Request::unsafe_arena_release_resize_image_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:msg.Request.resize_image_request)
  if (_internal_has_resize_image_request()) {
    clear_has_union();
    ::msg::ResizeImageRequest* temp = union_.resize_image_request_;
    union_.resize_image_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_resize_image_request(::msg::ResizeImageRequest* resize_image_request) {
  clear_union();
  if (resize_image_request) {
    set_has_resize_image_request();
    union_.resize_image_request_ = resize_image_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.Request.resize_image_request)
}
inline ::msg::ResizeImageRequest* Request::_internal_mutable_resize_image_request() {
  if (!_internal_has_resize_image_request()) {
    clear_union();
    set_has_resize_image_request();
    union_.resize_image_request_ = CreateMaybeMessage< ::msg::ResizeImageRequest >(GetArena());
  }
  return union_.resize_image_request_;
}
inline ::msg::ResizeImageRequest* Request::mutable_resize_image_request() {
  // @@protoc_insertion_point(field_mutable:msg.Request.resize_image_request)
  return _internal_mutable_resize_image_request();
}

// .msg.GetImageInfoRequest get_ImageInfo_Request = 14;
inline bool Request::_internal_has_get_imageinfo_request() const {
  return union_case() == kGetImageInfoRequest;
}
inline bool Request::has_get_imageinfo_request() const {
  return _internal_has_get_imageinfo_request();
}
inline void Request::set_has_get_imageinfo_request() {
  _oneof_case_[0] = kGetImageInfoRequest;
}
inline void Request::clear_get_imageinfo_request() {
  if (_internal_has_get_imageinfo_request()) {
    if (GetArena() == nullptr) {
      delete union_.get_imageinfo_request_;
    }
    clear_has_union();
  }
}
inline ::msg::GetImageInfoRequest* Request::release_get_imageinfo_request() {
  // @@protoc_insertion_point(field_release:msg.Request.get_ImageInfo_Request)
  if (_internal_has_get_imageinfo_request()) {
    clear_has_union();
      ::msg::GetImageInfoRequest* temp = union_.get_imageinfo_request_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    union_.get_imageinfo_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::msg::GetImageInfoRequest& Request::_internal_get_imageinfo_request() const {
  return _internal_has_get_imageinfo_request()
      ? *union_.get_imageinfo_request_
      : *reinterpret_cast< ::msg::GetImageInfoRequest*>(&::msg::_GetImageInfoRequest_default_instance_);
}
inline const ::msg::GetImageInfoRequest& Request::get_imageinfo_request() const {
  // @@protoc_insertion_point(field_get:msg.Request.get_ImageInfo_Request)
  return _internal_get_imageinfo_request();
}
inline ::msg::GetImageInfoRequest* Request::unsafe_arena_release_get_imageinfo_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:msg.Request.get_ImageInfo_Request)
  if (_internal_has_get_imageinfo_request()) {
    clear_has_union();
    ::msg::GetImageInfoRequest* temp = union_.get_imageinfo_request_;
    union_.get_imageinfo_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_get_imageinfo_request(::msg::GetImageInfoRequest* get_imageinfo_request) {
  clear_union();
  if (get_imageinfo_request) {
    set_has_get_imageinfo_request();
    union_.get_imageinfo_request_ = get_imageinfo_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.Request.get_ImageInfo_Request)
}
inline ::msg::GetImageInfoRequest* Request::_internal_mutable_get_imageinfo_request() {
  if (!_internal_has_get_imageinfo_request()) {
    clear_union();
    set_has_get_imageinfo_request();
    union_.get_imageinfo_request_ = CreateMaybeMessage< ::msg::GetImageInfoRequest >(GetArena());
  }
  return union_.get_imageinfo_request_;
}
inline ::msg::GetImageInfoRequest* Request::mutable_get_imageinfo_request() {
  // @@protoc_insertion_point(field_mutable:msg.Request.get_ImageInfo_Request)
  return _internal_mutable_get_imageinfo_request();
}

inline bool Request::has_union() const {
  return union_case() != UNION_NOT_SET;
}
inline void Request::clear_has_union() {
  _oneof_case_[0] = UNION_NOT_SET;
}
inline Request::UnionCase Request::union_case() const {
  return Request::UnionCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Response

// .msg.BootResponse boot_response = 1;
inline bool Response::_internal_has_boot_response() const {
  return union_case() == kBootResponse;
}
inline bool Response::has_boot_response() const {
  return _internal_has_boot_response();
}
inline void Response::set_has_boot_response() {
  _oneof_case_[0] = kBootResponse;
}
inline void Response::clear_boot_response() {
  if (_internal_has_boot_response()) {
    if (GetArena() == nullptr) {
      delete union_.boot_response_;
    }
    clear_has_union();
  }
}
inline ::msg::BootResponse* Response::release_boot_response() {
  // @@protoc_insertion_point(field_release:msg.Response.boot_response)
  if (_internal_has_boot_response()) {
    clear_has_union();
      ::msg::BootResponse* temp = union_.boot_response_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    union_.boot_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::msg::BootResponse& Response::_internal_boot_response() const {
  return _internal_has_boot_response()
      ? *union_.boot_response_
      : *reinterpret_cast< ::msg::BootResponse*>(&::msg::_BootResponse_default_instance_);
}
inline const ::msg::BootResponse& Response::boot_response() const {
  // @@protoc_insertion_point(field_get:msg.Response.boot_response)
  return _internal_boot_response();
}
inline ::msg::BootResponse* Response::unsafe_arena_release_boot_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:msg.Response.boot_response)
  if (_internal_has_boot_response()) {
    clear_has_union();
    ::msg::BootResponse* temp = union_.boot_response_;
    union_.boot_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_boot_response(::msg::BootResponse* boot_response) {
  clear_union();
  if (boot_response) {
    set_has_boot_response();
    union_.boot_response_ = boot_response;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.Response.boot_response)
}
inline ::msg::BootResponse* Response::_internal_mutable_boot_response() {
  if (!_internal_has_boot_response()) {
    clear_union();
    set_has_boot_response();
    union_.boot_response_ = CreateMaybeMessage< ::msg::BootResponse >(GetArena());
  }
  return union_.boot_response_;
}
inline ::msg::BootResponse* Response::mutable_boot_response() {
  // @@protoc_insertion_point(field_mutable:msg.Response.boot_response)
  return _internal_mutable_boot_response();
}

// .msg.OsdStopResponse osd_stop_response = 2;
inline bool Response::_internal_has_osd_stop_response() const {
  return union_case() == kOsdStopResponse;
}
inline bool Response::has_osd_stop_response() const {
  return _internal_has_osd_stop_response();
}
inline void Response::set_has_osd_stop_response() {
  _oneof_case_[0] = kOsdStopResponse;
}
inline void Response::clear_osd_stop_response() {
  if (_internal_has_osd_stop_response()) {
    if (GetArena() == nullptr) {
      delete union_.osd_stop_response_;
    }
    clear_has_union();
  }
}
inline ::msg::OsdStopResponse* Response::release_osd_stop_response() {
  // @@protoc_insertion_point(field_release:msg.Response.osd_stop_response)
  if (_internal_has_osd_stop_response()) {
    clear_has_union();
      ::msg::OsdStopResponse* temp = union_.osd_stop_response_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    union_.osd_stop_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::msg::OsdStopResponse& Response::_internal_osd_stop_response() const {
  return _internal_has_osd_stop_response()
      ? *union_.osd_stop_response_
      : *reinterpret_cast< ::msg::OsdStopResponse*>(&::msg::_OsdStopResponse_default_instance_);
}
inline const ::msg::OsdStopResponse& Response::osd_stop_response() const {
  // @@protoc_insertion_point(field_get:msg.Response.osd_stop_response)
  return _internal_osd_stop_response();
}
inline ::msg::OsdStopResponse* Response::unsafe_arena_release_osd_stop_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:msg.Response.osd_stop_response)
  if (_internal_has_osd_stop_response()) {
    clear_has_union();
    ::msg::OsdStopResponse* temp = union_.osd_stop_response_;
    union_.osd_stop_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_osd_stop_response(::msg::OsdStopResponse* osd_stop_response) {
  clear_union();
  if (osd_stop_response) {
    set_has_osd_stop_response();
    union_.osd_stop_response_ = osd_stop_response;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.Response.osd_stop_response)
}
inline ::msg::OsdStopResponse* Response::_internal_mutable_osd_stop_response() {
  if (!_internal_has_osd_stop_response()) {
    clear_union();
    set_has_osd_stop_response();
    union_.osd_stop_response_ = CreateMaybeMessage< ::msg::OsdStopResponse >(GetArena());
  }
  return union_.osd_stop_response_;
}
inline ::msg::OsdStopResponse* Response::mutable_osd_stop_response() {
  // @@protoc_insertion_point(field_mutable:msg.Response.osd_stop_response)
  return _internal_mutable_osd_stop_response();
}

// .msg.HeartbeatResponse heartbeat_response = 3;
inline bool Response::_internal_has_heartbeat_response() const {
  return union_case() == kHeartbeatResponse;
}
inline bool Response::has_heartbeat_response() const {
  return _internal_has_heartbeat_response();
}
inline void Response::set_has_heartbeat_response() {
  _oneof_case_[0] = kHeartbeatResponse;
}
inline void Response::clear_heartbeat_response() {
  if (_internal_has_heartbeat_response()) {
    if (GetArena() == nullptr) {
      delete union_.heartbeat_response_;
    }
    clear_has_union();
  }
}
inline ::msg::HeartbeatResponse* Response::release_heartbeat_response() {
  // @@protoc_insertion_point(field_release:msg.Response.heartbeat_response)
  if (_internal_has_heartbeat_response()) {
    clear_has_union();
      ::msg::HeartbeatResponse* temp = union_.heartbeat_response_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    union_.heartbeat_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::msg::HeartbeatResponse& Response::_internal_heartbeat_response() const {
  return _internal_has_heartbeat_response()
      ? *union_.heartbeat_response_
      : *reinterpret_cast< ::msg::HeartbeatResponse*>(&::msg::_HeartbeatResponse_default_instance_);
}
inline const ::msg::HeartbeatResponse& Response::heartbeat_response() const {
  // @@protoc_insertion_point(field_get:msg.Response.heartbeat_response)
  return _internal_heartbeat_response();
}
inline ::msg::HeartbeatResponse* Response::unsafe_arena_release_heartbeat_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:msg.Response.heartbeat_response)
  if (_internal_has_heartbeat_response()) {
    clear_has_union();
    ::msg::HeartbeatResponse* temp = union_.heartbeat_response_;
    union_.heartbeat_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_heartbeat_response(::msg::HeartbeatResponse* heartbeat_response) {
  clear_union();
  if (heartbeat_response) {
    set_has_heartbeat_response();
    union_.heartbeat_response_ = heartbeat_response;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.Response.heartbeat_response)
}
inline ::msg::HeartbeatResponse* Response::_internal_mutable_heartbeat_response() {
  if (!_internal_has_heartbeat_response()) {
    clear_union();
    set_has_heartbeat_response();
    union_.heartbeat_response_ = CreateMaybeMessage< ::msg::HeartbeatResponse >(GetArena());
  }
  return union_.heartbeat_response_;
}
inline ::msg::HeartbeatResponse* Response::mutable_heartbeat_response() {
  // @@protoc_insertion_point(field_mutable:msg.Response.heartbeat_response)
  return _internal_mutable_heartbeat_response();
}

// .msg.GetOsdMapResponse get_osdmap_response = 4;
inline bool Response::_internal_has_get_osdmap_response() const {
  return union_case() == kGetOsdmapResponse;
}
inline bool Response::has_get_osdmap_response() const {
  return _internal_has_get_osdmap_response();
}
inline void Response::set_has_get_osdmap_response() {
  _oneof_case_[0] = kGetOsdmapResponse;
}
inline void Response::clear_get_osdmap_response() {
  if (_internal_has_get_osdmap_response()) {
    if (GetArena() == nullptr) {
      delete union_.get_osdmap_response_;
    }
    clear_has_union();
  }
}
inline ::msg::GetOsdMapResponse* Response::release_get_osdmap_response() {
  // @@protoc_insertion_point(field_release:msg.Response.get_osdmap_response)
  if (_internal_has_get_osdmap_response()) {
    clear_has_union();
      ::msg::GetOsdMapResponse* temp = union_.get_osdmap_response_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    union_.get_osdmap_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::msg::GetOsdMapResponse& Response::_internal_get_osdmap_response() const {
  return _internal_has_get_osdmap_response()
      ? *union_.get_osdmap_response_
      : *reinterpret_cast< ::msg::GetOsdMapResponse*>(&::msg::_GetOsdMapResponse_default_instance_);
}
inline const ::msg::GetOsdMapResponse& Response::get_osdmap_response() const {
  // @@protoc_insertion_point(field_get:msg.Response.get_osdmap_response)
  return _internal_get_osdmap_response();
}
inline ::msg::GetOsdMapResponse* Response::unsafe_arena_release_get_osdmap_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:msg.Response.get_osdmap_response)
  if (_internal_has_get_osdmap_response()) {
    clear_has_union();
    ::msg::GetOsdMapResponse* temp = union_.get_osdmap_response_;
    union_.get_osdmap_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_get_osdmap_response(::msg::GetOsdMapResponse* get_osdmap_response) {
  clear_union();
  if (get_osdmap_response) {
    set_has_get_osdmap_response();
    union_.get_osdmap_response_ = get_osdmap_response;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.Response.get_osdmap_response)
}
inline ::msg::GetOsdMapResponse* Response::_internal_mutable_get_osdmap_response() {
  if (!_internal_has_get_osdmap_response()) {
    clear_union();
    set_has_get_osdmap_response();
    union_.get_osdmap_response_ = CreateMaybeMessage< ::msg::GetOsdMapResponse >(GetArena());
  }
  return union_.get_osdmap_response_;
}
inline ::msg::GetOsdMapResponse* Response::mutable_get_osdmap_response() {
  // @@protoc_insertion_point(field_mutable:msg.Response.get_osdmap_response)
  return _internal_mutable_get_osdmap_response();
}

// .msg.ListPoolsResponse list_pools_response = 5;
inline bool Response::_internal_has_list_pools_response() const {
  return union_case() == kListPoolsResponse;
}
inline bool Response::has_list_pools_response() const {
  return _internal_has_list_pools_response();
}
inline void Response::set_has_list_pools_response() {
  _oneof_case_[0] = kListPoolsResponse;
}
inline void Response::clear_list_pools_response() {
  if (_internal_has_list_pools_response()) {
    if (GetArena() == nullptr) {
      delete union_.list_pools_response_;
    }
    clear_has_union();
  }
}
inline ::msg::ListPoolsResponse* Response::release_list_pools_response() {
  // @@protoc_insertion_point(field_release:msg.Response.list_pools_response)
  if (_internal_has_list_pools_response()) {
    clear_has_union();
      ::msg::ListPoolsResponse* temp = union_.list_pools_response_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    union_.list_pools_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::msg::ListPoolsResponse& Response::_internal_list_pools_response() const {
  return _internal_has_list_pools_response()
      ? *union_.list_pools_response_
      : *reinterpret_cast< ::msg::ListPoolsResponse*>(&::msg::_ListPoolsResponse_default_instance_);
}
inline const ::msg::ListPoolsResponse& Response::list_pools_response() const {
  // @@protoc_insertion_point(field_get:msg.Response.list_pools_response)
  return _internal_list_pools_response();
}
inline ::msg::ListPoolsResponse* Response::unsafe_arena_release_list_pools_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:msg.Response.list_pools_response)
  if (_internal_has_list_pools_response()) {
    clear_has_union();
    ::msg::ListPoolsResponse* temp = union_.list_pools_response_;
    union_.list_pools_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_list_pools_response(::msg::ListPoolsResponse* list_pools_response) {
  clear_union();
  if (list_pools_response) {
    set_has_list_pools_response();
    union_.list_pools_response_ = list_pools_response;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.Response.list_pools_response)
}
inline ::msg::ListPoolsResponse* Response::_internal_mutable_list_pools_response() {
  if (!_internal_has_list_pools_response()) {
    clear_union();
    set_has_list_pools_response();
    union_.list_pools_response_ = CreateMaybeMessage< ::msg::ListPoolsResponse >(GetArena());
  }
  return union_.list_pools_response_;
}
inline ::msg::ListPoolsResponse* Response::mutable_list_pools_response() {
  // @@protoc_insertion_point(field_mutable:msg.Response.list_pools_response)
  return _internal_mutable_list_pools_response();
}

// .msg.ApplyIDResponse apply_id_response = 6;
inline bool Response::_internal_has_apply_id_response() const {
  return union_case() == kApplyIdResponse;
}
inline bool Response::has_apply_id_response() const {
  return _internal_has_apply_id_response();
}
inline void Response::set_has_apply_id_response() {
  _oneof_case_[0] = kApplyIdResponse;
}
inline void Response::clear_apply_id_response() {
  if (_internal_has_apply_id_response()) {
    if (GetArena() == nullptr) {
      delete union_.apply_id_response_;
    }
    clear_has_union();
  }
}
inline ::msg::ApplyIDResponse* Response::release_apply_id_response() {
  // @@protoc_insertion_point(field_release:msg.Response.apply_id_response)
  if (_internal_has_apply_id_response()) {
    clear_has_union();
      ::msg::ApplyIDResponse* temp = union_.apply_id_response_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    union_.apply_id_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::msg::ApplyIDResponse& Response::_internal_apply_id_response() const {
  return _internal_has_apply_id_response()
      ? *union_.apply_id_response_
      : *reinterpret_cast< ::msg::ApplyIDResponse*>(&::msg::_ApplyIDResponse_default_instance_);
}
inline const ::msg::ApplyIDResponse& Response::apply_id_response() const {
  // @@protoc_insertion_point(field_get:msg.Response.apply_id_response)
  return _internal_apply_id_response();
}
inline ::msg::ApplyIDResponse* Response::unsafe_arena_release_apply_id_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:msg.Response.apply_id_response)
  if (_internal_has_apply_id_response()) {
    clear_has_union();
    ::msg::ApplyIDResponse* temp = union_.apply_id_response_;
    union_.apply_id_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_apply_id_response(::msg::ApplyIDResponse* apply_id_response) {
  clear_union();
  if (apply_id_response) {
    set_has_apply_id_response();
    union_.apply_id_response_ = apply_id_response;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.Response.apply_id_response)
}
inline ::msg::ApplyIDResponse* Response::_internal_mutable_apply_id_response() {
  if (!_internal_has_apply_id_response()) {
    clear_union();
    set_has_apply_id_response();
    union_.apply_id_response_ = CreateMaybeMessage< ::msg::ApplyIDResponse >(GetArena());
  }
  return union_.apply_id_response_;
}
inline ::msg::ApplyIDResponse* Response::mutable_apply_id_response() {
  // @@protoc_insertion_point(field_mutable:msg.Response.apply_id_response)
  return _internal_mutable_apply_id_response();
}

// .msg.CreatePoolResponse create_pool_response = 7;
inline bool Response::_internal_has_create_pool_response() const {
  return union_case() == kCreatePoolResponse;
}
inline bool Response::has_create_pool_response() const {
  return _internal_has_create_pool_response();
}
inline void Response::set_has_create_pool_response() {
  _oneof_case_[0] = kCreatePoolResponse;
}
inline void Response::clear_create_pool_response() {
  if (_internal_has_create_pool_response()) {
    if (GetArena() == nullptr) {
      delete union_.create_pool_response_;
    }
    clear_has_union();
  }
}
inline ::msg::CreatePoolResponse* Response::release_create_pool_response() {
  // @@protoc_insertion_point(field_release:msg.Response.create_pool_response)
  if (_internal_has_create_pool_response()) {
    clear_has_union();
      ::msg::CreatePoolResponse* temp = union_.create_pool_response_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    union_.create_pool_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::msg::CreatePoolResponse& Response::_internal_create_pool_response() const {
  return _internal_has_create_pool_response()
      ? *union_.create_pool_response_
      : *reinterpret_cast< ::msg::CreatePoolResponse*>(&::msg::_CreatePoolResponse_default_instance_);
}
inline const ::msg::CreatePoolResponse& Response::create_pool_response() const {
  // @@protoc_insertion_point(field_get:msg.Response.create_pool_response)
  return _internal_create_pool_response();
}
inline ::msg::CreatePoolResponse* Response::unsafe_arena_release_create_pool_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:msg.Response.create_pool_response)
  if (_internal_has_create_pool_response()) {
    clear_has_union();
    ::msg::CreatePoolResponse* temp = union_.create_pool_response_;
    union_.create_pool_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_create_pool_response(::msg::CreatePoolResponse* create_pool_response) {
  clear_union();
  if (create_pool_response) {
    set_has_create_pool_response();
    union_.create_pool_response_ = create_pool_response;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.Response.create_pool_response)
}
inline ::msg::CreatePoolResponse* Response::_internal_mutable_create_pool_response() {
  if (!_internal_has_create_pool_response()) {
    clear_union();
    set_has_create_pool_response();
    union_.create_pool_response_ = CreateMaybeMessage< ::msg::CreatePoolResponse >(GetArena());
  }
  return union_.create_pool_response_;
}
inline ::msg::CreatePoolResponse* Response::mutable_create_pool_response() {
  // @@protoc_insertion_point(field_mutable:msg.Response.create_pool_response)
  return _internal_mutable_create_pool_response();
}

// .msg.GetPgMapResponse get_pgmap_response = 8;
inline bool Response::_internal_has_get_pgmap_response() const {
  return union_case() == kGetPgmapResponse;
}
inline bool Response::has_get_pgmap_response() const {
  return _internal_has_get_pgmap_response();
}
inline void Response::set_has_get_pgmap_response() {
  _oneof_case_[0] = kGetPgmapResponse;
}
inline void Response::clear_get_pgmap_response() {
  if (_internal_has_get_pgmap_response()) {
    if (GetArena() == nullptr) {
      delete union_.get_pgmap_response_;
    }
    clear_has_union();
  }
}
inline ::msg::GetPgMapResponse* Response::release_get_pgmap_response() {
  // @@protoc_insertion_point(field_release:msg.Response.get_pgmap_response)
  if (_internal_has_get_pgmap_response()) {
    clear_has_union();
      ::msg::GetPgMapResponse* temp = union_.get_pgmap_response_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    union_.get_pgmap_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::msg::GetPgMapResponse& Response::_internal_get_pgmap_response() const {
  return _internal_has_get_pgmap_response()
      ? *union_.get_pgmap_response_
      : *reinterpret_cast< ::msg::GetPgMapResponse*>(&::msg::_GetPgMapResponse_default_instance_);
}
inline const ::msg::GetPgMapResponse& Response::get_pgmap_response() const {
  // @@protoc_insertion_point(field_get:msg.Response.get_pgmap_response)
  return _internal_get_pgmap_response();
}
inline ::msg::GetPgMapResponse* Response::unsafe_arena_release_get_pgmap_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:msg.Response.get_pgmap_response)
  if (_internal_has_get_pgmap_response()) {
    clear_has_union();
    ::msg::GetPgMapResponse* temp = union_.get_pgmap_response_;
    union_.get_pgmap_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_get_pgmap_response(::msg::GetPgMapResponse* get_pgmap_response) {
  clear_union();
  if (get_pgmap_response) {
    set_has_get_pgmap_response();
    union_.get_pgmap_response_ = get_pgmap_response;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.Response.get_pgmap_response)
}
inline ::msg::GetPgMapResponse* Response::_internal_mutable_get_pgmap_response() {
  if (!_internal_has_get_pgmap_response()) {
    clear_union();
    set_has_get_pgmap_response();
    union_.get_pgmap_response_ = CreateMaybeMessage< ::msg::GetPgMapResponse >(GetArena());
  }
  return union_.get_pgmap_response_;
}
inline ::msg::GetPgMapResponse* Response::mutable_get_pgmap_response() {
  // @@protoc_insertion_point(field_mutable:msg.Response.get_pgmap_response)
  return _internal_mutable_get_pgmap_response();
}

// .msg.DeletePoolResponse delete_pool_response = 9;
inline bool Response::_internal_has_delete_pool_response() const {
  return union_case() == kDeletePoolResponse;
}
inline bool Response::has_delete_pool_response() const {
  return _internal_has_delete_pool_response();
}
inline void Response::set_has_delete_pool_response() {
  _oneof_case_[0] = kDeletePoolResponse;
}
inline void Response::clear_delete_pool_response() {
  if (_internal_has_delete_pool_response()) {
    if (GetArena() == nullptr) {
      delete union_.delete_pool_response_;
    }
    clear_has_union();
  }
}
inline ::msg::DeletePoolResponse* Response::release_delete_pool_response() {
  // @@protoc_insertion_point(field_release:msg.Response.delete_pool_response)
  if (_internal_has_delete_pool_response()) {
    clear_has_union();
      ::msg::DeletePoolResponse* temp = union_.delete_pool_response_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    union_.delete_pool_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::msg::DeletePoolResponse& Response::_internal_delete_pool_response() const {
  return _internal_has_delete_pool_response()
      ? *union_.delete_pool_response_
      : *reinterpret_cast< ::msg::DeletePoolResponse*>(&::msg::_DeletePoolResponse_default_instance_);
}
inline const ::msg::DeletePoolResponse& Response::delete_pool_response() const {
  // @@protoc_insertion_point(field_get:msg.Response.delete_pool_response)
  return _internal_delete_pool_response();
}
inline ::msg::DeletePoolResponse* Response::unsafe_arena_release_delete_pool_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:msg.Response.delete_pool_response)
  if (_internal_has_delete_pool_response()) {
    clear_has_union();
    ::msg::DeletePoolResponse* temp = union_.delete_pool_response_;
    union_.delete_pool_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_delete_pool_response(::msg::DeletePoolResponse* delete_pool_response) {
  clear_union();
  if (delete_pool_response) {
    set_has_delete_pool_response();
    union_.delete_pool_response_ = delete_pool_response;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.Response.delete_pool_response)
}
inline ::msg::DeletePoolResponse* Response::_internal_mutable_delete_pool_response() {
  if (!_internal_has_delete_pool_response()) {
    clear_union();
    set_has_delete_pool_response();
    union_.delete_pool_response_ = CreateMaybeMessage< ::msg::DeletePoolResponse >(GetArena());
  }
  return union_.delete_pool_response_;
}
inline ::msg::DeletePoolResponse* Response::mutable_delete_pool_response() {
  // @@protoc_insertion_point(field_mutable:msg.Response.delete_pool_response)
  return _internal_mutable_delete_pool_response();
}

// .msg.GetClusterMapResponse get_cluster_map_response = 10;
inline bool Response::_internal_has_get_cluster_map_response() const {
  return union_case() == kGetClusterMapResponse;
}
inline bool Response::has_get_cluster_map_response() const {
  return _internal_has_get_cluster_map_response();
}
inline void Response::set_has_get_cluster_map_response() {
  _oneof_case_[0] = kGetClusterMapResponse;
}
inline void Response::clear_get_cluster_map_response() {
  if (_internal_has_get_cluster_map_response()) {
    if (GetArena() == nullptr) {
      delete union_.get_cluster_map_response_;
    }
    clear_has_union();
  }
}
inline ::msg::GetClusterMapResponse* Response::release_get_cluster_map_response() {
  // @@protoc_insertion_point(field_release:msg.Response.get_cluster_map_response)
  if (_internal_has_get_cluster_map_response()) {
    clear_has_union();
      ::msg::GetClusterMapResponse* temp = union_.get_cluster_map_response_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    union_.get_cluster_map_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::msg::GetClusterMapResponse& Response::_internal_get_cluster_map_response() const {
  return _internal_has_get_cluster_map_response()
      ? *union_.get_cluster_map_response_
      : *reinterpret_cast< ::msg::GetClusterMapResponse*>(&::msg::_GetClusterMapResponse_default_instance_);
}
inline const ::msg::GetClusterMapResponse& Response::get_cluster_map_response() const {
  // @@protoc_insertion_point(field_get:msg.Response.get_cluster_map_response)
  return _internal_get_cluster_map_response();
}
inline ::msg::GetClusterMapResponse* Response::unsafe_arena_release_get_cluster_map_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:msg.Response.get_cluster_map_response)
  if (_internal_has_get_cluster_map_response()) {
    clear_has_union();
    ::msg::GetClusterMapResponse* temp = union_.get_cluster_map_response_;
    union_.get_cluster_map_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_get_cluster_map_response(::msg::GetClusterMapResponse* get_cluster_map_response) {
  clear_union();
  if (get_cluster_map_response) {
    set_has_get_cluster_map_response();
    union_.get_cluster_map_response_ = get_cluster_map_response;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.Response.get_cluster_map_response)
}
inline ::msg::GetClusterMapResponse* Response::_internal_mutable_get_cluster_map_response() {
  if (!_internal_has_get_cluster_map_response()) {
    clear_union();
    set_has_get_cluster_map_response();
    union_.get_cluster_map_response_ = CreateMaybeMessage< ::msg::GetClusterMapResponse >(GetArena());
  }
  return union_.get_cluster_map_response_;
}
inline ::msg::GetClusterMapResponse* Response::mutable_get_cluster_map_response() {
  // @@protoc_insertion_point(field_mutable:msg.Response.get_cluster_map_response)
  return _internal_mutable_get_cluster_map_response();
}

// .msg.CreateImageResponse create_image_response = 11;
inline bool Response::_internal_has_create_image_response() const {
  return union_case() == kCreateImageResponse;
}
inline bool Response::has_create_image_response() const {
  return _internal_has_create_image_response();
}
inline void Response::set_has_create_image_response() {
  _oneof_case_[0] = kCreateImageResponse;
}
inline void Response::clear_create_image_response() {
  if (_internal_has_create_image_response()) {
    if (GetArena() == nullptr) {
      delete union_.create_image_response_;
    }
    clear_has_union();
  }
}
inline ::msg::CreateImageResponse* Response::release_create_image_response() {
  // @@protoc_insertion_point(field_release:msg.Response.create_image_response)
  if (_internal_has_create_image_response()) {
    clear_has_union();
      ::msg::CreateImageResponse* temp = union_.create_image_response_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    union_.create_image_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::msg::CreateImageResponse& Response::_internal_create_image_response() const {
  return _internal_has_create_image_response()
      ? *union_.create_image_response_
      : *reinterpret_cast< ::msg::CreateImageResponse*>(&::msg::_CreateImageResponse_default_instance_);
}
inline const ::msg::CreateImageResponse& Response::create_image_response() const {
  // @@protoc_insertion_point(field_get:msg.Response.create_image_response)
  return _internal_create_image_response();
}
inline ::msg::CreateImageResponse* Response::unsafe_arena_release_create_image_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:msg.Response.create_image_response)
  if (_internal_has_create_image_response()) {
    clear_has_union();
    ::msg::CreateImageResponse* temp = union_.create_image_response_;
    union_.create_image_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_create_image_response(::msg::CreateImageResponse* create_image_response) {
  clear_union();
  if (create_image_response) {
    set_has_create_image_response();
    union_.create_image_response_ = create_image_response;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.Response.create_image_response)
}
inline ::msg::CreateImageResponse* Response::_internal_mutable_create_image_response() {
  if (!_internal_has_create_image_response()) {
    clear_union();
    set_has_create_image_response();
    union_.create_image_response_ = CreateMaybeMessage< ::msg::CreateImageResponse >(GetArena());
  }
  return union_.create_image_response_;
}
inline ::msg::CreateImageResponse* Response::mutable_create_image_response() {
  // @@protoc_insertion_point(field_mutable:msg.Response.create_image_response)
  return _internal_mutable_create_image_response();
}

// .msg.RemoveImageResponse remove_image_response = 12;
inline bool Response::_internal_has_remove_image_response() const {
  return union_case() == kRemoveImageResponse;
}
inline bool Response::has_remove_image_response() const {
  return _internal_has_remove_image_response();
}
inline void Response::set_has_remove_image_response() {
  _oneof_case_[0] = kRemoveImageResponse;
}
inline void Response::clear_remove_image_response() {
  if (_internal_has_remove_image_response()) {
    if (GetArena() == nullptr) {
      delete union_.remove_image_response_;
    }
    clear_has_union();
  }
}
inline ::msg::RemoveImageResponse* Response::release_remove_image_response() {
  // @@protoc_insertion_point(field_release:msg.Response.remove_image_response)
  if (_internal_has_remove_image_response()) {
    clear_has_union();
      ::msg::RemoveImageResponse* temp = union_.remove_image_response_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    union_.remove_image_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::msg::RemoveImageResponse& Response::_internal_remove_image_response() const {
  return _internal_has_remove_image_response()
      ? *union_.remove_image_response_
      : *reinterpret_cast< ::msg::RemoveImageResponse*>(&::msg::_RemoveImageResponse_default_instance_);
}
inline const ::msg::RemoveImageResponse& Response::remove_image_response() const {
  // @@protoc_insertion_point(field_get:msg.Response.remove_image_response)
  return _internal_remove_image_response();
}
inline ::msg::RemoveImageResponse* Response::unsafe_arena_release_remove_image_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:msg.Response.remove_image_response)
  if (_internal_has_remove_image_response()) {
    clear_has_union();
    ::msg::RemoveImageResponse* temp = union_.remove_image_response_;
    union_.remove_image_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_remove_image_response(::msg::RemoveImageResponse* remove_image_response) {
  clear_union();
  if (remove_image_response) {
    set_has_remove_image_response();
    union_.remove_image_response_ = remove_image_response;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.Response.remove_image_response)
}
inline ::msg::RemoveImageResponse* Response::_internal_mutable_remove_image_response() {
  if (!_internal_has_remove_image_response()) {
    clear_union();
    set_has_remove_image_response();
    union_.remove_image_response_ = CreateMaybeMessage< ::msg::RemoveImageResponse >(GetArena());
  }
  return union_.remove_image_response_;
}
inline ::msg::RemoveImageResponse* Response::mutable_remove_image_response() {
  // @@protoc_insertion_point(field_mutable:msg.Response.remove_image_response)
  return _internal_mutable_remove_image_response();
}

// .msg.ResizeImageResponse resize_image_response = 13;
inline bool Response::_internal_has_resize_image_response() const {
  return union_case() == kResizeImageResponse;
}
inline bool Response::has_resize_image_response() const {
  return _internal_has_resize_image_response();
}
inline void Response::set_has_resize_image_response() {
  _oneof_case_[0] = kResizeImageResponse;
}
inline void Response::clear_resize_image_response() {
  if (_internal_has_resize_image_response()) {
    if (GetArena() == nullptr) {
      delete union_.resize_image_response_;
    }
    clear_has_union();
  }
}
inline ::msg::ResizeImageResponse* Response::release_resize_image_response() {
  // @@protoc_insertion_point(field_release:msg.Response.resize_image_response)
  if (_internal_has_resize_image_response()) {
    clear_has_union();
      ::msg::ResizeImageResponse* temp = union_.resize_image_response_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    union_.resize_image_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::msg::ResizeImageResponse& Response::_internal_resize_image_response() const {
  return _internal_has_resize_image_response()
      ? *union_.resize_image_response_
      : *reinterpret_cast< ::msg::ResizeImageResponse*>(&::msg::_ResizeImageResponse_default_instance_);
}
inline const ::msg::ResizeImageResponse& Response::resize_image_response() const {
  // @@protoc_insertion_point(field_get:msg.Response.resize_image_response)
  return _internal_resize_image_response();
}
inline ::msg::ResizeImageResponse* Response::unsafe_arena_release_resize_image_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:msg.Response.resize_image_response)
  if (_internal_has_resize_image_response()) {
    clear_has_union();
    ::msg::ResizeImageResponse* temp = union_.resize_image_response_;
    union_.resize_image_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_resize_image_response(::msg::ResizeImageResponse* resize_image_response) {
  clear_union();
  if (resize_image_response) {
    set_has_resize_image_response();
    union_.resize_image_response_ = resize_image_response;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.Response.resize_image_response)
}
inline ::msg::ResizeImageResponse* Response::_internal_mutable_resize_image_response() {
  if (!_internal_has_resize_image_response()) {
    clear_union();
    set_has_resize_image_response();
    union_.resize_image_response_ = CreateMaybeMessage< ::msg::ResizeImageResponse >(GetArena());
  }
  return union_.resize_image_response_;
}
inline ::msg::ResizeImageResponse* Response::mutable_resize_image_response() {
  // @@protoc_insertion_point(field_mutable:msg.Response.resize_image_response)
  return _internal_mutable_resize_image_response();
}

// .msg.GetImageInfoResponse get_imageInfo_response = 14;
inline bool Response::_internal_has_get_imageinfo_response() const {
  return union_case() == kGetImageInfoResponse;
}
inline bool Response::has_get_imageinfo_response() const {
  return _internal_has_get_imageinfo_response();
}
inline void Response::set_has_get_imageinfo_response() {
  _oneof_case_[0] = kGetImageInfoResponse;
}
inline void Response::clear_get_imageinfo_response() {
  if (_internal_has_get_imageinfo_response()) {
    if (GetArena() == nullptr) {
      delete union_.get_imageinfo_response_;
    }
    clear_has_union();
  }
}
inline ::msg::GetImageInfoResponse* Response::release_get_imageinfo_response() {
  // @@protoc_insertion_point(field_release:msg.Response.get_imageInfo_response)
  if (_internal_has_get_imageinfo_response()) {
    clear_has_union();
      ::msg::GetImageInfoResponse* temp = union_.get_imageinfo_response_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    union_.get_imageinfo_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::msg::GetImageInfoResponse& Response::_internal_get_imageinfo_response() const {
  return _internal_has_get_imageinfo_response()
      ? *union_.get_imageinfo_response_
      : *reinterpret_cast< ::msg::GetImageInfoResponse*>(&::msg::_GetImageInfoResponse_default_instance_);
}
inline const ::msg::GetImageInfoResponse& Response::get_imageinfo_response() const {
  // @@protoc_insertion_point(field_get:msg.Response.get_imageInfo_response)
  return _internal_get_imageinfo_response();
}
inline ::msg::GetImageInfoResponse* Response::unsafe_arena_release_get_imageinfo_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:msg.Response.get_imageInfo_response)
  if (_internal_has_get_imageinfo_response()) {
    clear_has_union();
    ::msg::GetImageInfoResponse* temp = union_.get_imageinfo_response_;
    union_.get_imageinfo_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_get_imageinfo_response(::msg::GetImageInfoResponse* get_imageinfo_response) {
  clear_union();
  if (get_imageinfo_response) {
    set_has_get_imageinfo_response();
    union_.get_imageinfo_response_ = get_imageinfo_response;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.Response.get_imageInfo_response)
}
inline ::msg::GetImageInfoResponse* Response::_internal_mutable_get_imageinfo_response() {
  if (!_internal_has_get_imageinfo_response()) {
    clear_union();
    set_has_get_imageinfo_response();
    union_.get_imageinfo_response_ = CreateMaybeMessage< ::msg::GetImageInfoResponse >(GetArena());
  }
  return union_.get_imageinfo_response_;
}
inline ::msg::GetImageInfoResponse* Response::mutable_get_imageinfo_response() {
  // @@protoc_insertion_point(field_mutable:msg.Response.get_imageInfo_response)
  return _internal_mutable_get_imageinfo_response();
}

inline bool Response::has_union() const {
  return union_case() != UNION_NOT_SET;
}
inline void Response::clear_has_union() {
  _oneof_case_[0] = UNION_NOT_SET;
}
inline Response::UnionCase Response::union_case() const {
  return Response::UnionCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace msg

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::msg::GetPgMapErrorCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::GetPgMapErrorCode>() {
  return ::msg::GetPgMapErrorCode_descriptor();
}
template <> struct is_proto_enum< ::msg::OsdMapErrorCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::OsdMapErrorCode>() {
  return ::msg::OsdMapErrorCode_descriptor();
}
template <> struct is_proto_enum< ::msg::CreateImageErrorCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::CreateImageErrorCode>() {
  return ::msg::CreateImageErrorCode_descriptor();
}
template <> struct is_proto_enum< ::msg::RemoveImageErrorCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::RemoveImageErrorCode>() {
  return ::msg::RemoveImageErrorCode_descriptor();
}
template <> struct is_proto_enum< ::msg::ResizeImageErrorCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::ResizeImageErrorCode>() {
  return ::msg::ResizeImageErrorCode_descriptor();
}
template <> struct is_proto_enum< ::msg::GetImageErrorCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::GetImageErrorCode>() {
  return ::msg::GetImageErrorCode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_message_2eproto
