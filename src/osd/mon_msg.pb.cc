// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mon_msg.proto

#include "mon_msg.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_mon_5fmsg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ApplyIDRequest_mon_5fmsg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mon_5fmsg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ApplyIDResponse_mon_5fmsg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mon_5fmsg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BootRequest_mon_5fmsg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mon_5fmsg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BootResponse_mon_5fmsg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mon_5fmsg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CreatePoolRequest_mon_5fmsg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mon_5fmsg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CreatePoolResponse_mon_5fmsg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mon_5fmsg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeletePoolRequest_mon_5fmsg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mon_5fmsg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeletePoolResponse_mon_5fmsg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mon_5fmsg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GetClusterMapRequest_mon_5fmsg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mon_5fmsg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GetClusterMapResponse_mon_5fmsg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mon_5fmsg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetOsdMapRequest_mon_5fmsg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mon_5fmsg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetOsdMapResponse_mon_5fmsg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mon_5fmsg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetPgMapRequest_mon_5fmsg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mon_5fmsg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetPgMapRequest_PoolVersionsEntry_DoNotUse_mon_5fmsg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mon_5fmsg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_GetPgMapResponse_mon_5fmsg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mon_5fmsg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetPgMapResponse_ErrorcodeEntry_DoNotUse_mon_5fmsg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mon_5fmsg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetPgMapResponse_PgsEntry_DoNotUse_mon_5fmsg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mon_5fmsg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetPgMapResponse_PoolidPgmapversionEntry_DoNotUse_mon_5fmsg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mon_5fmsg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HeartbeatRequest_mon_5fmsg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mon_5fmsg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HeartbeatResponse_mon_5fmsg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mon_5fmsg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ListPoolsRequest_mon_5fmsg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mon_5fmsg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListPoolsResponse_mon_5fmsg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mon_5fmsg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OsdDynamicInfo_mon_5fmsg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mon_5fmsg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OsdStopRequest_mon_5fmsg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mon_5fmsg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OsdStopResponse_mon_5fmsg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mon_5fmsg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PGInfo_mon_5fmsg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mon_5fmsg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PGInfos_mon_5fmsg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mon_5fmsg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_poolinfo_mon_5fmsg_2eproto;
namespace msg {
class CreatePoolRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreatePoolRequest> _instance;
} _CreatePoolRequest_default_instance_;
class CreatePoolResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreatePoolResponse> _instance;
} _CreatePoolResponse_default_instance_;
class ListPoolsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListPoolsRequest> _instance;
} _ListPoolsRequest_default_instance_;
class poolinfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<poolinfo> _instance;
} _poolinfo_default_instance_;
class ListPoolsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListPoolsResponse> _instance;
} _ListPoolsResponse_default_instance_;
class DeletePoolRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeletePoolRequest> _instance;
} _DeletePoolRequest_default_instance_;
class DeletePoolResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeletePoolResponse> _instance;
} _DeletePoolResponse_default_instance_;
class ApplyIDRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ApplyIDRequest> _instance;
} _ApplyIDRequest_default_instance_;
class ApplyIDResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ApplyIDResponse> _instance;
} _ApplyIDResponse_default_instance_;
class BootRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BootRequest> _instance;
} _BootRequest_default_instance_;
class PGInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PGInfo> _instance;
} _PGInfo_default_instance_;
class PGInfosDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PGInfos> _instance;
} _PGInfos_default_instance_;
class GetPgMapRequest_PoolVersionsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetPgMapRequest_PoolVersionsEntry_DoNotUse> _instance;
} _GetPgMapRequest_PoolVersionsEntry_DoNotUse_default_instance_;
class GetPgMapRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetPgMapRequest> _instance;
} _GetPgMapRequest_default_instance_;
class OsdDynamicInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OsdDynamicInfo> _instance;
} _OsdDynamicInfo_default_instance_;
class GetPgMapResponse_ErrorcodeEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetPgMapResponse_ErrorcodeEntry_DoNotUse> _instance;
} _GetPgMapResponse_ErrorcodeEntry_DoNotUse_default_instance_;
class GetPgMapResponse_PoolidPgmapversionEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetPgMapResponse_PoolidPgmapversionEntry_DoNotUse> _instance;
} _GetPgMapResponse_PoolidPgmapversionEntry_DoNotUse_default_instance_;
class GetPgMapResponse_PgsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetPgMapResponse_PgsEntry_DoNotUse> _instance;
} _GetPgMapResponse_PgsEntry_DoNotUse_default_instance_;
class GetPgMapResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetPgMapResponse> _instance;
} _GetPgMapResponse_default_instance_;
class GetOsdMapRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetOsdMapRequest> _instance;
} _GetOsdMapRequest_default_instance_;
class GetOsdMapResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetOsdMapResponse> _instance;
} _GetOsdMapResponse_default_instance_;
class GetClusterMapRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetClusterMapRequest> _instance;
} _GetClusterMapRequest_default_instance_;
class GetClusterMapResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetClusterMapResponse> _instance;
} _GetClusterMapResponse_default_instance_;
class BootResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BootResponse> _instance;
} _BootResponse_default_instance_;
class OsdStopRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OsdStopRequest> _instance;
} _OsdStopRequest_default_instance_;
class OsdStopResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OsdStopResponse> _instance;
} _OsdStopResponse_default_instance_;
class HeartbeatRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HeartbeatRequest> _instance;
} _HeartbeatRequest_default_instance_;
class HeartbeatResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HeartbeatResponse> _instance;
} _HeartbeatResponse_default_instance_;
class RequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Request> _instance;
  const ::msg::BootRequest* boot_request_;
  const ::msg::OsdStopRequest* osd_stop_request_;
  const ::msg::HeartbeatRequest* heartbeat_request_;
  const ::msg::GetOsdMapRequest* get_osdmap_request_;
  const ::msg::ListPoolsRequest* list_pools_request_;
  const ::msg::ApplyIDRequest* apply_id_request_;
  const ::msg::CreatePoolRequest* create_pool_request_;
  const ::msg::GetPgMapRequest* get_pgmap_request_;
  const ::msg::DeletePoolRequest* delete_pool_request_;
  const ::msg::GetClusterMapRequest* get_cluster_map_request_;
} _Request_default_instance_;
class ResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Response> _instance;
  const ::msg::BootResponse* boot_response_;
  const ::msg::OsdStopResponse* osd_stop_response_;
  const ::msg::HeartbeatResponse* heartbeat_response_;
  const ::msg::GetOsdMapResponse* get_osdmap_response_;
  const ::msg::ListPoolsResponse* list_pools_response_;
  const ::msg::ApplyIDResponse* apply_id_response_;
  const ::msg::CreatePoolResponse* create_pool_response_;
  const ::msg::GetPgMapResponse* get_pgmap_response_;
  const ::msg::DeletePoolResponse* delete_pool_response_;
  const ::msg::GetClusterMapResponse* get_cluster_map_response_;
} _Response_default_instance_;
}  // namespace msg
static void InitDefaultsscc_info_ApplyIDRequest_mon_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_ApplyIDRequest_default_instance_;
    new (ptr) ::msg::ApplyIDRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::ApplyIDRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ApplyIDRequest_mon_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ApplyIDRequest_mon_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_ApplyIDResponse_mon_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_ApplyIDResponse_default_instance_;
    new (ptr) ::msg::ApplyIDResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::ApplyIDResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ApplyIDResponse_mon_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ApplyIDResponse_mon_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_BootRequest_mon_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_BootRequest_default_instance_;
    new (ptr) ::msg::BootRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::BootRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BootRequest_mon_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BootRequest_mon_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_BootResponse_mon_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_BootResponse_default_instance_;
    new (ptr) ::msg::BootResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::BootResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BootResponse_mon_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BootResponse_mon_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_CreatePoolRequest_mon_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_CreatePoolRequest_default_instance_;
    new (ptr) ::msg::CreatePoolRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::CreatePoolRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CreatePoolRequest_mon_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CreatePoolRequest_mon_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_CreatePoolResponse_mon_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_CreatePoolResponse_default_instance_;
    new (ptr) ::msg::CreatePoolResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::CreatePoolResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CreatePoolResponse_mon_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CreatePoolResponse_mon_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_DeletePoolRequest_mon_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_DeletePoolRequest_default_instance_;
    new (ptr) ::msg::DeletePoolRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::DeletePoolRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeletePoolRequest_mon_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeletePoolRequest_mon_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_DeletePoolResponse_mon_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_DeletePoolResponse_default_instance_;
    new (ptr) ::msg::DeletePoolResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::DeletePoolResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeletePoolResponse_mon_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeletePoolResponse_mon_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_GetClusterMapRequest_mon_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_GetClusterMapRequest_default_instance_;
    new (ptr) ::msg::GetClusterMapRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::GetClusterMapRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GetClusterMapRequest_mon_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_GetClusterMapRequest_mon_5fmsg_2eproto}, {
      &scc_info_GetOsdMapRequest_mon_5fmsg_2eproto.base,
      &scc_info_GetPgMapRequest_mon_5fmsg_2eproto.base,}};

static void InitDefaultsscc_info_GetClusterMapResponse_mon_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_GetClusterMapResponse_default_instance_;
    new (ptr) ::msg::GetClusterMapResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::GetClusterMapResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GetClusterMapResponse_mon_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_GetClusterMapResponse_mon_5fmsg_2eproto}, {
      &scc_info_GetOsdMapResponse_mon_5fmsg_2eproto.base,
      &scc_info_GetPgMapResponse_mon_5fmsg_2eproto.base,}};

static void InitDefaultsscc_info_GetOsdMapRequest_mon_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_GetOsdMapRequest_default_instance_;
    new (ptr) ::msg::GetOsdMapRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::GetOsdMapRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetOsdMapRequest_mon_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetOsdMapRequest_mon_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_GetOsdMapResponse_mon_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_GetOsdMapResponse_default_instance_;
    new (ptr) ::msg::GetOsdMapResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::GetOsdMapResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetOsdMapResponse_mon_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetOsdMapResponse_mon_5fmsg_2eproto}, {
      &scc_info_OsdDynamicInfo_mon_5fmsg_2eproto.base,}};

static void InitDefaultsscc_info_GetPgMapRequest_mon_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_GetPgMapRequest_default_instance_;
    new (ptr) ::msg::GetPgMapRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::GetPgMapRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetPgMapRequest_mon_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetPgMapRequest_mon_5fmsg_2eproto}, {
      &scc_info_GetPgMapRequest_PoolVersionsEntry_DoNotUse_mon_5fmsg_2eproto.base,}};

static void InitDefaultsscc_info_GetPgMapRequest_PoolVersionsEntry_DoNotUse_mon_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_GetPgMapRequest_PoolVersionsEntry_DoNotUse_default_instance_;
    new (ptr) ::msg::GetPgMapRequest_PoolVersionsEntry_DoNotUse();
  }
  ::msg::GetPgMapRequest_PoolVersionsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetPgMapRequest_PoolVersionsEntry_DoNotUse_mon_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetPgMapRequest_PoolVersionsEntry_DoNotUse_mon_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_GetPgMapResponse_mon_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_GetPgMapResponse_default_instance_;
    new (ptr) ::msg::GetPgMapResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::GetPgMapResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_GetPgMapResponse_mon_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_GetPgMapResponse_mon_5fmsg_2eproto}, {
      &scc_info_GetPgMapResponse_ErrorcodeEntry_DoNotUse_mon_5fmsg_2eproto.base,
      &scc_info_GetPgMapResponse_PoolidPgmapversionEntry_DoNotUse_mon_5fmsg_2eproto.base,
      &scc_info_GetPgMapResponse_PgsEntry_DoNotUse_mon_5fmsg_2eproto.base,}};

static void InitDefaultsscc_info_GetPgMapResponse_ErrorcodeEntry_DoNotUse_mon_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_GetPgMapResponse_ErrorcodeEntry_DoNotUse_default_instance_;
    new (ptr) ::msg::GetPgMapResponse_ErrorcodeEntry_DoNotUse();
  }
  ::msg::GetPgMapResponse_ErrorcodeEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetPgMapResponse_ErrorcodeEntry_DoNotUse_mon_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetPgMapResponse_ErrorcodeEntry_DoNotUse_mon_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_GetPgMapResponse_PgsEntry_DoNotUse_mon_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_GetPgMapResponse_PgsEntry_DoNotUse_default_instance_;
    new (ptr) ::msg::GetPgMapResponse_PgsEntry_DoNotUse();
  }
  ::msg::GetPgMapResponse_PgsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetPgMapResponse_PgsEntry_DoNotUse_mon_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetPgMapResponse_PgsEntry_DoNotUse_mon_5fmsg_2eproto}, {
      &scc_info_PGInfos_mon_5fmsg_2eproto.base,}};

static void InitDefaultsscc_info_GetPgMapResponse_PoolidPgmapversionEntry_DoNotUse_mon_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_GetPgMapResponse_PoolidPgmapversionEntry_DoNotUse_default_instance_;
    new (ptr) ::msg::GetPgMapResponse_PoolidPgmapversionEntry_DoNotUse();
  }
  ::msg::GetPgMapResponse_PoolidPgmapversionEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetPgMapResponse_PoolidPgmapversionEntry_DoNotUse_mon_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetPgMapResponse_PoolidPgmapversionEntry_DoNotUse_mon_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_HeartbeatRequest_mon_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_HeartbeatRequest_default_instance_;
    new (ptr) ::msg::HeartbeatRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::HeartbeatRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HeartbeatRequest_mon_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HeartbeatRequest_mon_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_HeartbeatResponse_mon_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_HeartbeatResponse_default_instance_;
    new (ptr) ::msg::HeartbeatResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::HeartbeatResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HeartbeatResponse_mon_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HeartbeatResponse_mon_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_ListPoolsRequest_mon_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_ListPoolsRequest_default_instance_;
    new (ptr) ::msg::ListPoolsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::ListPoolsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ListPoolsRequest_mon_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ListPoolsRequest_mon_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_ListPoolsResponse_mon_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_ListPoolsResponse_default_instance_;
    new (ptr) ::msg::ListPoolsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::ListPoolsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListPoolsResponse_mon_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListPoolsResponse_mon_5fmsg_2eproto}, {
      &scc_info_poolinfo_mon_5fmsg_2eproto.base,}};

static void InitDefaultsscc_info_OsdDynamicInfo_mon_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_OsdDynamicInfo_default_instance_;
    new (ptr) ::msg::OsdDynamicInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::OsdDynamicInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OsdDynamicInfo_mon_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OsdDynamicInfo_mon_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_OsdStopRequest_mon_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_OsdStopRequest_default_instance_;
    new (ptr) ::msg::OsdStopRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::OsdStopRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OsdStopRequest_mon_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OsdStopRequest_mon_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_OsdStopResponse_mon_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_OsdStopResponse_default_instance_;
    new (ptr) ::msg::OsdStopResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::OsdStopResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OsdStopResponse_mon_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OsdStopResponse_mon_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_PGInfo_mon_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_PGInfo_default_instance_;
    new (ptr) ::msg::PGInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::PGInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PGInfo_mon_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PGInfo_mon_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_PGInfos_mon_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_PGInfos_default_instance_;
    new (ptr) ::msg::PGInfos();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::PGInfos::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PGInfos_mon_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PGInfos_mon_5fmsg_2eproto}, {
      &scc_info_PGInfo_mon_5fmsg_2eproto.base,}};

static void InitDefaultsscc_info_Request_mon_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_Request_default_instance_;
    new (ptr) ::msg::Request();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::Request::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<10> scc_info_Request_mon_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 10, 0, InitDefaultsscc_info_Request_mon_5fmsg_2eproto}, {
      &scc_info_BootRequest_mon_5fmsg_2eproto.base,
      &scc_info_OsdStopRequest_mon_5fmsg_2eproto.base,
      &scc_info_HeartbeatRequest_mon_5fmsg_2eproto.base,
      &scc_info_GetOsdMapRequest_mon_5fmsg_2eproto.base,
      &scc_info_ListPoolsRequest_mon_5fmsg_2eproto.base,
      &scc_info_ApplyIDRequest_mon_5fmsg_2eproto.base,
      &scc_info_CreatePoolRequest_mon_5fmsg_2eproto.base,
      &scc_info_GetPgMapRequest_mon_5fmsg_2eproto.base,
      &scc_info_DeletePoolRequest_mon_5fmsg_2eproto.base,
      &scc_info_GetClusterMapRequest_mon_5fmsg_2eproto.base,}};

static void InitDefaultsscc_info_Response_mon_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_Response_default_instance_;
    new (ptr) ::msg::Response();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::Response::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<10> scc_info_Response_mon_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 10, 0, InitDefaultsscc_info_Response_mon_5fmsg_2eproto}, {
      &scc_info_BootResponse_mon_5fmsg_2eproto.base,
      &scc_info_OsdStopResponse_mon_5fmsg_2eproto.base,
      &scc_info_HeartbeatResponse_mon_5fmsg_2eproto.base,
      &scc_info_GetOsdMapResponse_mon_5fmsg_2eproto.base,
      &scc_info_ListPoolsResponse_mon_5fmsg_2eproto.base,
      &scc_info_ApplyIDResponse_mon_5fmsg_2eproto.base,
      &scc_info_CreatePoolResponse_mon_5fmsg_2eproto.base,
      &scc_info_GetPgMapResponse_mon_5fmsg_2eproto.base,
      &scc_info_DeletePoolResponse_mon_5fmsg_2eproto.base,
      &scc_info_GetClusterMapResponse_mon_5fmsg_2eproto.base,}};

static void InitDefaultsscc_info_poolinfo_mon_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_poolinfo_default_instance_;
    new (ptr) ::msg::poolinfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::poolinfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_poolinfo_mon_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_poolinfo_mon_5fmsg_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_mon_5fmsg_2eproto[30];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_mon_5fmsg_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_mon_5fmsg_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_mon_5fmsg_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CreatePoolRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::msg::CreatePoolRequest, name_),
  PROTOBUF_FIELD_OFFSET(::msg::CreatePoolRequest, pgsize_),
  PROTOBUF_FIELD_OFFSET(::msg::CreatePoolRequest, pgcount_),
  PROTOBUF_FIELD_OFFSET(::msg::CreatePoolRequest, failuredomain_),
  PROTOBUF_FIELD_OFFSET(::msg::CreatePoolRequest, root_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CreatePoolResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::msg::CreatePoolResponse, ok_),
  PROTOBUF_FIELD_OFFSET(::msg::CreatePoolResponse, poolid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::ListPoolsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::poolinfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::msg::poolinfo, poolid_),
  PROTOBUF_FIELD_OFFSET(::msg::poolinfo, name_),
  PROTOBUF_FIELD_OFFSET(::msg::poolinfo, pgsize_),
  PROTOBUF_FIELD_OFFSET(::msg::poolinfo, pgcount_),
  PROTOBUF_FIELD_OFFSET(::msg::poolinfo, failuredomain_),
  PROTOBUF_FIELD_OFFSET(::msg::poolinfo, root_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::ListPoolsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::msg::ListPoolsResponse, pi_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::DeletePoolRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::msg::DeletePoolRequest, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::DeletePoolResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::msg::DeletePoolResponse, ok_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::ApplyIDRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::msg::ApplyIDRequest, uuid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::ApplyIDResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::msg::ApplyIDResponse, uuid_),
  PROTOBUF_FIELD_OFFSET(::msg::ApplyIDResponse, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::BootRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::msg::BootRequest, osd_id_),
  PROTOBUF_FIELD_OFFSET(::msg::BootRequest, uuid_),
  PROTOBUF_FIELD_OFFSET(::msg::BootRequest, size_),
  PROTOBUF_FIELD_OFFSET(::msg::BootRequest, port_),
  PROTOBUF_FIELD_OFFSET(::msg::BootRequest, address_),
  PROTOBUF_FIELD_OFFSET(::msg::BootRequest, host_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::PGInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::msg::PGInfo, pgid_),
  PROTOBUF_FIELD_OFFSET(::msg::PGInfo, osdid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::PGInfos, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::msg::PGInfos, pi_),
  PROTOBUF_FIELD_OFFSET(::msg::GetPgMapRequest_PoolVersionsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::GetPgMapRequest_PoolVersionsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::msg::GetPgMapRequest_PoolVersionsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::msg::GetPgMapRequest_PoolVersionsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::GetPgMapRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::msg::GetPgMapRequest, pool_versions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::OsdDynamicInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::msg::OsdDynamicInfo, osdid_),
  PROTOBUF_FIELD_OFFSET(::msg::OsdDynamicInfo, address_),
  PROTOBUF_FIELD_OFFSET(::msg::OsdDynamicInfo, port_),
  PROTOBUF_FIELD_OFFSET(::msg::OsdDynamicInfo, isin_),
  PROTOBUF_FIELD_OFFSET(::msg::OsdDynamicInfo, isup_),
  PROTOBUF_FIELD_OFFSET(::msg::OsdDynamicInfo, ispendingcreate_),
  PROTOBUF_FIELD_OFFSET(::msg::GetPgMapResponse_ErrorcodeEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::GetPgMapResponse_ErrorcodeEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::msg::GetPgMapResponse_ErrorcodeEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::msg::GetPgMapResponse_ErrorcodeEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::msg::GetPgMapResponse_PoolidPgmapversionEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::GetPgMapResponse_PoolidPgmapversionEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::msg::GetPgMapResponse_PoolidPgmapversionEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::msg::GetPgMapResponse_PoolidPgmapversionEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::msg::GetPgMapResponse_PgsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::GetPgMapResponse_PgsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::msg::GetPgMapResponse_PgsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::msg::GetPgMapResponse_PgsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::GetPgMapResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::msg::GetPgMapResponse, errorcode_),
  PROTOBUF_FIELD_OFFSET(::msg::GetPgMapResponse, poolid_pgmapversion_),
  PROTOBUF_FIELD_OFFSET(::msg::GetPgMapResponse, pgs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::GetOsdMapRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::msg::GetOsdMapRequest, osdid_),
  PROTOBUF_FIELD_OFFSET(::msg::GetOsdMapRequest, currentversion_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::GetOsdMapResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::msg::GetOsdMapResponse, errorcode_),
  PROTOBUF_FIELD_OFFSET(::msg::GetOsdMapResponse, osdmapversion_),
  PROTOBUF_FIELD_OFFSET(::msg::GetOsdMapResponse, osds_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::GetClusterMapRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::msg::GetClusterMapRequest, gom_request_),
  PROTOBUF_FIELD_OFFSET(::msg::GetClusterMapRequest, gpm_request_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::GetClusterMapResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::msg::GetClusterMapResponse, gom_response_),
  PROTOBUF_FIELD_OFFSET(::msg::GetClusterMapResponse, gpm_response_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::BootResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::msg::BootResponse, ok_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::OsdStopRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::msg::OsdStopRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::OsdStopResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::msg::OsdStopResponse, ok_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::HeartbeatRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::msg::HeartbeatRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::HeartbeatResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::msg::HeartbeatResponse, ok_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::Request, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::msg::Request, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::msg::RequestDefaultTypeInternal, boot_request_),
  offsetof(::msg::RequestDefaultTypeInternal, osd_stop_request_),
  offsetof(::msg::RequestDefaultTypeInternal, heartbeat_request_),
  offsetof(::msg::RequestDefaultTypeInternal, get_osdmap_request_),
  offsetof(::msg::RequestDefaultTypeInternal, list_pools_request_),
  offsetof(::msg::RequestDefaultTypeInternal, apply_id_request_),
  offsetof(::msg::RequestDefaultTypeInternal, create_pool_request_),
  offsetof(::msg::RequestDefaultTypeInternal, get_pgmap_request_),
  offsetof(::msg::RequestDefaultTypeInternal, delete_pool_request_),
  offsetof(::msg::RequestDefaultTypeInternal, get_cluster_map_request_),
  PROTOBUF_FIELD_OFFSET(::msg::Request, union_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::Response, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::msg::Response, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::msg::ResponseDefaultTypeInternal, boot_response_),
  offsetof(::msg::ResponseDefaultTypeInternal, osd_stop_response_),
  offsetof(::msg::ResponseDefaultTypeInternal, heartbeat_response_),
  offsetof(::msg::ResponseDefaultTypeInternal, get_osdmap_response_),
  offsetof(::msg::ResponseDefaultTypeInternal, list_pools_response_),
  offsetof(::msg::ResponseDefaultTypeInternal, apply_id_response_),
  offsetof(::msg::ResponseDefaultTypeInternal, create_pool_response_),
  offsetof(::msg::ResponseDefaultTypeInternal, get_pgmap_response_),
  offsetof(::msg::ResponseDefaultTypeInternal, delete_pool_response_),
  offsetof(::msg::ResponseDefaultTypeInternal, get_cluster_map_response_),
  PROTOBUF_FIELD_OFFSET(::msg::Response, union_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::msg::CreatePoolRequest)},
  { 10, -1, sizeof(::msg::CreatePoolResponse)},
  { 17, -1, sizeof(::msg::ListPoolsRequest)},
  { 22, -1, sizeof(::msg::poolinfo)},
  { 33, -1, sizeof(::msg::ListPoolsResponse)},
  { 39, -1, sizeof(::msg::DeletePoolRequest)},
  { 45, -1, sizeof(::msg::DeletePoolResponse)},
  { 51, -1, sizeof(::msg::ApplyIDRequest)},
  { 57, -1, sizeof(::msg::ApplyIDResponse)},
  { 64, -1, sizeof(::msg::BootRequest)},
  { 75, -1, sizeof(::msg::PGInfo)},
  { 82, -1, sizeof(::msg::PGInfos)},
  { 88, 95, sizeof(::msg::GetPgMapRequest_PoolVersionsEntry_DoNotUse)},
  { 97, -1, sizeof(::msg::GetPgMapRequest)},
  { 103, -1, sizeof(::msg::OsdDynamicInfo)},
  { 114, 121, sizeof(::msg::GetPgMapResponse_ErrorcodeEntry_DoNotUse)},
  { 123, 130, sizeof(::msg::GetPgMapResponse_PoolidPgmapversionEntry_DoNotUse)},
  { 132, 139, sizeof(::msg::GetPgMapResponse_PgsEntry_DoNotUse)},
  { 141, -1, sizeof(::msg::GetPgMapResponse)},
  { 149, -1, sizeof(::msg::GetOsdMapRequest)},
  { 156, -1, sizeof(::msg::GetOsdMapResponse)},
  { 164, -1, sizeof(::msg::GetClusterMapRequest)},
  { 171, -1, sizeof(::msg::GetClusterMapResponse)},
  { 178, -1, sizeof(::msg::BootResponse)},
  { 184, -1, sizeof(::msg::OsdStopRequest)},
  { 190, -1, sizeof(::msg::OsdStopResponse)},
  { 196, -1, sizeof(::msg::HeartbeatRequest)},
  { 202, -1, sizeof(::msg::HeartbeatResponse)},
  { 208, -1, sizeof(::msg::Request)},
  { 224, -1, sizeof(::msg::Response)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msg::_CreatePoolRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msg::_CreatePoolResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msg::_ListPoolsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msg::_poolinfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msg::_ListPoolsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msg::_DeletePoolRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msg::_DeletePoolResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msg::_ApplyIDRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msg::_ApplyIDResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msg::_BootRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msg::_PGInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msg::_PGInfos_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msg::_GetPgMapRequest_PoolVersionsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msg::_GetPgMapRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msg::_OsdDynamicInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msg::_GetPgMapResponse_ErrorcodeEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msg::_GetPgMapResponse_PoolidPgmapversionEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msg::_GetPgMapResponse_PgsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msg::_GetPgMapResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msg::_GetOsdMapRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msg::_GetOsdMapResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msg::_GetClusterMapRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msg::_GetClusterMapResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msg::_BootResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msg::_OsdStopRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msg::_OsdStopResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msg::_HeartbeatRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msg::_HeartbeatResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msg::_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msg::_Response_default_instance_),
};

const char descriptor_table_protodef_mon_5fmsg_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rmon_msg.proto\022\003msg\"g\n\021CreatePoolReques"
  "t\022\014\n\004name\030\001 \001(\t\022\016\n\006pgsize\030\002 \001(\005\022\017\n\007pgcou"
  "nt\030\003 \001(\005\022\025\n\rfailuredomain\030\004 \001(\t\022\014\n\004root\030"
  "\005 \001(\t\"0\n\022CreatePoolResponse\022\n\n\002ok\030\001 \001(\010\022"
  "\016\n\006poolid\030\002 \001(\005\"\022\n\020ListPoolsRequest\"n\n\010p"
  "oolinfo\022\016\n\006poolid\030\001 \001(\005\022\014\n\004name\030\002 \001(\t\022\016\n"
  "\006pgsize\030\003 \001(\005\022\017\n\007pgcount\030\004 \001(\005\022\025\n\rfailur"
  "edomain\030\005 \001(\t\022\014\n\004root\030\006 \001(\t\".\n\021ListPools"
  "Response\022\031\n\002pi\030\001 \003(\0132\r.msg.poolinfo\"!\n\021D"
  "eletePoolRequest\022\014\n\004name\030\001 \001(\t\" \n\022Delete"
  "PoolResponse\022\n\n\002ok\030\001 \001(\010\"\036\n\016ApplyIDReque"
  "st\022\014\n\004uuid\030\001 \001(\t\"+\n\017ApplyIDResponse\022\014\n\004u"
  "uid\030\001 \001(\t\022\n\n\002id\030\002 \001(\005\"f\n\013BootRequest\022\016\n\006"
  "osd_id\030\001 \001(\005\022\014\n\004uuid\030\002 \001(\t\022\014\n\004size\030\003 \001(\003"
  "\022\014\n\004port\030\004 \001(\r\022\017\n\007address\030\005 \001(\t\022\014\n\004host\030"
  "\006 \001(\t\"%\n\006PGInfo\022\014\n\004pgid\030\002 \001(\005\022\r\n\005osdid\030\003"
  " \003(\005\"\"\n\007PGInfos\022\027\n\002pi\030\001 \003(\0132\013.msg.PGInfo"
  "\"\205\001\n\017GetPgMapRequest\022=\n\rpool_versions\030\001 "
  "\003(\0132&.msg.GetPgMapRequest.PoolVersionsEn"
  "try\0323\n\021PoolVersionsEntry\022\013\n\003key\030\001 \001(\005\022\r\n"
  "\005value\030\002 \001(\003:\0028\001\"s\n\016OsdDynamicInfo\022\r\n\005os"
  "did\030\001 \001(\005\022\017\n\007address\030\002 \001(\t\022\014\n\004port\030\003 \001(\005"
  "\022\014\n\004isin\030\004 \001(\010\022\014\n\004isup\030\005 \001(\010\022\027\n\017ispendin"
  "gcreate\030\006 \001(\010\"\203\003\n\020GetPgMapResponse\0227\n\ter"
  "rorcode\030\001 \003(\0132$.msg.GetPgMapResponse.Err"
  "orcodeEntry\022J\n\023poolid_pgmapversion\030\002 \003(\013"
  "2-.msg.GetPgMapResponse.PoolidPgmapversi"
  "onEntry\022+\n\003pgs\030\003 \003(\0132\036.msg.GetPgMapRespo"
  "nse.PgsEntry\032H\n\016ErrorcodeEntry\022\013\n\003key\030\001 "
  "\001(\005\022%\n\005value\030\002 \001(\0162\026.msg.GetPgMapErrorCo"
  "de:\0028\001\0329\n\027PoolidPgmapversionEntry\022\013\n\003key"
  "\030\001 \001(\005\022\r\n\005value\030\002 \001(\003:\0028\001\0328\n\010PgsEntry\022\013\n"
  "\003key\030\001 \001(\005\022\033\n\005value\030\002 \001(\0132\014.msg.PGInfos:"
  "\0028\001\"9\n\020GetOsdMapRequest\022\r\n\005osdid\030\001 \001(\005\022\026"
  "\n\016currentversion\030\002 \001(\003\"v\n\021GetOsdMapRespo"
  "nse\022\'\n\terrorcode\030\001 \001(\0162\024.msg.OsdMapError"
  "Code\022\025\n\rosdmapversion\030\002 \001(\003\022!\n\004osds\030\003 \003("
  "\0132\023.msg.OsdDynamicInfo\"m\n\024GetClusterMapR"
  "equest\022*\n\013gom_request\030\001 \001(\0132\025.msg.GetOsd"
  "MapRequest\022)\n\013gpm_request\030\002 \001(\0132\024.msg.Ge"
  "tPgMapRequest\"r\n\025GetClusterMapResponse\022,"
  "\n\014gom_response\030\001 \001(\0132\026.msg.GetOsdMapResp"
  "onse\022+\n\014gpm_response\030\002 \001(\0132\025.msg.GetPgMa"
  "pResponse\"\032\n\014BootResponse\022\n\n\002ok\030\001 \001(\010\"\034\n"
  "\016OsdStopRequest\022\n\n\002id\030\001 \001(\005\"\035\n\017OsdStopRe"
  "sponse\022\n\n\002ok\030\001 \001(\010\"\036\n\020HeartbeatRequest\022\n"
  "\n\002id\030\001 \001(\005\"\037\n\021HeartbeatResponse\022\n\n\002ok\030\001 "
  "\001(\010\"\233\004\n\007Request\022(\n\014boot_request\030\001 \001(\0132\020."
  "msg.BootRequestH\000\022/\n\020osd_stop_request\030\002 "
  "\001(\0132\023.msg.OsdStopRequestH\000\0222\n\021heartbeat_"
  "request\030\003 \001(\0132\025.msg.HeartbeatRequestH\000\0223"
  "\n\022get_osdmap_request\030\004 \001(\0132\025.msg.GetOsdM"
  "apRequestH\000\0223\n\022list_pools_request\030\005 \001(\0132"
  "\025.msg.ListPoolsRequestH\000\022/\n\020apply_id_req"
  "uest\030\006 \001(\0132\023.msg.ApplyIDRequestH\000\0225\n\023cre"
  "ate_pool_request\030\007 \001(\0132\026.msg.CreatePoolR"
  "equestH\000\0221\n\021get_pgmap_request\030\010 \001(\0132\024.ms"
  "g.GetPgMapRequestH\000\0225\n\023delete_pool_reque"
  "st\030\t \001(\0132\026.msg.DeletePoolRequestH\000\022<\n\027ge"
  "t_cluster_map_request\030\n \001(\0132\031.msg.GetClu"
  "sterMapRequestH\000B\007\n\005union\"\260\004\n\010Response\022*"
  "\n\rboot_response\030\001 \001(\0132\021.msg.BootResponse"
  "H\000\0221\n\021osd_stop_response\030\002 \001(\0132\024.msg.OsdS"
  "topResponseH\000\0224\n\022heartbeat_response\030\003 \001("
  "\0132\026.msg.HeartbeatResponseH\000\0225\n\023get_osdma"
  "p_response\030\004 \001(\0132\026.msg.GetOsdMapResponse"
  "H\000\0225\n\023list_pools_response\030\005 \001(\0132\026.msg.Li"
  "stPoolsResponseH\000\0221\n\021apply_id_response\030\006"
  " \001(\0132\024.msg.ApplyIDResponseH\000\0227\n\024create_p"
  "ool_response\030\007 \001(\0132\027.msg.CreatePoolRespo"
  "nseH\000\0223\n\022get_pgmap_response\030\010 \001(\0132\025.msg."
  "GetPgMapResponseH\000\0227\n\024delete_pool_respon"
  "se\030\t \001(\0132\027.msg.DeletePoolResponseH\000\022>\n\030g"
  "et_cluster_map_response\030\n \001(\0132\032.msg.GetC"
  "lusterMapResponseH\000B\007\n\005union*p\n\021GetPgMap"
  "ErrorCode\022\016\n\npgMapGetOk\020\000\022\034\n\030pgMapclient"
  "VersionHigher\020\001\022\027\n\023PgMapclusterNoPools\020\002"
  "\022\024\n\020PgMapSameVersion\020\003*]\n\017OsdMapErrorCod"
  "e\022\006\n\002ok\020\000\022\027\n\023clientVersionHigher\020\001\022\030\n\024cl"
  "ientVersionInvalid\020\002\022\017\n\013noOsdsExist\020\003b\006p"
  "roto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_mon_5fmsg_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_mon_5fmsg_2eproto_sccs[30] = {
  &scc_info_ApplyIDRequest_mon_5fmsg_2eproto.base,
  &scc_info_ApplyIDResponse_mon_5fmsg_2eproto.base,
  &scc_info_BootRequest_mon_5fmsg_2eproto.base,
  &scc_info_BootResponse_mon_5fmsg_2eproto.base,
  &scc_info_CreatePoolRequest_mon_5fmsg_2eproto.base,
  &scc_info_CreatePoolResponse_mon_5fmsg_2eproto.base,
  &scc_info_DeletePoolRequest_mon_5fmsg_2eproto.base,
  &scc_info_DeletePoolResponse_mon_5fmsg_2eproto.base,
  &scc_info_GetClusterMapRequest_mon_5fmsg_2eproto.base,
  &scc_info_GetClusterMapResponse_mon_5fmsg_2eproto.base,
  &scc_info_GetOsdMapRequest_mon_5fmsg_2eproto.base,
  &scc_info_GetOsdMapResponse_mon_5fmsg_2eproto.base,
  &scc_info_GetPgMapRequest_mon_5fmsg_2eproto.base,
  &scc_info_GetPgMapRequest_PoolVersionsEntry_DoNotUse_mon_5fmsg_2eproto.base,
  &scc_info_GetPgMapResponse_mon_5fmsg_2eproto.base,
  &scc_info_GetPgMapResponse_ErrorcodeEntry_DoNotUse_mon_5fmsg_2eproto.base,
  &scc_info_GetPgMapResponse_PgsEntry_DoNotUse_mon_5fmsg_2eproto.base,
  &scc_info_GetPgMapResponse_PoolidPgmapversionEntry_DoNotUse_mon_5fmsg_2eproto.base,
  &scc_info_HeartbeatRequest_mon_5fmsg_2eproto.base,
  &scc_info_HeartbeatResponse_mon_5fmsg_2eproto.base,
  &scc_info_ListPoolsRequest_mon_5fmsg_2eproto.base,
  &scc_info_ListPoolsResponse_mon_5fmsg_2eproto.base,
  &scc_info_OsdDynamicInfo_mon_5fmsg_2eproto.base,
  &scc_info_OsdStopRequest_mon_5fmsg_2eproto.base,
  &scc_info_OsdStopResponse_mon_5fmsg_2eproto.base,
  &scc_info_PGInfo_mon_5fmsg_2eproto.base,
  &scc_info_PGInfos_mon_5fmsg_2eproto.base,
  &scc_info_Request_mon_5fmsg_2eproto.base,
  &scc_info_Response_mon_5fmsg_2eproto.base,
  &scc_info_poolinfo_mon_5fmsg_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_mon_5fmsg_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mon_5fmsg_2eproto = {
  false, false, descriptor_table_protodef_mon_5fmsg_2eproto, "mon_msg.proto", 3205,
  &descriptor_table_mon_5fmsg_2eproto_once, descriptor_table_mon_5fmsg_2eproto_sccs, descriptor_table_mon_5fmsg_2eproto_deps, 30, 0,
  schemas, file_default_instances, TableStruct_mon_5fmsg_2eproto::offsets,
  file_level_metadata_mon_5fmsg_2eproto, 30, file_level_enum_descriptors_mon_5fmsg_2eproto, file_level_service_descriptors_mon_5fmsg_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_mon_5fmsg_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_mon_5fmsg_2eproto)), true);
namespace msg {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GetPgMapErrorCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_mon_5fmsg_2eproto);
  return file_level_enum_descriptors_mon_5fmsg_2eproto[0];
}
bool GetPgMapErrorCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OsdMapErrorCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_mon_5fmsg_2eproto);
  return file_level_enum_descriptors_mon_5fmsg_2eproto[1];
}
bool OsdMapErrorCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void CreatePoolRequest::InitAsDefaultInstance() {
}
class CreatePoolRequest::_Internal {
 public:
};

CreatePoolRequest::CreatePoolRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:msg.CreatePoolRequest)
}
CreatePoolRequest::CreatePoolRequest(const CreatePoolRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  failuredomain_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_failuredomain().empty()) {
    failuredomain_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_failuredomain(),
      GetArena());
  }
  root_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_root().empty()) {
    root_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_root(),
      GetArena());
  }
  ::memcpy(&pgsize_, &from.pgsize_,
    static_cast<size_t>(reinterpret_cast<char*>(&pgcount_) -
    reinterpret_cast<char*>(&pgsize_)) + sizeof(pgcount_));
  // @@protoc_insertion_point(copy_constructor:msg.CreatePoolRequest)
}

void CreatePoolRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreatePoolRequest_mon_5fmsg_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  failuredomain_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  root_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&pgsize_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pgcount_) -
      reinterpret_cast<char*>(&pgsize_)) + sizeof(pgcount_));
}

CreatePoolRequest::~CreatePoolRequest() {
  // @@protoc_insertion_point(destructor:msg.CreatePoolRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CreatePoolRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  failuredomain_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  root_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CreatePoolRequest::ArenaDtor(void* object) {
  CreatePoolRequest* _this = reinterpret_cast< CreatePoolRequest* >(object);
  (void)_this;
}
void CreatePoolRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreatePoolRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreatePoolRequest& CreatePoolRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreatePoolRequest_mon_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void CreatePoolRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CreatePoolRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  failuredomain_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  root_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&pgsize_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pgcount_) -
      reinterpret_cast<char*>(&pgsize_)) + sizeof(pgcount_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreatePoolRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "msg.CreatePoolRequest.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 pgsize = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          pgsize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 pgcount = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          pgcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string failuredomain = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_failuredomain();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "msg.CreatePoolRequest.failuredomain"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string root = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_root();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "msg.CreatePoolRequest.root"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreatePoolRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CreatePoolRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.CreatePoolRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // int32 pgsize = 2;
  if (this->pgsize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_pgsize(), target);
  }

  // int32 pgcount = 3;
  if (this->pgcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_pgcount(), target);
  }

  // string failuredomain = 4;
  if (this->failuredomain().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_failuredomain().data(), static_cast<int>(this->_internal_failuredomain().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.CreatePoolRequest.failuredomain");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_failuredomain(), target);
  }

  // string root = 5;
  if (this->root().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_root().data(), static_cast<int>(this->_internal_root().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.CreatePoolRequest.root");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_root(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CreatePoolRequest)
  return target;
}

size_t CreatePoolRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CreatePoolRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string failuredomain = 4;
  if (this->failuredomain().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_failuredomain());
  }

  // string root = 5;
  if (this->root().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_root());
  }

  // int32 pgsize = 2;
  if (this->pgsize() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_pgsize());
  }

  // int32 pgcount = 3;
  if (this->pgcount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_pgcount());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreatePoolRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg.CreatePoolRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreatePoolRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreatePoolRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg.CreatePoolRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg.CreatePoolRequest)
    MergeFrom(*source);
  }
}

void CreatePoolRequest::MergeFrom(const CreatePoolRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.CreatePoolRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.failuredomain().size() > 0) {
    _internal_set_failuredomain(from._internal_failuredomain());
  }
  if (from.root().size() > 0) {
    _internal_set_root(from._internal_root());
  }
  if (from.pgsize() != 0) {
    _internal_set_pgsize(from._internal_pgsize());
  }
  if (from.pgcount() != 0) {
    _internal_set_pgcount(from._internal_pgcount());
  }
}

void CreatePoolRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg.CreatePoolRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreatePoolRequest::CopyFrom(const CreatePoolRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CreatePoolRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreatePoolRequest::IsInitialized() const {
  return true;
}

void CreatePoolRequest::InternalSwap(CreatePoolRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  failuredomain_.Swap(&other->failuredomain_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  root_.Swap(&other->root_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CreatePoolRequest, pgcount_)
      + sizeof(CreatePoolRequest::pgcount_)
      - PROTOBUF_FIELD_OFFSET(CreatePoolRequest, pgsize_)>(
          reinterpret_cast<char*>(&pgsize_),
          reinterpret_cast<char*>(&other->pgsize_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CreatePoolRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreatePoolResponse::InitAsDefaultInstance() {
}
class CreatePoolResponse::_Internal {
 public:
};

CreatePoolResponse::CreatePoolResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:msg.CreatePoolResponse)
}
CreatePoolResponse::CreatePoolResponse(const CreatePoolResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&ok_, &from.ok_,
    static_cast<size_t>(reinterpret_cast<char*>(&poolid_) -
    reinterpret_cast<char*>(&ok_)) + sizeof(poolid_));
  // @@protoc_insertion_point(copy_constructor:msg.CreatePoolResponse)
}

void CreatePoolResponse::SharedCtor() {
  ::memset(&ok_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&poolid_) -
      reinterpret_cast<char*>(&ok_)) + sizeof(poolid_));
}

CreatePoolResponse::~CreatePoolResponse() {
  // @@protoc_insertion_point(destructor:msg.CreatePoolResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CreatePoolResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CreatePoolResponse::ArenaDtor(void* object) {
  CreatePoolResponse* _this = reinterpret_cast< CreatePoolResponse* >(object);
  (void)_this;
}
void CreatePoolResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreatePoolResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreatePoolResponse& CreatePoolResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreatePoolResponse_mon_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void CreatePoolResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CreatePoolResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&ok_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&poolid_) -
      reinterpret_cast<char*>(&ok_)) + sizeof(poolid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreatePoolResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool ok = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ok_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 poolid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          poolid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreatePoolResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CreatePoolResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool ok = 1;
  if (this->ok() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_ok(), target);
  }

  // int32 poolid = 2;
  if (this->poolid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_poolid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CreatePoolResponse)
  return target;
}

size_t CreatePoolResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CreatePoolResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool ok = 1;
  if (this->ok() != 0) {
    total_size += 1 + 1;
  }

  // int32 poolid = 2;
  if (this->poolid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_poolid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreatePoolResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg.CreatePoolResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CreatePoolResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreatePoolResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg.CreatePoolResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg.CreatePoolResponse)
    MergeFrom(*source);
  }
}

void CreatePoolResponse::MergeFrom(const CreatePoolResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.CreatePoolResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ok() != 0) {
    _internal_set_ok(from._internal_ok());
  }
  if (from.poolid() != 0) {
    _internal_set_poolid(from._internal_poolid());
  }
}

void CreatePoolResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg.CreatePoolResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreatePoolResponse::CopyFrom(const CreatePoolResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CreatePoolResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreatePoolResponse::IsInitialized() const {
  return true;
}

void CreatePoolResponse::InternalSwap(CreatePoolResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CreatePoolResponse, poolid_)
      + sizeof(CreatePoolResponse::poolid_)
      - PROTOBUF_FIELD_OFFSET(CreatePoolResponse, ok_)>(
          reinterpret_cast<char*>(&ok_),
          reinterpret_cast<char*>(&other->ok_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CreatePoolResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListPoolsRequest::InitAsDefaultInstance() {
}
class ListPoolsRequest::_Internal {
 public:
};

ListPoolsRequest::ListPoolsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:msg.ListPoolsRequest)
}
ListPoolsRequest::ListPoolsRequest(const ListPoolsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:msg.ListPoolsRequest)
}

void ListPoolsRequest::SharedCtor() {
}

ListPoolsRequest::~ListPoolsRequest() {
  // @@protoc_insertion_point(destructor:msg.ListPoolsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListPoolsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ListPoolsRequest::ArenaDtor(void* object) {
  ListPoolsRequest* _this = reinterpret_cast< ListPoolsRequest* >(object);
  (void)_this;
}
void ListPoolsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListPoolsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListPoolsRequest& ListPoolsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListPoolsRequest_mon_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void ListPoolsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.ListPoolsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListPoolsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListPoolsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.ListPoolsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.ListPoolsRequest)
  return target;
}

size_t ListPoolsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.ListPoolsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListPoolsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg.ListPoolsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListPoolsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListPoolsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg.ListPoolsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg.ListPoolsRequest)
    MergeFrom(*source);
  }
}

void ListPoolsRequest::MergeFrom(const ListPoolsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.ListPoolsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ListPoolsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg.ListPoolsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListPoolsRequest::CopyFrom(const ListPoolsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.ListPoolsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListPoolsRequest::IsInitialized() const {
  return true;
}

void ListPoolsRequest::InternalSwap(ListPoolsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListPoolsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void poolinfo::InitAsDefaultInstance() {
}
class poolinfo::_Internal {
 public:
};

poolinfo::poolinfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:msg.poolinfo)
}
poolinfo::poolinfo(const poolinfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  failuredomain_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_failuredomain().empty()) {
    failuredomain_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_failuredomain(),
      GetArena());
  }
  root_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_root().empty()) {
    root_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_root(),
      GetArena());
  }
  ::memcpy(&poolid_, &from.poolid_,
    static_cast<size_t>(reinterpret_cast<char*>(&pgcount_) -
    reinterpret_cast<char*>(&poolid_)) + sizeof(pgcount_));
  // @@protoc_insertion_point(copy_constructor:msg.poolinfo)
}

void poolinfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_poolinfo_mon_5fmsg_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  failuredomain_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  root_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&poolid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pgcount_) -
      reinterpret_cast<char*>(&poolid_)) + sizeof(pgcount_));
}

poolinfo::~poolinfo() {
  // @@protoc_insertion_point(destructor:msg.poolinfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void poolinfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  failuredomain_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  root_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void poolinfo::ArenaDtor(void* object) {
  poolinfo* _this = reinterpret_cast< poolinfo* >(object);
  (void)_this;
}
void poolinfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void poolinfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const poolinfo& poolinfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_poolinfo_mon_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void poolinfo::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.poolinfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  failuredomain_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  root_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&poolid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pgcount_) -
      reinterpret_cast<char*>(&poolid_)) + sizeof(pgcount_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* poolinfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 poolid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          poolid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "msg.poolinfo.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 pgsize = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          pgsize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 pgcount = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          pgcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string failuredomain = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_failuredomain();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "msg.poolinfo.failuredomain"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string root = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_root();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "msg.poolinfo.root"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* poolinfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.poolinfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 poolid = 1;
  if (this->poolid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_poolid(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.poolinfo.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // int32 pgsize = 3;
  if (this->pgsize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_pgsize(), target);
  }

  // int32 pgcount = 4;
  if (this->pgcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_pgcount(), target);
  }

  // string failuredomain = 5;
  if (this->failuredomain().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_failuredomain().data(), static_cast<int>(this->_internal_failuredomain().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.poolinfo.failuredomain");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_failuredomain(), target);
  }

  // string root = 6;
  if (this->root().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_root().data(), static_cast<int>(this->_internal_root().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.poolinfo.root");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_root(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.poolinfo)
  return target;
}

size_t poolinfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.poolinfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string failuredomain = 5;
  if (this->failuredomain().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_failuredomain());
  }

  // string root = 6;
  if (this->root().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_root());
  }

  // int32 poolid = 1;
  if (this->poolid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_poolid());
  }

  // int32 pgsize = 3;
  if (this->pgsize() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_pgsize());
  }

  // int32 pgcount = 4;
  if (this->pgcount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_pgcount());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void poolinfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg.poolinfo)
  GOOGLE_DCHECK_NE(&from, this);
  const poolinfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<poolinfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg.poolinfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg.poolinfo)
    MergeFrom(*source);
  }
}

void poolinfo::MergeFrom(const poolinfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.poolinfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.failuredomain().size() > 0) {
    _internal_set_failuredomain(from._internal_failuredomain());
  }
  if (from.root().size() > 0) {
    _internal_set_root(from._internal_root());
  }
  if (from.poolid() != 0) {
    _internal_set_poolid(from._internal_poolid());
  }
  if (from.pgsize() != 0) {
    _internal_set_pgsize(from._internal_pgsize());
  }
  if (from.pgcount() != 0) {
    _internal_set_pgcount(from._internal_pgcount());
  }
}

void poolinfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg.poolinfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void poolinfo::CopyFrom(const poolinfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.poolinfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool poolinfo::IsInitialized() const {
  return true;
}

void poolinfo::InternalSwap(poolinfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  failuredomain_.Swap(&other->failuredomain_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  root_.Swap(&other->root_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(poolinfo, pgcount_)
      + sizeof(poolinfo::pgcount_)
      - PROTOBUF_FIELD_OFFSET(poolinfo, poolid_)>(
          reinterpret_cast<char*>(&poolid_),
          reinterpret_cast<char*>(&other->poolid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata poolinfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListPoolsResponse::InitAsDefaultInstance() {
}
class ListPoolsResponse::_Internal {
 public:
};

ListPoolsResponse::ListPoolsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  pi_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:msg.ListPoolsResponse)
}
ListPoolsResponse::ListPoolsResponse(const ListPoolsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      pi_(from.pi_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:msg.ListPoolsResponse)
}

void ListPoolsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListPoolsResponse_mon_5fmsg_2eproto.base);
}

ListPoolsResponse::~ListPoolsResponse() {
  // @@protoc_insertion_point(destructor:msg.ListPoolsResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListPoolsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ListPoolsResponse::ArenaDtor(void* object) {
  ListPoolsResponse* _this = reinterpret_cast< ListPoolsResponse* >(object);
  (void)_this;
}
void ListPoolsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListPoolsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListPoolsResponse& ListPoolsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListPoolsResponse_mon_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void ListPoolsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.ListPoolsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pi_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListPoolsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .msg.poolinfo pi = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pi(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListPoolsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.ListPoolsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .msg.poolinfo pi = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_pi_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_pi(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.ListPoolsResponse)
  return target;
}

size_t ListPoolsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.ListPoolsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .msg.poolinfo pi = 1;
  total_size += 1UL * this->_internal_pi_size();
  for (const auto& msg : this->pi_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListPoolsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg.ListPoolsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListPoolsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListPoolsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg.ListPoolsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg.ListPoolsResponse)
    MergeFrom(*source);
  }
}

void ListPoolsResponse::MergeFrom(const ListPoolsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.ListPoolsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pi_.MergeFrom(from.pi_);
}

void ListPoolsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg.ListPoolsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListPoolsResponse::CopyFrom(const ListPoolsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.ListPoolsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListPoolsResponse::IsInitialized() const {
  return true;
}

void ListPoolsResponse::InternalSwap(ListPoolsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  pi_.InternalSwap(&other->pi_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListPoolsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeletePoolRequest::InitAsDefaultInstance() {
}
class DeletePoolRequest::_Internal {
 public:
};

DeletePoolRequest::DeletePoolRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:msg.DeletePoolRequest)
}
DeletePoolRequest::DeletePoolRequest(const DeletePoolRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:msg.DeletePoolRequest)
}

void DeletePoolRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeletePoolRequest_mon_5fmsg_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DeletePoolRequest::~DeletePoolRequest() {
  // @@protoc_insertion_point(destructor:msg.DeletePoolRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeletePoolRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeletePoolRequest::ArenaDtor(void* object) {
  DeletePoolRequest* _this = reinterpret_cast< DeletePoolRequest* >(object);
  (void)_this;
}
void DeletePoolRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeletePoolRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeletePoolRequest& DeletePoolRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeletePoolRequest_mon_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void DeletePoolRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.DeletePoolRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeletePoolRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "msg.DeletePoolRequest.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeletePoolRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.DeletePoolRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.DeletePoolRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.DeletePoolRequest)
  return target;
}

size_t DeletePoolRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.DeletePoolRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeletePoolRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg.DeletePoolRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeletePoolRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeletePoolRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg.DeletePoolRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg.DeletePoolRequest)
    MergeFrom(*source);
  }
}

void DeletePoolRequest::MergeFrom(const DeletePoolRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.DeletePoolRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
}

void DeletePoolRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg.DeletePoolRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeletePoolRequest::CopyFrom(const DeletePoolRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.DeletePoolRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeletePoolRequest::IsInitialized() const {
  return true;
}

void DeletePoolRequest::InternalSwap(DeletePoolRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata DeletePoolRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeletePoolResponse::InitAsDefaultInstance() {
}
class DeletePoolResponse::_Internal {
 public:
};

DeletePoolResponse::DeletePoolResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:msg.DeletePoolResponse)
}
DeletePoolResponse::DeletePoolResponse(const DeletePoolResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ok_ = from.ok_;
  // @@protoc_insertion_point(copy_constructor:msg.DeletePoolResponse)
}

void DeletePoolResponse::SharedCtor() {
  ok_ = false;
}

DeletePoolResponse::~DeletePoolResponse() {
  // @@protoc_insertion_point(destructor:msg.DeletePoolResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeletePoolResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DeletePoolResponse::ArenaDtor(void* object) {
  DeletePoolResponse* _this = reinterpret_cast< DeletePoolResponse* >(object);
  (void)_this;
}
void DeletePoolResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeletePoolResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeletePoolResponse& DeletePoolResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeletePoolResponse_mon_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void DeletePoolResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.DeletePoolResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ok_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeletePoolResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool ok = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ok_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeletePoolResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.DeletePoolResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool ok = 1;
  if (this->ok() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_ok(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.DeletePoolResponse)
  return target;
}

size_t DeletePoolResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.DeletePoolResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool ok = 1;
  if (this->ok() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeletePoolResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg.DeletePoolResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DeletePoolResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeletePoolResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg.DeletePoolResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg.DeletePoolResponse)
    MergeFrom(*source);
  }
}

void DeletePoolResponse::MergeFrom(const DeletePoolResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.DeletePoolResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ok() != 0) {
    _internal_set_ok(from._internal_ok());
  }
}

void DeletePoolResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg.DeletePoolResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeletePoolResponse::CopyFrom(const DeletePoolResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.DeletePoolResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeletePoolResponse::IsInitialized() const {
  return true;
}

void DeletePoolResponse::InternalSwap(DeletePoolResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(ok_, other->ok_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeletePoolResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ApplyIDRequest::InitAsDefaultInstance() {
}
class ApplyIDRequest::_Internal {
 public:
};

ApplyIDRequest::ApplyIDRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:msg.ApplyIDRequest)
}
ApplyIDRequest::ApplyIDRequest(const ApplyIDRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_uuid().empty()) {
    uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_uuid(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:msg.ApplyIDRequest)
}

void ApplyIDRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ApplyIDRequest_mon_5fmsg_2eproto.base);
  uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ApplyIDRequest::~ApplyIDRequest() {
  // @@protoc_insertion_point(destructor:msg.ApplyIDRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ApplyIDRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  uuid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ApplyIDRequest::ArenaDtor(void* object) {
  ApplyIDRequest* _this = reinterpret_cast< ApplyIDRequest* >(object);
  (void)_this;
}
void ApplyIDRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ApplyIDRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ApplyIDRequest& ApplyIDRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ApplyIDRequest_mon_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void ApplyIDRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.ApplyIDRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uuid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ApplyIDRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string uuid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_uuid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "msg.ApplyIDRequest.uuid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ApplyIDRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.ApplyIDRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string uuid = 1;
  if (this->uuid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uuid().data(), static_cast<int>(this->_internal_uuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.ApplyIDRequest.uuid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_uuid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.ApplyIDRequest)
  return target;
}

size_t ApplyIDRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.ApplyIDRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string uuid = 1;
  if (this->uuid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uuid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ApplyIDRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg.ApplyIDRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ApplyIDRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ApplyIDRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg.ApplyIDRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg.ApplyIDRequest)
    MergeFrom(*source);
  }
}

void ApplyIDRequest::MergeFrom(const ApplyIDRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.ApplyIDRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.uuid().size() > 0) {
    _internal_set_uuid(from._internal_uuid());
  }
}

void ApplyIDRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg.ApplyIDRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ApplyIDRequest::CopyFrom(const ApplyIDRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.ApplyIDRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApplyIDRequest::IsInitialized() const {
  return true;
}

void ApplyIDRequest::InternalSwap(ApplyIDRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  uuid_.Swap(&other->uuid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ApplyIDRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ApplyIDResponse::InitAsDefaultInstance() {
}
class ApplyIDResponse::_Internal {
 public:
};

ApplyIDResponse::ApplyIDResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:msg.ApplyIDResponse)
}
ApplyIDResponse::ApplyIDResponse(const ApplyIDResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_uuid().empty()) {
    uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_uuid(),
      GetArena());
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:msg.ApplyIDResponse)
}

void ApplyIDResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ApplyIDResponse_mon_5fmsg_2eproto.base);
  uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_ = 0;
}

ApplyIDResponse::~ApplyIDResponse() {
  // @@protoc_insertion_point(destructor:msg.ApplyIDResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ApplyIDResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  uuid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ApplyIDResponse::ArenaDtor(void* object) {
  ApplyIDResponse* _this = reinterpret_cast< ApplyIDResponse* >(object);
  (void)_this;
}
void ApplyIDResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ApplyIDResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ApplyIDResponse& ApplyIDResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ApplyIDResponse_mon_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void ApplyIDResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.ApplyIDResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uuid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ApplyIDResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string uuid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_uuid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "msg.ApplyIDResponse.uuid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ApplyIDResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.ApplyIDResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string uuid = 1;
  if (this->uuid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uuid().data(), static_cast<int>(this->_internal_uuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.ApplyIDResponse.uuid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_uuid(), target);
  }

  // int32 id = 2;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.ApplyIDResponse)
  return target;
}

size_t ApplyIDResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.ApplyIDResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string uuid = 1;
  if (this->uuid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uuid());
  }

  // int32 id = 2;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ApplyIDResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg.ApplyIDResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ApplyIDResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ApplyIDResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg.ApplyIDResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg.ApplyIDResponse)
    MergeFrom(*source);
  }
}

void ApplyIDResponse::MergeFrom(const ApplyIDResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.ApplyIDResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.uuid().size() > 0) {
    _internal_set_uuid(from._internal_uuid());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void ApplyIDResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg.ApplyIDResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ApplyIDResponse::CopyFrom(const ApplyIDResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.ApplyIDResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApplyIDResponse::IsInitialized() const {
  return true;
}

void ApplyIDResponse::InternalSwap(ApplyIDResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  uuid_.Swap(&other->uuid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ApplyIDResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BootRequest::InitAsDefaultInstance() {
}
class BootRequest::_Internal {
 public:
};

BootRequest::BootRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:msg.BootRequest)
}
BootRequest::BootRequest(const BootRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_uuid().empty()) {
    uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_uuid(),
      GetArena());
  }
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_address().empty()) {
    address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_address(),
      GetArena());
  }
  host_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_host().empty()) {
    host_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_host(),
      GetArena());
  }
  ::memcpy(&osd_id_, &from.osd_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&size_) -
    reinterpret_cast<char*>(&osd_id_)) + sizeof(size_));
  // @@protoc_insertion_point(copy_constructor:msg.BootRequest)
}

void BootRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BootRequest_mon_5fmsg_2eproto.base);
  uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  host_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&osd_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&size_) -
      reinterpret_cast<char*>(&osd_id_)) + sizeof(size_));
}

BootRequest::~BootRequest() {
  // @@protoc_insertion_point(destructor:msg.BootRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BootRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  uuid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  host_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BootRequest::ArenaDtor(void* object) {
  BootRequest* _this = reinterpret_cast< BootRequest* >(object);
  (void)_this;
}
void BootRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BootRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BootRequest& BootRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BootRequest_mon_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void BootRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.BootRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uuid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  host_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&osd_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&size_) -
      reinterpret_cast<char*>(&osd_id_)) + sizeof(size_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BootRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 osd_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          osd_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string uuid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_uuid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "msg.BootRequest.uuid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 port = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string address = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "msg.BootRequest.address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string host = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_host();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "msg.BootRequest.host"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BootRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.BootRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 osd_id = 1;
  if (this->osd_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_osd_id(), target);
  }

  // string uuid = 2;
  if (this->uuid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uuid().data(), static_cast<int>(this->_internal_uuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.BootRequest.uuid");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_uuid(), target);
  }

  // int64 size = 3;
  if (this->size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_size(), target);
  }

  // uint32 port = 4;
  if (this->port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_port(), target);
  }

  // string address = 5;
  if (this->address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.BootRequest.address");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_address(), target);
  }

  // string host = 6;
  if (this->host().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_host().data(), static_cast<int>(this->_internal_host().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.BootRequest.host");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_host(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.BootRequest)
  return target;
}

size_t BootRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.BootRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string uuid = 2;
  if (this->uuid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uuid());
  }

  // string address = 5;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  // string host = 6;
  if (this->host().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_host());
  }

  // int32 osd_id = 1;
  if (this->osd_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_osd_id());
  }

  // uint32 port = 4;
  if (this->port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_port());
  }

  // int64 size = 3;
  if (this->size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_size());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BootRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg.BootRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const BootRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BootRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg.BootRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg.BootRequest)
    MergeFrom(*source);
  }
}

void BootRequest::MergeFrom(const BootRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.BootRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.uuid().size() > 0) {
    _internal_set_uuid(from._internal_uuid());
  }
  if (from.address().size() > 0) {
    _internal_set_address(from._internal_address());
  }
  if (from.host().size() > 0) {
    _internal_set_host(from._internal_host());
  }
  if (from.osd_id() != 0) {
    _internal_set_osd_id(from._internal_osd_id());
  }
  if (from.port() != 0) {
    _internal_set_port(from._internal_port());
  }
  if (from.size() != 0) {
    _internal_set_size(from._internal_size());
  }
}

void BootRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg.BootRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BootRequest::CopyFrom(const BootRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.BootRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BootRequest::IsInitialized() const {
  return true;
}

void BootRequest::InternalSwap(BootRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  uuid_.Swap(&other->uuid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  address_.Swap(&other->address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  host_.Swap(&other->host_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BootRequest, size_)
      + sizeof(BootRequest::size_)
      - PROTOBUF_FIELD_OFFSET(BootRequest, osd_id_)>(
          reinterpret_cast<char*>(&osd_id_),
          reinterpret_cast<char*>(&other->osd_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BootRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PGInfo::InitAsDefaultInstance() {
}
class PGInfo::_Internal {
 public:
};

PGInfo::PGInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  osdid_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:msg.PGInfo)
}
PGInfo::PGInfo(const PGInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      osdid_(from.osdid_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  pgid_ = from.pgid_;
  // @@protoc_insertion_point(copy_constructor:msg.PGInfo)
}

void PGInfo::SharedCtor() {
  pgid_ = 0;
}

PGInfo::~PGInfo() {
  // @@protoc_insertion_point(destructor:msg.PGInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PGInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PGInfo::ArenaDtor(void* object) {
  PGInfo* _this = reinterpret_cast< PGInfo* >(object);
  (void)_this;
}
void PGInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PGInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PGInfo& PGInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PGInfo_mon_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void PGInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.PGInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  osdid_.Clear();
  pgid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PGInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 pgid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          pgid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 osdid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_osdid(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_osdid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PGInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.PGInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 pgid = 2;
  if (this->pgid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_pgid(), target);
  }

  // repeated int32 osdid = 3;
  {
    int byte_size = _osdid_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_osdid(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.PGInfo)
  return target;
}

size_t PGInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.PGInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 osdid = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->osdid_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _osdid_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 pgid = 2;
  if (this->pgid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_pgid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PGInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg.PGInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const PGInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PGInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg.PGInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg.PGInfo)
    MergeFrom(*source);
  }
}

void PGInfo::MergeFrom(const PGInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.PGInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  osdid_.MergeFrom(from.osdid_);
  if (from.pgid() != 0) {
    _internal_set_pgid(from._internal_pgid());
  }
}

void PGInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg.PGInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PGInfo::CopyFrom(const PGInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.PGInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PGInfo::IsInitialized() const {
  return true;
}

void PGInfo::InternalSwap(PGInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  osdid_.InternalSwap(&other->osdid_);
  swap(pgid_, other->pgid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PGInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PGInfos::InitAsDefaultInstance() {
}
class PGInfos::_Internal {
 public:
};

PGInfos::PGInfos(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  pi_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:msg.PGInfos)
}
PGInfos::PGInfos(const PGInfos& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      pi_(from.pi_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:msg.PGInfos)
}

void PGInfos::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PGInfos_mon_5fmsg_2eproto.base);
}

PGInfos::~PGInfos() {
  // @@protoc_insertion_point(destructor:msg.PGInfos)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PGInfos::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PGInfos::ArenaDtor(void* object) {
  PGInfos* _this = reinterpret_cast< PGInfos* >(object);
  (void)_this;
}
void PGInfos::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PGInfos::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PGInfos& PGInfos::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PGInfos_mon_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void PGInfos::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.PGInfos)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pi_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PGInfos::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .msg.PGInfo pi = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pi(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PGInfos::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.PGInfos)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .msg.PGInfo pi = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_pi_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_pi(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.PGInfos)
  return target;
}

size_t PGInfos::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.PGInfos)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .msg.PGInfo pi = 1;
  total_size += 1UL * this->_internal_pi_size();
  for (const auto& msg : this->pi_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PGInfos::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg.PGInfos)
  GOOGLE_DCHECK_NE(&from, this);
  const PGInfos* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PGInfos>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg.PGInfos)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg.PGInfos)
    MergeFrom(*source);
  }
}

void PGInfos::MergeFrom(const PGInfos& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.PGInfos)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pi_.MergeFrom(from.pi_);
}

void PGInfos::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg.PGInfos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PGInfos::CopyFrom(const PGInfos& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.PGInfos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PGInfos::IsInitialized() const {
  return true;
}

void PGInfos::InternalSwap(PGInfos* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  pi_.InternalSwap(&other->pi_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PGInfos::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

GetPgMapRequest_PoolVersionsEntry_DoNotUse::GetPgMapRequest_PoolVersionsEntry_DoNotUse() {}
GetPgMapRequest_PoolVersionsEntry_DoNotUse::GetPgMapRequest_PoolVersionsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void GetPgMapRequest_PoolVersionsEntry_DoNotUse::MergeFrom(const GetPgMapRequest_PoolVersionsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata GetPgMapRequest_PoolVersionsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void GetPgMapRequest_PoolVersionsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void GetPgMapRequest::InitAsDefaultInstance() {
}
class GetPgMapRequest::_Internal {
 public:
};

GetPgMapRequest::GetPgMapRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  pool_versions_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:msg.GetPgMapRequest)
}
GetPgMapRequest::GetPgMapRequest(const GetPgMapRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  pool_versions_.MergeFrom(from.pool_versions_);
  // @@protoc_insertion_point(copy_constructor:msg.GetPgMapRequest)
}

void GetPgMapRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetPgMapRequest_mon_5fmsg_2eproto.base);
}

GetPgMapRequest::~GetPgMapRequest() {
  // @@protoc_insertion_point(destructor:msg.GetPgMapRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetPgMapRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetPgMapRequest::ArenaDtor(void* object) {
  GetPgMapRequest* _this = reinterpret_cast< GetPgMapRequest* >(object);
  (void)_this;
}
void GetPgMapRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetPgMapRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetPgMapRequest& GetPgMapRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetPgMapRequest_mon_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void GetPgMapRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.GetPgMapRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pool_versions_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetPgMapRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<int32, int64> pool_versions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&pool_versions_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetPgMapRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.GetPgMapRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<int32, int64> pool_versions = 1;
  if (!this->_internal_pool_versions().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int64 >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_pool_versions().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_pool_versions().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int64 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int64 >::const_iterator
          it = this->_internal_pool_versions().begin();
          it != this->_internal_pool_versions().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = GetPgMapRequest_PoolVersionsEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int64 >::const_iterator
          it = this->_internal_pool_versions().begin();
          it != this->_internal_pool_versions().end(); ++it) {
        target = GetPgMapRequest_PoolVersionsEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.GetPgMapRequest)
  return target;
}

size_t GetPgMapRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.GetPgMapRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int32, int64> pool_versions = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_pool_versions_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int64 >::const_iterator
      it = this->_internal_pool_versions().begin();
      it != this->_internal_pool_versions().end(); ++it) {
    total_size += GetPgMapRequest_PoolVersionsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetPgMapRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg.GetPgMapRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetPgMapRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetPgMapRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg.GetPgMapRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg.GetPgMapRequest)
    MergeFrom(*source);
  }
}

void GetPgMapRequest::MergeFrom(const GetPgMapRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.GetPgMapRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pool_versions_.MergeFrom(from.pool_versions_);
}

void GetPgMapRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg.GetPgMapRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPgMapRequest::CopyFrom(const GetPgMapRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.GetPgMapRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPgMapRequest::IsInitialized() const {
  return true;
}

void GetPgMapRequest::InternalSwap(GetPgMapRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  pool_versions_.Swap(&other->pool_versions_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetPgMapRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OsdDynamicInfo::InitAsDefaultInstance() {
}
class OsdDynamicInfo::_Internal {
 public:
};

OsdDynamicInfo::OsdDynamicInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:msg.OsdDynamicInfo)
}
OsdDynamicInfo::OsdDynamicInfo(const OsdDynamicInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_address().empty()) {
    address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_address(),
      GetArena());
  }
  ::memcpy(&osdid_, &from.osdid_,
    static_cast<size_t>(reinterpret_cast<char*>(&ispendingcreate_) -
    reinterpret_cast<char*>(&osdid_)) + sizeof(ispendingcreate_));
  // @@protoc_insertion_point(copy_constructor:msg.OsdDynamicInfo)
}

void OsdDynamicInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OsdDynamicInfo_mon_5fmsg_2eproto.base);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&osdid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ispendingcreate_) -
      reinterpret_cast<char*>(&osdid_)) + sizeof(ispendingcreate_));
}

OsdDynamicInfo::~OsdDynamicInfo() {
  // @@protoc_insertion_point(destructor:msg.OsdDynamicInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OsdDynamicInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OsdDynamicInfo::ArenaDtor(void* object) {
  OsdDynamicInfo* _this = reinterpret_cast< OsdDynamicInfo* >(object);
  (void)_this;
}
void OsdDynamicInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OsdDynamicInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OsdDynamicInfo& OsdDynamicInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OsdDynamicInfo_mon_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void OsdDynamicInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.OsdDynamicInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&osdid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ispendingcreate_) -
      reinterpret_cast<char*>(&osdid_)) + sizeof(ispendingcreate_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OsdDynamicInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 osdid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          osdid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "msg.OsdDynamicInfo.address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 port = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isin = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          isin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isup = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          isup_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool ispendingcreate = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ispendingcreate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OsdDynamicInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.OsdDynamicInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 osdid = 1;
  if (this->osdid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_osdid(), target);
  }

  // string address = 2;
  if (this->address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.OsdDynamicInfo.address");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_address(), target);
  }

  // int32 port = 3;
  if (this->port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_port(), target);
  }

  // bool isin = 4;
  if (this->isin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_isin(), target);
  }

  // bool isup = 5;
  if (this->isup() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_isup(), target);
  }

  // bool ispendingcreate = 6;
  if (this->ispendingcreate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_ispendingcreate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.OsdDynamicInfo)
  return target;
}

size_t OsdDynamicInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.OsdDynamicInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 2;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  // int32 osdid = 1;
  if (this->osdid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_osdid());
  }

  // int32 port = 3;
  if (this->port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_port());
  }

  // bool isin = 4;
  if (this->isin() != 0) {
    total_size += 1 + 1;
  }

  // bool isup = 5;
  if (this->isup() != 0) {
    total_size += 1 + 1;
  }

  // bool ispendingcreate = 6;
  if (this->ispendingcreate() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OsdDynamicInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg.OsdDynamicInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const OsdDynamicInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OsdDynamicInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg.OsdDynamicInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg.OsdDynamicInfo)
    MergeFrom(*source);
  }
}

void OsdDynamicInfo::MergeFrom(const OsdDynamicInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.OsdDynamicInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.address().size() > 0) {
    _internal_set_address(from._internal_address());
  }
  if (from.osdid() != 0) {
    _internal_set_osdid(from._internal_osdid());
  }
  if (from.port() != 0) {
    _internal_set_port(from._internal_port());
  }
  if (from.isin() != 0) {
    _internal_set_isin(from._internal_isin());
  }
  if (from.isup() != 0) {
    _internal_set_isup(from._internal_isup());
  }
  if (from.ispendingcreate() != 0) {
    _internal_set_ispendingcreate(from._internal_ispendingcreate());
  }
}

void OsdDynamicInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg.OsdDynamicInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OsdDynamicInfo::CopyFrom(const OsdDynamicInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.OsdDynamicInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OsdDynamicInfo::IsInitialized() const {
  return true;
}

void OsdDynamicInfo::InternalSwap(OsdDynamicInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  address_.Swap(&other->address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OsdDynamicInfo, ispendingcreate_)
      + sizeof(OsdDynamicInfo::ispendingcreate_)
      - PROTOBUF_FIELD_OFFSET(OsdDynamicInfo, osdid_)>(
          reinterpret_cast<char*>(&osdid_),
          reinterpret_cast<char*>(&other->osdid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OsdDynamicInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

GetPgMapResponse_ErrorcodeEntry_DoNotUse::GetPgMapResponse_ErrorcodeEntry_DoNotUse() {}
GetPgMapResponse_ErrorcodeEntry_DoNotUse::GetPgMapResponse_ErrorcodeEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void GetPgMapResponse_ErrorcodeEntry_DoNotUse::MergeFrom(const GetPgMapResponse_ErrorcodeEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata GetPgMapResponse_ErrorcodeEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void GetPgMapResponse_ErrorcodeEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

GetPgMapResponse_PoolidPgmapversionEntry_DoNotUse::GetPgMapResponse_PoolidPgmapversionEntry_DoNotUse() {}
GetPgMapResponse_PoolidPgmapversionEntry_DoNotUse::GetPgMapResponse_PoolidPgmapversionEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void GetPgMapResponse_PoolidPgmapversionEntry_DoNotUse::MergeFrom(const GetPgMapResponse_PoolidPgmapversionEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata GetPgMapResponse_PoolidPgmapversionEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void GetPgMapResponse_PoolidPgmapversionEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

GetPgMapResponse_PgsEntry_DoNotUse::GetPgMapResponse_PgsEntry_DoNotUse() {}
GetPgMapResponse_PgsEntry_DoNotUse::GetPgMapResponse_PgsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void GetPgMapResponse_PgsEntry_DoNotUse::MergeFrom(const GetPgMapResponse_PgsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata GetPgMapResponse_PgsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void GetPgMapResponse_PgsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void GetPgMapResponse::InitAsDefaultInstance() {
}
class GetPgMapResponse::_Internal {
 public:
};

GetPgMapResponse::GetPgMapResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  errorcode_(arena),
  poolid_pgmapversion_(arena),
  pgs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:msg.GetPgMapResponse)
}
GetPgMapResponse::GetPgMapResponse(const GetPgMapResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  errorcode_.MergeFrom(from.errorcode_);
  poolid_pgmapversion_.MergeFrom(from.poolid_pgmapversion_);
  pgs_.MergeFrom(from.pgs_);
  // @@protoc_insertion_point(copy_constructor:msg.GetPgMapResponse)
}

void GetPgMapResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetPgMapResponse_mon_5fmsg_2eproto.base);
}

GetPgMapResponse::~GetPgMapResponse() {
  // @@protoc_insertion_point(destructor:msg.GetPgMapResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetPgMapResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetPgMapResponse::ArenaDtor(void* object) {
  GetPgMapResponse* _this = reinterpret_cast< GetPgMapResponse* >(object);
  (void)_this;
}
void GetPgMapResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetPgMapResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetPgMapResponse& GetPgMapResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetPgMapResponse_mon_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void GetPgMapResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.GetPgMapResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  errorcode_.Clear();
  poolid_pgmapversion_.Clear();
  pgs_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetPgMapResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<int32, .msg.GetPgMapErrorCode> errorcode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&errorcode_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // map<int32, int64> poolid_pgmapversion = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&poolid_pgmapversion_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // map<int32, .msg.PGInfos> pgs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&pgs_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetPgMapResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.GetPgMapResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<int32, .msg.GetPgMapErrorCode> errorcode = 1;
  if (!this->_internal_errorcode().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::msg::GetPgMapErrorCode >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_errorcode().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_errorcode().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::msg::GetPgMapErrorCode >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::msg::GetPgMapErrorCode >::const_iterator
          it = this->_internal_errorcode().begin();
          it != this->_internal_errorcode().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = GetPgMapResponse_ErrorcodeEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::msg::GetPgMapErrorCode >::const_iterator
          it = this->_internal_errorcode().begin();
          it != this->_internal_errorcode().end(); ++it) {
        target = GetPgMapResponse_ErrorcodeEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
      }
    }
  }

  // map<int32, int64> poolid_pgmapversion = 2;
  if (!this->_internal_poolid_pgmapversion().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int64 >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_poolid_pgmapversion().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_poolid_pgmapversion().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int64 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int64 >::const_iterator
          it = this->_internal_poolid_pgmapversion().begin();
          it != this->_internal_poolid_pgmapversion().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = GetPgMapResponse_PoolidPgmapversionEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int64 >::const_iterator
          it = this->_internal_poolid_pgmapversion().begin();
          it != this->_internal_poolid_pgmapversion().end(); ++it) {
        target = GetPgMapResponse_PoolidPgmapversionEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
      }
    }
  }

  // map<int32, .msg.PGInfos> pgs = 3;
  if (!this->_internal_pgs().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::msg::PGInfos >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_pgs().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_pgs().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::msg::PGInfos >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::msg::PGInfos >::const_iterator
          it = this->_internal_pgs().begin();
          it != this->_internal_pgs().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = GetPgMapResponse_PgsEntry_DoNotUse::Funcs::InternalSerialize(3, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::msg::PGInfos >::const_iterator
          it = this->_internal_pgs().begin();
          it != this->_internal_pgs().end(); ++it) {
        target = GetPgMapResponse_PgsEntry_DoNotUse::Funcs::InternalSerialize(3, it->first, it->second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.GetPgMapResponse)
  return target;
}

size_t GetPgMapResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.GetPgMapResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int32, .msg.GetPgMapErrorCode> errorcode = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_errorcode_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::msg::GetPgMapErrorCode >::const_iterator
      it = this->_internal_errorcode().begin();
      it != this->_internal_errorcode().end(); ++it) {
    total_size += GetPgMapResponse_ErrorcodeEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<int32, int64> poolid_pgmapversion = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_poolid_pgmapversion_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int64 >::const_iterator
      it = this->_internal_poolid_pgmapversion().begin();
      it != this->_internal_poolid_pgmapversion().end(); ++it) {
    total_size += GetPgMapResponse_PoolidPgmapversionEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<int32, .msg.PGInfos> pgs = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_pgs_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::msg::PGInfos >::const_iterator
      it = this->_internal_pgs().begin();
      it != this->_internal_pgs().end(); ++it) {
    total_size += GetPgMapResponse_PgsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetPgMapResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg.GetPgMapResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetPgMapResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetPgMapResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg.GetPgMapResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg.GetPgMapResponse)
    MergeFrom(*source);
  }
}

void GetPgMapResponse::MergeFrom(const GetPgMapResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.GetPgMapResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  errorcode_.MergeFrom(from.errorcode_);
  poolid_pgmapversion_.MergeFrom(from.poolid_pgmapversion_);
  pgs_.MergeFrom(from.pgs_);
}

void GetPgMapResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg.GetPgMapResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPgMapResponse::CopyFrom(const GetPgMapResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.GetPgMapResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPgMapResponse::IsInitialized() const {
  return true;
}

void GetPgMapResponse::InternalSwap(GetPgMapResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  errorcode_.Swap(&other->errorcode_);
  poolid_pgmapversion_.Swap(&other->poolid_pgmapversion_);
  pgs_.Swap(&other->pgs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetPgMapResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetOsdMapRequest::InitAsDefaultInstance() {
}
class GetOsdMapRequest::_Internal {
 public:
};

GetOsdMapRequest::GetOsdMapRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:msg.GetOsdMapRequest)
}
GetOsdMapRequest::GetOsdMapRequest(const GetOsdMapRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&currentversion_, &from.currentversion_,
    static_cast<size_t>(reinterpret_cast<char*>(&osdid_) -
    reinterpret_cast<char*>(&currentversion_)) + sizeof(osdid_));
  // @@protoc_insertion_point(copy_constructor:msg.GetOsdMapRequest)
}

void GetOsdMapRequest::SharedCtor() {
  ::memset(&currentversion_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&osdid_) -
      reinterpret_cast<char*>(&currentversion_)) + sizeof(osdid_));
}

GetOsdMapRequest::~GetOsdMapRequest() {
  // @@protoc_insertion_point(destructor:msg.GetOsdMapRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetOsdMapRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetOsdMapRequest::ArenaDtor(void* object) {
  GetOsdMapRequest* _this = reinterpret_cast< GetOsdMapRequest* >(object);
  (void)_this;
}
void GetOsdMapRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetOsdMapRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetOsdMapRequest& GetOsdMapRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetOsdMapRequest_mon_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void GetOsdMapRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.GetOsdMapRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&currentversion_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&osdid_) -
      reinterpret_cast<char*>(&currentversion_)) + sizeof(osdid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetOsdMapRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 osdid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          osdid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 currentversion = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          currentversion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetOsdMapRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.GetOsdMapRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 osdid = 1;
  if (this->osdid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_osdid(), target);
  }

  // int64 currentversion = 2;
  if (this->currentversion() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_currentversion(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.GetOsdMapRequest)
  return target;
}

size_t GetOsdMapRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.GetOsdMapRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 currentversion = 2;
  if (this->currentversion() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_currentversion());
  }

  // int32 osdid = 1;
  if (this->osdid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_osdid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetOsdMapRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg.GetOsdMapRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetOsdMapRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetOsdMapRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg.GetOsdMapRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg.GetOsdMapRequest)
    MergeFrom(*source);
  }
}

void GetOsdMapRequest::MergeFrom(const GetOsdMapRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.GetOsdMapRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.currentversion() != 0) {
    _internal_set_currentversion(from._internal_currentversion());
  }
  if (from.osdid() != 0) {
    _internal_set_osdid(from._internal_osdid());
  }
}

void GetOsdMapRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg.GetOsdMapRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetOsdMapRequest::CopyFrom(const GetOsdMapRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.GetOsdMapRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetOsdMapRequest::IsInitialized() const {
  return true;
}

void GetOsdMapRequest::InternalSwap(GetOsdMapRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetOsdMapRequest, osdid_)
      + sizeof(GetOsdMapRequest::osdid_)
      - PROTOBUF_FIELD_OFFSET(GetOsdMapRequest, currentversion_)>(
          reinterpret_cast<char*>(&currentversion_),
          reinterpret_cast<char*>(&other->currentversion_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetOsdMapRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetOsdMapResponse::InitAsDefaultInstance() {
}
class GetOsdMapResponse::_Internal {
 public:
};

GetOsdMapResponse::GetOsdMapResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  osds_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:msg.GetOsdMapResponse)
}
GetOsdMapResponse::GetOsdMapResponse(const GetOsdMapResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      osds_(from.osds_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&osdmapversion_, &from.osdmapversion_,
    static_cast<size_t>(reinterpret_cast<char*>(&errorcode_) -
    reinterpret_cast<char*>(&osdmapversion_)) + sizeof(errorcode_));
  // @@protoc_insertion_point(copy_constructor:msg.GetOsdMapResponse)
}

void GetOsdMapResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetOsdMapResponse_mon_5fmsg_2eproto.base);
  ::memset(&osdmapversion_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&errorcode_) -
      reinterpret_cast<char*>(&osdmapversion_)) + sizeof(errorcode_));
}

GetOsdMapResponse::~GetOsdMapResponse() {
  // @@protoc_insertion_point(destructor:msg.GetOsdMapResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetOsdMapResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetOsdMapResponse::ArenaDtor(void* object) {
  GetOsdMapResponse* _this = reinterpret_cast< GetOsdMapResponse* >(object);
  (void)_this;
}
void GetOsdMapResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetOsdMapResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetOsdMapResponse& GetOsdMapResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetOsdMapResponse_mon_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void GetOsdMapResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.GetOsdMapResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  osds_.Clear();
  ::memset(&osdmapversion_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&errorcode_) -
      reinterpret_cast<char*>(&osdmapversion_)) + sizeof(errorcode_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetOsdMapResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .msg.OsdMapErrorCode errorcode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_errorcode(static_cast<::msg::OsdMapErrorCode>(val));
        } else goto handle_unusual;
        continue;
      // int64 osdmapversion = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          osdmapversion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .msg.OsdDynamicInfo osds = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_osds(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetOsdMapResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.GetOsdMapResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .msg.OsdMapErrorCode errorcode = 1;
  if (this->errorcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_errorcode(), target);
  }

  // int64 osdmapversion = 2;
  if (this->osdmapversion() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_osdmapversion(), target);
  }

  // repeated .msg.OsdDynamicInfo osds = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_osds_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_osds(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.GetOsdMapResponse)
  return target;
}

size_t GetOsdMapResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.GetOsdMapResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .msg.OsdDynamicInfo osds = 3;
  total_size += 1UL * this->_internal_osds_size();
  for (const auto& msg : this->osds_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int64 osdmapversion = 2;
  if (this->osdmapversion() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_osdmapversion());
  }

  // .msg.OsdMapErrorCode errorcode = 1;
  if (this->errorcode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_errorcode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetOsdMapResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg.GetOsdMapResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetOsdMapResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetOsdMapResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg.GetOsdMapResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg.GetOsdMapResponse)
    MergeFrom(*source);
  }
}

void GetOsdMapResponse::MergeFrom(const GetOsdMapResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.GetOsdMapResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  osds_.MergeFrom(from.osds_);
  if (from.osdmapversion() != 0) {
    _internal_set_osdmapversion(from._internal_osdmapversion());
  }
  if (from.errorcode() != 0) {
    _internal_set_errorcode(from._internal_errorcode());
  }
}

void GetOsdMapResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg.GetOsdMapResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetOsdMapResponse::CopyFrom(const GetOsdMapResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.GetOsdMapResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetOsdMapResponse::IsInitialized() const {
  return true;
}

void GetOsdMapResponse::InternalSwap(GetOsdMapResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  osds_.InternalSwap(&other->osds_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetOsdMapResponse, errorcode_)
      + sizeof(GetOsdMapResponse::errorcode_)
      - PROTOBUF_FIELD_OFFSET(GetOsdMapResponse, osdmapversion_)>(
          reinterpret_cast<char*>(&osdmapversion_),
          reinterpret_cast<char*>(&other->osdmapversion_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetOsdMapResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetClusterMapRequest::InitAsDefaultInstance() {
  ::msg::_GetClusterMapRequest_default_instance_._instance.get_mutable()->gom_request_ = const_cast< ::msg::GetOsdMapRequest*>(
      ::msg::GetOsdMapRequest::internal_default_instance());
  ::msg::_GetClusterMapRequest_default_instance_._instance.get_mutable()->gpm_request_ = const_cast< ::msg::GetPgMapRequest*>(
      ::msg::GetPgMapRequest::internal_default_instance());
}
class GetClusterMapRequest::_Internal {
 public:
  static const ::msg::GetOsdMapRequest& gom_request(const GetClusterMapRequest* msg);
  static const ::msg::GetPgMapRequest& gpm_request(const GetClusterMapRequest* msg);
};

const ::msg::GetOsdMapRequest&
GetClusterMapRequest::_Internal::gom_request(const GetClusterMapRequest* msg) {
  return *msg->gom_request_;
}
const ::msg::GetPgMapRequest&
GetClusterMapRequest::_Internal::gpm_request(const GetClusterMapRequest* msg) {
  return *msg->gpm_request_;
}
GetClusterMapRequest::GetClusterMapRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:msg.GetClusterMapRequest)
}
GetClusterMapRequest::GetClusterMapRequest(const GetClusterMapRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_gom_request()) {
    gom_request_ = new ::msg::GetOsdMapRequest(*from.gom_request_);
  } else {
    gom_request_ = nullptr;
  }
  if (from._internal_has_gpm_request()) {
    gpm_request_ = new ::msg::GetPgMapRequest(*from.gpm_request_);
  } else {
    gpm_request_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:msg.GetClusterMapRequest)
}

void GetClusterMapRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetClusterMapRequest_mon_5fmsg_2eproto.base);
  ::memset(&gom_request_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gpm_request_) -
      reinterpret_cast<char*>(&gom_request_)) + sizeof(gpm_request_));
}

GetClusterMapRequest::~GetClusterMapRequest() {
  // @@protoc_insertion_point(destructor:msg.GetClusterMapRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetClusterMapRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete gom_request_;
  if (this != internal_default_instance()) delete gpm_request_;
}

void GetClusterMapRequest::ArenaDtor(void* object) {
  GetClusterMapRequest* _this = reinterpret_cast< GetClusterMapRequest* >(object);
  (void)_this;
}
void GetClusterMapRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetClusterMapRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetClusterMapRequest& GetClusterMapRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetClusterMapRequest_mon_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void GetClusterMapRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.GetClusterMapRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && gom_request_ != nullptr) {
    delete gom_request_;
  }
  gom_request_ = nullptr;
  if (GetArena() == nullptr && gpm_request_ != nullptr) {
    delete gpm_request_;
  }
  gpm_request_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetClusterMapRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .msg.GetOsdMapRequest gom_request = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_gom_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .msg.GetPgMapRequest gpm_request = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_gpm_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetClusterMapRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.GetClusterMapRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .msg.GetOsdMapRequest gom_request = 1;
  if (this->has_gom_request()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::gom_request(this), target, stream);
  }

  // .msg.GetPgMapRequest gpm_request = 2;
  if (this->has_gpm_request()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::gpm_request(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.GetClusterMapRequest)
  return target;
}

size_t GetClusterMapRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.GetClusterMapRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .msg.GetOsdMapRequest gom_request = 1;
  if (this->has_gom_request()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *gom_request_);
  }

  // .msg.GetPgMapRequest gpm_request = 2;
  if (this->has_gpm_request()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *gpm_request_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetClusterMapRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg.GetClusterMapRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetClusterMapRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetClusterMapRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg.GetClusterMapRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg.GetClusterMapRequest)
    MergeFrom(*source);
  }
}

void GetClusterMapRequest::MergeFrom(const GetClusterMapRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.GetClusterMapRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_gom_request()) {
    _internal_mutable_gom_request()->::msg::GetOsdMapRequest::MergeFrom(from._internal_gom_request());
  }
  if (from.has_gpm_request()) {
    _internal_mutable_gpm_request()->::msg::GetPgMapRequest::MergeFrom(from._internal_gpm_request());
  }
}

void GetClusterMapRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg.GetClusterMapRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetClusterMapRequest::CopyFrom(const GetClusterMapRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.GetClusterMapRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetClusterMapRequest::IsInitialized() const {
  return true;
}

void GetClusterMapRequest::InternalSwap(GetClusterMapRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetClusterMapRequest, gpm_request_)
      + sizeof(GetClusterMapRequest::gpm_request_)
      - PROTOBUF_FIELD_OFFSET(GetClusterMapRequest, gom_request_)>(
          reinterpret_cast<char*>(&gom_request_),
          reinterpret_cast<char*>(&other->gom_request_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetClusterMapRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetClusterMapResponse::InitAsDefaultInstance() {
  ::msg::_GetClusterMapResponse_default_instance_._instance.get_mutable()->gom_response_ = const_cast< ::msg::GetOsdMapResponse*>(
      ::msg::GetOsdMapResponse::internal_default_instance());
  ::msg::_GetClusterMapResponse_default_instance_._instance.get_mutable()->gpm_response_ = const_cast< ::msg::GetPgMapResponse*>(
      ::msg::GetPgMapResponse::internal_default_instance());
}
class GetClusterMapResponse::_Internal {
 public:
  static const ::msg::GetOsdMapResponse& gom_response(const GetClusterMapResponse* msg);
  static const ::msg::GetPgMapResponse& gpm_response(const GetClusterMapResponse* msg);
};

const ::msg::GetOsdMapResponse&
GetClusterMapResponse::_Internal::gom_response(const GetClusterMapResponse* msg) {
  return *msg->gom_response_;
}
const ::msg::GetPgMapResponse&
GetClusterMapResponse::_Internal::gpm_response(const GetClusterMapResponse* msg) {
  return *msg->gpm_response_;
}
GetClusterMapResponse::GetClusterMapResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:msg.GetClusterMapResponse)
}
GetClusterMapResponse::GetClusterMapResponse(const GetClusterMapResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_gom_response()) {
    gom_response_ = new ::msg::GetOsdMapResponse(*from.gom_response_);
  } else {
    gom_response_ = nullptr;
  }
  if (from._internal_has_gpm_response()) {
    gpm_response_ = new ::msg::GetPgMapResponse(*from.gpm_response_);
  } else {
    gpm_response_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:msg.GetClusterMapResponse)
}

void GetClusterMapResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetClusterMapResponse_mon_5fmsg_2eproto.base);
  ::memset(&gom_response_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gpm_response_) -
      reinterpret_cast<char*>(&gom_response_)) + sizeof(gpm_response_));
}

GetClusterMapResponse::~GetClusterMapResponse() {
  // @@protoc_insertion_point(destructor:msg.GetClusterMapResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetClusterMapResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete gom_response_;
  if (this != internal_default_instance()) delete gpm_response_;
}

void GetClusterMapResponse::ArenaDtor(void* object) {
  GetClusterMapResponse* _this = reinterpret_cast< GetClusterMapResponse* >(object);
  (void)_this;
}
void GetClusterMapResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetClusterMapResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetClusterMapResponse& GetClusterMapResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetClusterMapResponse_mon_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void GetClusterMapResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.GetClusterMapResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && gom_response_ != nullptr) {
    delete gom_response_;
  }
  gom_response_ = nullptr;
  if (GetArena() == nullptr && gpm_response_ != nullptr) {
    delete gpm_response_;
  }
  gpm_response_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetClusterMapResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .msg.GetOsdMapResponse gom_response = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_gom_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .msg.GetPgMapResponse gpm_response = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_gpm_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetClusterMapResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.GetClusterMapResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .msg.GetOsdMapResponse gom_response = 1;
  if (this->has_gom_response()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::gom_response(this), target, stream);
  }

  // .msg.GetPgMapResponse gpm_response = 2;
  if (this->has_gpm_response()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::gpm_response(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.GetClusterMapResponse)
  return target;
}

size_t GetClusterMapResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.GetClusterMapResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .msg.GetOsdMapResponse gom_response = 1;
  if (this->has_gom_response()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *gom_response_);
  }

  // .msg.GetPgMapResponse gpm_response = 2;
  if (this->has_gpm_response()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *gpm_response_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetClusterMapResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg.GetClusterMapResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetClusterMapResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetClusterMapResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg.GetClusterMapResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg.GetClusterMapResponse)
    MergeFrom(*source);
  }
}

void GetClusterMapResponse::MergeFrom(const GetClusterMapResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.GetClusterMapResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_gom_response()) {
    _internal_mutable_gom_response()->::msg::GetOsdMapResponse::MergeFrom(from._internal_gom_response());
  }
  if (from.has_gpm_response()) {
    _internal_mutable_gpm_response()->::msg::GetPgMapResponse::MergeFrom(from._internal_gpm_response());
  }
}

void GetClusterMapResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg.GetClusterMapResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetClusterMapResponse::CopyFrom(const GetClusterMapResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.GetClusterMapResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetClusterMapResponse::IsInitialized() const {
  return true;
}

void GetClusterMapResponse::InternalSwap(GetClusterMapResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetClusterMapResponse, gpm_response_)
      + sizeof(GetClusterMapResponse::gpm_response_)
      - PROTOBUF_FIELD_OFFSET(GetClusterMapResponse, gom_response_)>(
          reinterpret_cast<char*>(&gom_response_),
          reinterpret_cast<char*>(&other->gom_response_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetClusterMapResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BootResponse::InitAsDefaultInstance() {
}
class BootResponse::_Internal {
 public:
};

BootResponse::BootResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:msg.BootResponse)
}
BootResponse::BootResponse(const BootResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ok_ = from.ok_;
  // @@protoc_insertion_point(copy_constructor:msg.BootResponse)
}

void BootResponse::SharedCtor() {
  ok_ = false;
}

BootResponse::~BootResponse() {
  // @@protoc_insertion_point(destructor:msg.BootResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BootResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void BootResponse::ArenaDtor(void* object) {
  BootResponse* _this = reinterpret_cast< BootResponse* >(object);
  (void)_this;
}
void BootResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BootResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BootResponse& BootResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BootResponse_mon_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void BootResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.BootResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ok_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BootResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool ok = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ok_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BootResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.BootResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool ok = 1;
  if (this->ok() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_ok(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.BootResponse)
  return target;
}

size_t BootResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.BootResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool ok = 1;
  if (this->ok() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BootResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg.BootResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const BootResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BootResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg.BootResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg.BootResponse)
    MergeFrom(*source);
  }
}

void BootResponse::MergeFrom(const BootResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.BootResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ok() != 0) {
    _internal_set_ok(from._internal_ok());
  }
}

void BootResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg.BootResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BootResponse::CopyFrom(const BootResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.BootResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BootResponse::IsInitialized() const {
  return true;
}

void BootResponse::InternalSwap(BootResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(ok_, other->ok_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BootResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OsdStopRequest::InitAsDefaultInstance() {
}
class OsdStopRequest::_Internal {
 public:
};

OsdStopRequest::OsdStopRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:msg.OsdStopRequest)
}
OsdStopRequest::OsdStopRequest(const OsdStopRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:msg.OsdStopRequest)
}

void OsdStopRequest::SharedCtor() {
  id_ = 0;
}

OsdStopRequest::~OsdStopRequest() {
  // @@protoc_insertion_point(destructor:msg.OsdStopRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OsdStopRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void OsdStopRequest::ArenaDtor(void* object) {
  OsdStopRequest* _this = reinterpret_cast< OsdStopRequest* >(object);
  (void)_this;
}
void OsdStopRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OsdStopRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OsdStopRequest& OsdStopRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OsdStopRequest_mon_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void OsdStopRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.OsdStopRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OsdStopRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OsdStopRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.OsdStopRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.OsdStopRequest)
  return target;
}

size_t OsdStopRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.OsdStopRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OsdStopRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg.OsdStopRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const OsdStopRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OsdStopRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg.OsdStopRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg.OsdStopRequest)
    MergeFrom(*source);
  }
}

void OsdStopRequest::MergeFrom(const OsdStopRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.OsdStopRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void OsdStopRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg.OsdStopRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OsdStopRequest::CopyFrom(const OsdStopRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.OsdStopRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OsdStopRequest::IsInitialized() const {
  return true;
}

void OsdStopRequest::InternalSwap(OsdStopRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OsdStopRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OsdStopResponse::InitAsDefaultInstance() {
}
class OsdStopResponse::_Internal {
 public:
};

OsdStopResponse::OsdStopResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:msg.OsdStopResponse)
}
OsdStopResponse::OsdStopResponse(const OsdStopResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ok_ = from.ok_;
  // @@protoc_insertion_point(copy_constructor:msg.OsdStopResponse)
}

void OsdStopResponse::SharedCtor() {
  ok_ = false;
}

OsdStopResponse::~OsdStopResponse() {
  // @@protoc_insertion_point(destructor:msg.OsdStopResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OsdStopResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void OsdStopResponse::ArenaDtor(void* object) {
  OsdStopResponse* _this = reinterpret_cast< OsdStopResponse* >(object);
  (void)_this;
}
void OsdStopResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OsdStopResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OsdStopResponse& OsdStopResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OsdStopResponse_mon_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void OsdStopResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.OsdStopResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ok_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OsdStopResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool ok = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ok_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OsdStopResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.OsdStopResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool ok = 1;
  if (this->ok() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_ok(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.OsdStopResponse)
  return target;
}

size_t OsdStopResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.OsdStopResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool ok = 1;
  if (this->ok() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OsdStopResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg.OsdStopResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const OsdStopResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OsdStopResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg.OsdStopResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg.OsdStopResponse)
    MergeFrom(*source);
  }
}

void OsdStopResponse::MergeFrom(const OsdStopResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.OsdStopResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ok() != 0) {
    _internal_set_ok(from._internal_ok());
  }
}

void OsdStopResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg.OsdStopResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OsdStopResponse::CopyFrom(const OsdStopResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.OsdStopResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OsdStopResponse::IsInitialized() const {
  return true;
}

void OsdStopResponse::InternalSwap(OsdStopResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(ok_, other->ok_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OsdStopResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HeartbeatRequest::InitAsDefaultInstance() {
}
class HeartbeatRequest::_Internal {
 public:
};

HeartbeatRequest::HeartbeatRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:msg.HeartbeatRequest)
}
HeartbeatRequest::HeartbeatRequest(const HeartbeatRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:msg.HeartbeatRequest)
}

void HeartbeatRequest::SharedCtor() {
  id_ = 0;
}

HeartbeatRequest::~HeartbeatRequest() {
  // @@protoc_insertion_point(destructor:msg.HeartbeatRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HeartbeatRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void HeartbeatRequest::ArenaDtor(void* object) {
  HeartbeatRequest* _this = reinterpret_cast< HeartbeatRequest* >(object);
  (void)_this;
}
void HeartbeatRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HeartbeatRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HeartbeatRequest& HeartbeatRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HeartbeatRequest_mon_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void HeartbeatRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.HeartbeatRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HeartbeatRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HeartbeatRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.HeartbeatRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.HeartbeatRequest)
  return target;
}

size_t HeartbeatRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.HeartbeatRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HeartbeatRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg.HeartbeatRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const HeartbeatRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HeartbeatRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg.HeartbeatRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg.HeartbeatRequest)
    MergeFrom(*source);
  }
}

void HeartbeatRequest::MergeFrom(const HeartbeatRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.HeartbeatRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void HeartbeatRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg.HeartbeatRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeartbeatRequest::CopyFrom(const HeartbeatRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.HeartbeatRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeartbeatRequest::IsInitialized() const {
  return true;
}

void HeartbeatRequest::InternalSwap(HeartbeatRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HeartbeatRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HeartbeatResponse::InitAsDefaultInstance() {
}
class HeartbeatResponse::_Internal {
 public:
};

HeartbeatResponse::HeartbeatResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:msg.HeartbeatResponse)
}
HeartbeatResponse::HeartbeatResponse(const HeartbeatResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ok_ = from.ok_;
  // @@protoc_insertion_point(copy_constructor:msg.HeartbeatResponse)
}

void HeartbeatResponse::SharedCtor() {
  ok_ = false;
}

HeartbeatResponse::~HeartbeatResponse() {
  // @@protoc_insertion_point(destructor:msg.HeartbeatResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HeartbeatResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void HeartbeatResponse::ArenaDtor(void* object) {
  HeartbeatResponse* _this = reinterpret_cast< HeartbeatResponse* >(object);
  (void)_this;
}
void HeartbeatResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HeartbeatResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HeartbeatResponse& HeartbeatResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HeartbeatResponse_mon_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void HeartbeatResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.HeartbeatResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ok_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HeartbeatResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool ok = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ok_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HeartbeatResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.HeartbeatResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool ok = 1;
  if (this->ok() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_ok(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.HeartbeatResponse)
  return target;
}

size_t HeartbeatResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.HeartbeatResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool ok = 1;
  if (this->ok() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HeartbeatResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg.HeartbeatResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const HeartbeatResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HeartbeatResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg.HeartbeatResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg.HeartbeatResponse)
    MergeFrom(*source);
  }
}

void HeartbeatResponse::MergeFrom(const HeartbeatResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.HeartbeatResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ok() != 0) {
    _internal_set_ok(from._internal_ok());
  }
}

void HeartbeatResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg.HeartbeatResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeartbeatResponse::CopyFrom(const HeartbeatResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.HeartbeatResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeartbeatResponse::IsInitialized() const {
  return true;
}

void HeartbeatResponse::InternalSwap(HeartbeatResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(ok_, other->ok_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HeartbeatResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Request::InitAsDefaultInstance() {
  ::msg::_Request_default_instance_.boot_request_ = const_cast< ::msg::BootRequest*>(
      ::msg::BootRequest::internal_default_instance());
  ::msg::_Request_default_instance_.osd_stop_request_ = const_cast< ::msg::OsdStopRequest*>(
      ::msg::OsdStopRequest::internal_default_instance());
  ::msg::_Request_default_instance_.heartbeat_request_ = const_cast< ::msg::HeartbeatRequest*>(
      ::msg::HeartbeatRequest::internal_default_instance());
  ::msg::_Request_default_instance_.get_osdmap_request_ = const_cast< ::msg::GetOsdMapRequest*>(
      ::msg::GetOsdMapRequest::internal_default_instance());
  ::msg::_Request_default_instance_.list_pools_request_ = const_cast< ::msg::ListPoolsRequest*>(
      ::msg::ListPoolsRequest::internal_default_instance());
  ::msg::_Request_default_instance_.apply_id_request_ = const_cast< ::msg::ApplyIDRequest*>(
      ::msg::ApplyIDRequest::internal_default_instance());
  ::msg::_Request_default_instance_.create_pool_request_ = const_cast< ::msg::CreatePoolRequest*>(
      ::msg::CreatePoolRequest::internal_default_instance());
  ::msg::_Request_default_instance_.get_pgmap_request_ = const_cast< ::msg::GetPgMapRequest*>(
      ::msg::GetPgMapRequest::internal_default_instance());
  ::msg::_Request_default_instance_.delete_pool_request_ = const_cast< ::msg::DeletePoolRequest*>(
      ::msg::DeletePoolRequest::internal_default_instance());
  ::msg::_Request_default_instance_.get_cluster_map_request_ = const_cast< ::msg::GetClusterMapRequest*>(
      ::msg::GetClusterMapRequest::internal_default_instance());
}
class Request::_Internal {
 public:
  static const ::msg::BootRequest& boot_request(const Request* msg);
  static const ::msg::OsdStopRequest& osd_stop_request(const Request* msg);
  static const ::msg::HeartbeatRequest& heartbeat_request(const Request* msg);
  static const ::msg::GetOsdMapRequest& get_osdmap_request(const Request* msg);
  static const ::msg::ListPoolsRequest& list_pools_request(const Request* msg);
  static const ::msg::ApplyIDRequest& apply_id_request(const Request* msg);
  static const ::msg::CreatePoolRequest& create_pool_request(const Request* msg);
  static const ::msg::GetPgMapRequest& get_pgmap_request(const Request* msg);
  static const ::msg::DeletePoolRequest& delete_pool_request(const Request* msg);
  static const ::msg::GetClusterMapRequest& get_cluster_map_request(const Request* msg);
};

const ::msg::BootRequest&
Request::_Internal::boot_request(const Request* msg) {
  return *msg->union_.boot_request_;
}
const ::msg::OsdStopRequest&
Request::_Internal::osd_stop_request(const Request* msg) {
  return *msg->union_.osd_stop_request_;
}
const ::msg::HeartbeatRequest&
Request::_Internal::heartbeat_request(const Request* msg) {
  return *msg->union_.heartbeat_request_;
}
const ::msg::GetOsdMapRequest&
Request::_Internal::get_osdmap_request(const Request* msg) {
  return *msg->union_.get_osdmap_request_;
}
const ::msg::ListPoolsRequest&
Request::_Internal::list_pools_request(const Request* msg) {
  return *msg->union_.list_pools_request_;
}
const ::msg::ApplyIDRequest&
Request::_Internal::apply_id_request(const Request* msg) {
  return *msg->union_.apply_id_request_;
}
const ::msg::CreatePoolRequest&
Request::_Internal::create_pool_request(const Request* msg) {
  return *msg->union_.create_pool_request_;
}
const ::msg::GetPgMapRequest&
Request::_Internal::get_pgmap_request(const Request* msg) {
  return *msg->union_.get_pgmap_request_;
}
const ::msg::DeletePoolRequest&
Request::_Internal::delete_pool_request(const Request* msg) {
  return *msg->union_.delete_pool_request_;
}
const ::msg::GetClusterMapRequest&
Request::_Internal::get_cluster_map_request(const Request* msg) {
  return *msg->union_.get_cluster_map_request_;
}
void Request::set_allocated_boot_request(::msg::BootRequest* boot_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_union();
  if (boot_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(boot_request);
    if (message_arena != submessage_arena) {
      boot_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, boot_request, submessage_arena);
    }
    set_has_boot_request();
    union_.boot_request_ = boot_request;
  }
  // @@protoc_insertion_point(field_set_allocated:msg.Request.boot_request)
}
void Request::set_allocated_osd_stop_request(::msg::OsdStopRequest* osd_stop_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_union();
  if (osd_stop_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(osd_stop_request);
    if (message_arena != submessage_arena) {
      osd_stop_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, osd_stop_request, submessage_arena);
    }
    set_has_osd_stop_request();
    union_.osd_stop_request_ = osd_stop_request;
  }
  // @@protoc_insertion_point(field_set_allocated:msg.Request.osd_stop_request)
}
void Request::set_allocated_heartbeat_request(::msg::HeartbeatRequest* heartbeat_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_union();
  if (heartbeat_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(heartbeat_request);
    if (message_arena != submessage_arena) {
      heartbeat_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, heartbeat_request, submessage_arena);
    }
    set_has_heartbeat_request();
    union_.heartbeat_request_ = heartbeat_request;
  }
  // @@protoc_insertion_point(field_set_allocated:msg.Request.heartbeat_request)
}
void Request::set_allocated_get_osdmap_request(::msg::GetOsdMapRequest* get_osdmap_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_union();
  if (get_osdmap_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(get_osdmap_request);
    if (message_arena != submessage_arena) {
      get_osdmap_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_osdmap_request, submessage_arena);
    }
    set_has_get_osdmap_request();
    union_.get_osdmap_request_ = get_osdmap_request;
  }
  // @@protoc_insertion_point(field_set_allocated:msg.Request.get_osdmap_request)
}
void Request::set_allocated_list_pools_request(::msg::ListPoolsRequest* list_pools_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_union();
  if (list_pools_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(list_pools_request);
    if (message_arena != submessage_arena) {
      list_pools_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, list_pools_request, submessage_arena);
    }
    set_has_list_pools_request();
    union_.list_pools_request_ = list_pools_request;
  }
  // @@protoc_insertion_point(field_set_allocated:msg.Request.list_pools_request)
}
void Request::set_allocated_apply_id_request(::msg::ApplyIDRequest* apply_id_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_union();
  if (apply_id_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(apply_id_request);
    if (message_arena != submessage_arena) {
      apply_id_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, apply_id_request, submessage_arena);
    }
    set_has_apply_id_request();
    union_.apply_id_request_ = apply_id_request;
  }
  // @@protoc_insertion_point(field_set_allocated:msg.Request.apply_id_request)
}
void Request::set_allocated_create_pool_request(::msg::CreatePoolRequest* create_pool_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_union();
  if (create_pool_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(create_pool_request);
    if (message_arena != submessage_arena) {
      create_pool_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, create_pool_request, submessage_arena);
    }
    set_has_create_pool_request();
    union_.create_pool_request_ = create_pool_request;
  }
  // @@protoc_insertion_point(field_set_allocated:msg.Request.create_pool_request)
}
void Request::set_allocated_get_pgmap_request(::msg::GetPgMapRequest* get_pgmap_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_union();
  if (get_pgmap_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(get_pgmap_request);
    if (message_arena != submessage_arena) {
      get_pgmap_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_pgmap_request, submessage_arena);
    }
    set_has_get_pgmap_request();
    union_.get_pgmap_request_ = get_pgmap_request;
  }
  // @@protoc_insertion_point(field_set_allocated:msg.Request.get_pgmap_request)
}
void Request::set_allocated_delete_pool_request(::msg::DeletePoolRequest* delete_pool_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_union();
  if (delete_pool_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(delete_pool_request);
    if (message_arena != submessage_arena) {
      delete_pool_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, delete_pool_request, submessage_arena);
    }
    set_has_delete_pool_request();
    union_.delete_pool_request_ = delete_pool_request;
  }
  // @@protoc_insertion_point(field_set_allocated:msg.Request.delete_pool_request)
}
void Request::set_allocated_get_cluster_map_request(::msg::GetClusterMapRequest* get_cluster_map_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_union();
  if (get_cluster_map_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(get_cluster_map_request);
    if (message_arena != submessage_arena) {
      get_cluster_map_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_cluster_map_request, submessage_arena);
    }
    set_has_get_cluster_map_request();
    union_.get_cluster_map_request_ = get_cluster_map_request;
  }
  // @@protoc_insertion_point(field_set_allocated:msg.Request.get_cluster_map_request)
}
Request::Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:msg.Request)
}
Request::Request(const Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_union();
  switch (from.union_case()) {
    case kBootRequest: {
      _internal_mutable_boot_request()->::msg::BootRequest::MergeFrom(from._internal_boot_request());
      break;
    }
    case kOsdStopRequest: {
      _internal_mutable_osd_stop_request()->::msg::OsdStopRequest::MergeFrom(from._internal_osd_stop_request());
      break;
    }
    case kHeartbeatRequest: {
      _internal_mutable_heartbeat_request()->::msg::HeartbeatRequest::MergeFrom(from._internal_heartbeat_request());
      break;
    }
    case kGetOsdmapRequest: {
      _internal_mutable_get_osdmap_request()->::msg::GetOsdMapRequest::MergeFrom(from._internal_get_osdmap_request());
      break;
    }
    case kListPoolsRequest: {
      _internal_mutable_list_pools_request()->::msg::ListPoolsRequest::MergeFrom(from._internal_list_pools_request());
      break;
    }
    case kApplyIdRequest: {
      _internal_mutable_apply_id_request()->::msg::ApplyIDRequest::MergeFrom(from._internal_apply_id_request());
      break;
    }
    case kCreatePoolRequest: {
      _internal_mutable_create_pool_request()->::msg::CreatePoolRequest::MergeFrom(from._internal_create_pool_request());
      break;
    }
    case kGetPgmapRequest: {
      _internal_mutable_get_pgmap_request()->::msg::GetPgMapRequest::MergeFrom(from._internal_get_pgmap_request());
      break;
    }
    case kDeletePoolRequest: {
      _internal_mutable_delete_pool_request()->::msg::DeletePoolRequest::MergeFrom(from._internal_delete_pool_request());
      break;
    }
    case kGetClusterMapRequest: {
      _internal_mutable_get_cluster_map_request()->::msg::GetClusterMapRequest::MergeFrom(from._internal_get_cluster_map_request());
      break;
    }
    case UNION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:msg.Request)
}

void Request::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Request_mon_5fmsg_2eproto.base);
  clear_has_union();
}

Request::~Request() {
  // @@protoc_insertion_point(destructor:msg.Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_union()) {
    clear_union();
  }
}

void Request::ArenaDtor(void* object) {
  Request* _this = reinterpret_cast< Request* >(object);
  (void)_this;
}
void Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Request& Request::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Request_mon_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void Request::clear_union() {
// @@protoc_insertion_point(one_of_clear_start:msg.Request)
  switch (union_case()) {
    case kBootRequest: {
      if (GetArena() == nullptr) {
        delete union_.boot_request_;
      }
      break;
    }
    case kOsdStopRequest: {
      if (GetArena() == nullptr) {
        delete union_.osd_stop_request_;
      }
      break;
    }
    case kHeartbeatRequest: {
      if (GetArena() == nullptr) {
        delete union_.heartbeat_request_;
      }
      break;
    }
    case kGetOsdmapRequest: {
      if (GetArena() == nullptr) {
        delete union_.get_osdmap_request_;
      }
      break;
    }
    case kListPoolsRequest: {
      if (GetArena() == nullptr) {
        delete union_.list_pools_request_;
      }
      break;
    }
    case kApplyIdRequest: {
      if (GetArena() == nullptr) {
        delete union_.apply_id_request_;
      }
      break;
    }
    case kCreatePoolRequest: {
      if (GetArena() == nullptr) {
        delete union_.create_pool_request_;
      }
      break;
    }
    case kGetPgmapRequest: {
      if (GetArena() == nullptr) {
        delete union_.get_pgmap_request_;
      }
      break;
    }
    case kDeletePoolRequest: {
      if (GetArena() == nullptr) {
        delete union_.delete_pool_request_;
      }
      break;
    }
    case kGetClusterMapRequest: {
      if (GetArena() == nullptr) {
        delete union_.get_cluster_map_request_;
      }
      break;
    }
    case UNION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = UNION_NOT_SET;
}


void Request::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_union();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .msg.BootRequest boot_request = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_boot_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .msg.OsdStopRequest osd_stop_request = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_osd_stop_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .msg.HeartbeatRequest heartbeat_request = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_heartbeat_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .msg.GetOsdMapRequest get_osdmap_request = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_osdmap_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .msg.ListPoolsRequest list_pools_request = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_list_pools_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .msg.ApplyIDRequest apply_id_request = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_apply_id_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .msg.CreatePoolRequest create_pool_request = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_create_pool_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .msg.GetPgMapRequest get_pgmap_request = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_pgmap_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .msg.DeletePoolRequest delete_pool_request = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_delete_pool_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .msg.GetClusterMapRequest get_cluster_map_request = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_cluster_map_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .msg.BootRequest boot_request = 1;
  if (_internal_has_boot_request()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::boot_request(this), target, stream);
  }

  // .msg.OsdStopRequest osd_stop_request = 2;
  if (_internal_has_osd_stop_request()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::osd_stop_request(this), target, stream);
  }

  // .msg.HeartbeatRequest heartbeat_request = 3;
  if (_internal_has_heartbeat_request()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::heartbeat_request(this), target, stream);
  }

  // .msg.GetOsdMapRequest get_osdmap_request = 4;
  if (_internal_has_get_osdmap_request()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::get_osdmap_request(this), target, stream);
  }

  // .msg.ListPoolsRequest list_pools_request = 5;
  if (_internal_has_list_pools_request()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::list_pools_request(this), target, stream);
  }

  // .msg.ApplyIDRequest apply_id_request = 6;
  if (_internal_has_apply_id_request()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::apply_id_request(this), target, stream);
  }

  // .msg.CreatePoolRequest create_pool_request = 7;
  if (_internal_has_create_pool_request()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::create_pool_request(this), target, stream);
  }

  // .msg.GetPgMapRequest get_pgmap_request = 8;
  if (_internal_has_get_pgmap_request()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::get_pgmap_request(this), target, stream);
  }

  // .msg.DeletePoolRequest delete_pool_request = 9;
  if (_internal_has_delete_pool_request()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::delete_pool_request(this), target, stream);
  }

  // .msg.GetClusterMapRequest get_cluster_map_request = 10;
  if (_internal_has_get_cluster_map_request()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::get_cluster_map_request(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Request)
  return target;
}

size_t Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (union_case()) {
    // .msg.BootRequest boot_request = 1;
    case kBootRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *union_.boot_request_);
      break;
    }
    // .msg.OsdStopRequest osd_stop_request = 2;
    case kOsdStopRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *union_.osd_stop_request_);
      break;
    }
    // .msg.HeartbeatRequest heartbeat_request = 3;
    case kHeartbeatRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *union_.heartbeat_request_);
      break;
    }
    // .msg.GetOsdMapRequest get_osdmap_request = 4;
    case kGetOsdmapRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *union_.get_osdmap_request_);
      break;
    }
    // .msg.ListPoolsRequest list_pools_request = 5;
    case kListPoolsRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *union_.list_pools_request_);
      break;
    }
    // .msg.ApplyIDRequest apply_id_request = 6;
    case kApplyIdRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *union_.apply_id_request_);
      break;
    }
    // .msg.CreatePoolRequest create_pool_request = 7;
    case kCreatePoolRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *union_.create_pool_request_);
      break;
    }
    // .msg.GetPgMapRequest get_pgmap_request = 8;
    case kGetPgmapRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *union_.get_pgmap_request_);
      break;
    }
    // .msg.DeletePoolRequest delete_pool_request = 9;
    case kDeletePoolRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *union_.delete_pool_request_);
      break;
    }
    // .msg.GetClusterMapRequest get_cluster_map_request = 10;
    case kGetClusterMapRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *union_.get_cluster_map_request_);
      break;
    }
    case UNION_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg.Request)
  GOOGLE_DCHECK_NE(&from, this);
  const Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg.Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg.Request)
    MergeFrom(*source);
  }
}

void Request::MergeFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.union_case()) {
    case kBootRequest: {
      _internal_mutable_boot_request()->::msg::BootRequest::MergeFrom(from._internal_boot_request());
      break;
    }
    case kOsdStopRequest: {
      _internal_mutable_osd_stop_request()->::msg::OsdStopRequest::MergeFrom(from._internal_osd_stop_request());
      break;
    }
    case kHeartbeatRequest: {
      _internal_mutable_heartbeat_request()->::msg::HeartbeatRequest::MergeFrom(from._internal_heartbeat_request());
      break;
    }
    case kGetOsdmapRequest: {
      _internal_mutable_get_osdmap_request()->::msg::GetOsdMapRequest::MergeFrom(from._internal_get_osdmap_request());
      break;
    }
    case kListPoolsRequest: {
      _internal_mutable_list_pools_request()->::msg::ListPoolsRequest::MergeFrom(from._internal_list_pools_request());
      break;
    }
    case kApplyIdRequest: {
      _internal_mutable_apply_id_request()->::msg::ApplyIDRequest::MergeFrom(from._internal_apply_id_request());
      break;
    }
    case kCreatePoolRequest: {
      _internal_mutable_create_pool_request()->::msg::CreatePoolRequest::MergeFrom(from._internal_create_pool_request());
      break;
    }
    case kGetPgmapRequest: {
      _internal_mutable_get_pgmap_request()->::msg::GetPgMapRequest::MergeFrom(from._internal_get_pgmap_request());
      break;
    }
    case kDeletePoolRequest: {
      _internal_mutable_delete_pool_request()->::msg::DeletePoolRequest::MergeFrom(from._internal_delete_pool_request());
      break;
    }
    case kGetClusterMapRequest: {
      _internal_mutable_get_cluster_map_request()->::msg::GetClusterMapRequest::MergeFrom(from._internal_get_cluster_map_request());
      break;
    }
    case UNION_NOT_SET: {
      break;
    }
  }
}

void Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request::CopyFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request::IsInitialized() const {
  return true;
}

void Request::InternalSwap(Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(union_, other->union_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Response::InitAsDefaultInstance() {
  ::msg::_Response_default_instance_.boot_response_ = const_cast< ::msg::BootResponse*>(
      ::msg::BootResponse::internal_default_instance());
  ::msg::_Response_default_instance_.osd_stop_response_ = const_cast< ::msg::OsdStopResponse*>(
      ::msg::OsdStopResponse::internal_default_instance());
  ::msg::_Response_default_instance_.heartbeat_response_ = const_cast< ::msg::HeartbeatResponse*>(
      ::msg::HeartbeatResponse::internal_default_instance());
  ::msg::_Response_default_instance_.get_osdmap_response_ = const_cast< ::msg::GetOsdMapResponse*>(
      ::msg::GetOsdMapResponse::internal_default_instance());
  ::msg::_Response_default_instance_.list_pools_response_ = const_cast< ::msg::ListPoolsResponse*>(
      ::msg::ListPoolsResponse::internal_default_instance());
  ::msg::_Response_default_instance_.apply_id_response_ = const_cast< ::msg::ApplyIDResponse*>(
      ::msg::ApplyIDResponse::internal_default_instance());
  ::msg::_Response_default_instance_.create_pool_response_ = const_cast< ::msg::CreatePoolResponse*>(
      ::msg::CreatePoolResponse::internal_default_instance());
  ::msg::_Response_default_instance_.get_pgmap_response_ = const_cast< ::msg::GetPgMapResponse*>(
      ::msg::GetPgMapResponse::internal_default_instance());
  ::msg::_Response_default_instance_.delete_pool_response_ = const_cast< ::msg::DeletePoolResponse*>(
      ::msg::DeletePoolResponse::internal_default_instance());
  ::msg::_Response_default_instance_.get_cluster_map_response_ = const_cast< ::msg::GetClusterMapResponse*>(
      ::msg::GetClusterMapResponse::internal_default_instance());
}
class Response::_Internal {
 public:
  static const ::msg::BootResponse& boot_response(const Response* msg);
  static const ::msg::OsdStopResponse& osd_stop_response(const Response* msg);
  static const ::msg::HeartbeatResponse& heartbeat_response(const Response* msg);
  static const ::msg::GetOsdMapResponse& get_osdmap_response(const Response* msg);
  static const ::msg::ListPoolsResponse& list_pools_response(const Response* msg);
  static const ::msg::ApplyIDResponse& apply_id_response(const Response* msg);
  static const ::msg::CreatePoolResponse& create_pool_response(const Response* msg);
  static const ::msg::GetPgMapResponse& get_pgmap_response(const Response* msg);
  static const ::msg::DeletePoolResponse& delete_pool_response(const Response* msg);
  static const ::msg::GetClusterMapResponse& get_cluster_map_response(const Response* msg);
};

const ::msg::BootResponse&
Response::_Internal::boot_response(const Response* msg) {
  return *msg->union_.boot_response_;
}
const ::msg::OsdStopResponse&
Response::_Internal::osd_stop_response(const Response* msg) {
  return *msg->union_.osd_stop_response_;
}
const ::msg::HeartbeatResponse&
Response::_Internal::heartbeat_response(const Response* msg) {
  return *msg->union_.heartbeat_response_;
}
const ::msg::GetOsdMapResponse&
Response::_Internal::get_osdmap_response(const Response* msg) {
  return *msg->union_.get_osdmap_response_;
}
const ::msg::ListPoolsResponse&
Response::_Internal::list_pools_response(const Response* msg) {
  return *msg->union_.list_pools_response_;
}
const ::msg::ApplyIDResponse&
Response::_Internal::apply_id_response(const Response* msg) {
  return *msg->union_.apply_id_response_;
}
const ::msg::CreatePoolResponse&
Response::_Internal::create_pool_response(const Response* msg) {
  return *msg->union_.create_pool_response_;
}
const ::msg::GetPgMapResponse&
Response::_Internal::get_pgmap_response(const Response* msg) {
  return *msg->union_.get_pgmap_response_;
}
const ::msg::DeletePoolResponse&
Response::_Internal::delete_pool_response(const Response* msg) {
  return *msg->union_.delete_pool_response_;
}
const ::msg::GetClusterMapResponse&
Response::_Internal::get_cluster_map_response(const Response* msg) {
  return *msg->union_.get_cluster_map_response_;
}
void Response::set_allocated_boot_response(::msg::BootResponse* boot_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_union();
  if (boot_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(boot_response);
    if (message_arena != submessage_arena) {
      boot_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, boot_response, submessage_arena);
    }
    set_has_boot_response();
    union_.boot_response_ = boot_response;
  }
  // @@protoc_insertion_point(field_set_allocated:msg.Response.boot_response)
}
void Response::set_allocated_osd_stop_response(::msg::OsdStopResponse* osd_stop_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_union();
  if (osd_stop_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(osd_stop_response);
    if (message_arena != submessage_arena) {
      osd_stop_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, osd_stop_response, submessage_arena);
    }
    set_has_osd_stop_response();
    union_.osd_stop_response_ = osd_stop_response;
  }
  // @@protoc_insertion_point(field_set_allocated:msg.Response.osd_stop_response)
}
void Response::set_allocated_heartbeat_response(::msg::HeartbeatResponse* heartbeat_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_union();
  if (heartbeat_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(heartbeat_response);
    if (message_arena != submessage_arena) {
      heartbeat_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, heartbeat_response, submessage_arena);
    }
    set_has_heartbeat_response();
    union_.heartbeat_response_ = heartbeat_response;
  }
  // @@protoc_insertion_point(field_set_allocated:msg.Response.heartbeat_response)
}
void Response::set_allocated_get_osdmap_response(::msg::GetOsdMapResponse* get_osdmap_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_union();
  if (get_osdmap_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(get_osdmap_response);
    if (message_arena != submessage_arena) {
      get_osdmap_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_osdmap_response, submessage_arena);
    }
    set_has_get_osdmap_response();
    union_.get_osdmap_response_ = get_osdmap_response;
  }
  // @@protoc_insertion_point(field_set_allocated:msg.Response.get_osdmap_response)
}
void Response::set_allocated_list_pools_response(::msg::ListPoolsResponse* list_pools_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_union();
  if (list_pools_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(list_pools_response);
    if (message_arena != submessage_arena) {
      list_pools_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, list_pools_response, submessage_arena);
    }
    set_has_list_pools_response();
    union_.list_pools_response_ = list_pools_response;
  }
  // @@protoc_insertion_point(field_set_allocated:msg.Response.list_pools_response)
}
void Response::set_allocated_apply_id_response(::msg::ApplyIDResponse* apply_id_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_union();
  if (apply_id_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(apply_id_response);
    if (message_arena != submessage_arena) {
      apply_id_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, apply_id_response, submessage_arena);
    }
    set_has_apply_id_response();
    union_.apply_id_response_ = apply_id_response;
  }
  // @@protoc_insertion_point(field_set_allocated:msg.Response.apply_id_response)
}
void Response::set_allocated_create_pool_response(::msg::CreatePoolResponse* create_pool_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_union();
  if (create_pool_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(create_pool_response);
    if (message_arena != submessage_arena) {
      create_pool_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, create_pool_response, submessage_arena);
    }
    set_has_create_pool_response();
    union_.create_pool_response_ = create_pool_response;
  }
  // @@protoc_insertion_point(field_set_allocated:msg.Response.create_pool_response)
}
void Response::set_allocated_get_pgmap_response(::msg::GetPgMapResponse* get_pgmap_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_union();
  if (get_pgmap_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(get_pgmap_response);
    if (message_arena != submessage_arena) {
      get_pgmap_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_pgmap_response, submessage_arena);
    }
    set_has_get_pgmap_response();
    union_.get_pgmap_response_ = get_pgmap_response;
  }
  // @@protoc_insertion_point(field_set_allocated:msg.Response.get_pgmap_response)
}
void Response::set_allocated_delete_pool_response(::msg::DeletePoolResponse* delete_pool_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_union();
  if (delete_pool_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(delete_pool_response);
    if (message_arena != submessage_arena) {
      delete_pool_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, delete_pool_response, submessage_arena);
    }
    set_has_delete_pool_response();
    union_.delete_pool_response_ = delete_pool_response;
  }
  // @@protoc_insertion_point(field_set_allocated:msg.Response.delete_pool_response)
}
void Response::set_allocated_get_cluster_map_response(::msg::GetClusterMapResponse* get_cluster_map_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_union();
  if (get_cluster_map_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(get_cluster_map_response);
    if (message_arena != submessage_arena) {
      get_cluster_map_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_cluster_map_response, submessage_arena);
    }
    set_has_get_cluster_map_response();
    union_.get_cluster_map_response_ = get_cluster_map_response;
  }
  // @@protoc_insertion_point(field_set_allocated:msg.Response.get_cluster_map_response)
}
Response::Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:msg.Response)
}
Response::Response(const Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_union();
  switch (from.union_case()) {
    case kBootResponse: {
      _internal_mutable_boot_response()->::msg::BootResponse::MergeFrom(from._internal_boot_response());
      break;
    }
    case kOsdStopResponse: {
      _internal_mutable_osd_stop_response()->::msg::OsdStopResponse::MergeFrom(from._internal_osd_stop_response());
      break;
    }
    case kHeartbeatResponse: {
      _internal_mutable_heartbeat_response()->::msg::HeartbeatResponse::MergeFrom(from._internal_heartbeat_response());
      break;
    }
    case kGetOsdmapResponse: {
      _internal_mutable_get_osdmap_response()->::msg::GetOsdMapResponse::MergeFrom(from._internal_get_osdmap_response());
      break;
    }
    case kListPoolsResponse: {
      _internal_mutable_list_pools_response()->::msg::ListPoolsResponse::MergeFrom(from._internal_list_pools_response());
      break;
    }
    case kApplyIdResponse: {
      _internal_mutable_apply_id_response()->::msg::ApplyIDResponse::MergeFrom(from._internal_apply_id_response());
      break;
    }
    case kCreatePoolResponse: {
      _internal_mutable_create_pool_response()->::msg::CreatePoolResponse::MergeFrom(from._internal_create_pool_response());
      break;
    }
    case kGetPgmapResponse: {
      _internal_mutable_get_pgmap_response()->::msg::GetPgMapResponse::MergeFrom(from._internal_get_pgmap_response());
      break;
    }
    case kDeletePoolResponse: {
      _internal_mutable_delete_pool_response()->::msg::DeletePoolResponse::MergeFrom(from._internal_delete_pool_response());
      break;
    }
    case kGetClusterMapResponse: {
      _internal_mutable_get_cluster_map_response()->::msg::GetClusterMapResponse::MergeFrom(from._internal_get_cluster_map_response());
      break;
    }
    case UNION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:msg.Response)
}

void Response::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Response_mon_5fmsg_2eproto.base);
  clear_has_union();
}

Response::~Response() {
  // @@protoc_insertion_point(destructor:msg.Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_union()) {
    clear_union();
  }
}

void Response::ArenaDtor(void* object) {
  Response* _this = reinterpret_cast< Response* >(object);
  (void)_this;
}
void Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Response& Response::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Response_mon_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void Response::clear_union() {
// @@protoc_insertion_point(one_of_clear_start:msg.Response)
  switch (union_case()) {
    case kBootResponse: {
      if (GetArena() == nullptr) {
        delete union_.boot_response_;
      }
      break;
    }
    case kOsdStopResponse: {
      if (GetArena() == nullptr) {
        delete union_.osd_stop_response_;
      }
      break;
    }
    case kHeartbeatResponse: {
      if (GetArena() == nullptr) {
        delete union_.heartbeat_response_;
      }
      break;
    }
    case kGetOsdmapResponse: {
      if (GetArena() == nullptr) {
        delete union_.get_osdmap_response_;
      }
      break;
    }
    case kListPoolsResponse: {
      if (GetArena() == nullptr) {
        delete union_.list_pools_response_;
      }
      break;
    }
    case kApplyIdResponse: {
      if (GetArena() == nullptr) {
        delete union_.apply_id_response_;
      }
      break;
    }
    case kCreatePoolResponse: {
      if (GetArena() == nullptr) {
        delete union_.create_pool_response_;
      }
      break;
    }
    case kGetPgmapResponse: {
      if (GetArena() == nullptr) {
        delete union_.get_pgmap_response_;
      }
      break;
    }
    case kDeletePoolResponse: {
      if (GetArena() == nullptr) {
        delete union_.delete_pool_response_;
      }
      break;
    }
    case kGetClusterMapResponse: {
      if (GetArena() == nullptr) {
        delete union_.get_cluster_map_response_;
      }
      break;
    }
    case UNION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = UNION_NOT_SET;
}


void Response::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_union();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .msg.BootResponse boot_response = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_boot_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .msg.OsdStopResponse osd_stop_response = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_osd_stop_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .msg.HeartbeatResponse heartbeat_response = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_heartbeat_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .msg.GetOsdMapResponse get_osdmap_response = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_osdmap_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .msg.ListPoolsResponse list_pools_response = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_list_pools_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .msg.ApplyIDResponse apply_id_response = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_apply_id_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .msg.CreatePoolResponse create_pool_response = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_create_pool_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .msg.GetPgMapResponse get_pgmap_response = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_pgmap_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .msg.DeletePoolResponse delete_pool_response = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_delete_pool_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .msg.GetClusterMapResponse get_cluster_map_response = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_cluster_map_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .msg.BootResponse boot_response = 1;
  if (_internal_has_boot_response()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::boot_response(this), target, stream);
  }

  // .msg.OsdStopResponse osd_stop_response = 2;
  if (_internal_has_osd_stop_response()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::osd_stop_response(this), target, stream);
  }

  // .msg.HeartbeatResponse heartbeat_response = 3;
  if (_internal_has_heartbeat_response()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::heartbeat_response(this), target, stream);
  }

  // .msg.GetOsdMapResponse get_osdmap_response = 4;
  if (_internal_has_get_osdmap_response()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::get_osdmap_response(this), target, stream);
  }

  // .msg.ListPoolsResponse list_pools_response = 5;
  if (_internal_has_list_pools_response()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::list_pools_response(this), target, stream);
  }

  // .msg.ApplyIDResponse apply_id_response = 6;
  if (_internal_has_apply_id_response()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::apply_id_response(this), target, stream);
  }

  // .msg.CreatePoolResponse create_pool_response = 7;
  if (_internal_has_create_pool_response()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::create_pool_response(this), target, stream);
  }

  // .msg.GetPgMapResponse get_pgmap_response = 8;
  if (_internal_has_get_pgmap_response()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::get_pgmap_response(this), target, stream);
  }

  // .msg.DeletePoolResponse delete_pool_response = 9;
  if (_internal_has_delete_pool_response()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::delete_pool_response(this), target, stream);
  }

  // .msg.GetClusterMapResponse get_cluster_map_response = 10;
  if (_internal_has_get_cluster_map_response()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::get_cluster_map_response(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Response)
  return target;
}

size_t Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (union_case()) {
    // .msg.BootResponse boot_response = 1;
    case kBootResponse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *union_.boot_response_);
      break;
    }
    // .msg.OsdStopResponse osd_stop_response = 2;
    case kOsdStopResponse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *union_.osd_stop_response_);
      break;
    }
    // .msg.HeartbeatResponse heartbeat_response = 3;
    case kHeartbeatResponse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *union_.heartbeat_response_);
      break;
    }
    // .msg.GetOsdMapResponse get_osdmap_response = 4;
    case kGetOsdmapResponse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *union_.get_osdmap_response_);
      break;
    }
    // .msg.ListPoolsResponse list_pools_response = 5;
    case kListPoolsResponse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *union_.list_pools_response_);
      break;
    }
    // .msg.ApplyIDResponse apply_id_response = 6;
    case kApplyIdResponse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *union_.apply_id_response_);
      break;
    }
    // .msg.CreatePoolResponse create_pool_response = 7;
    case kCreatePoolResponse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *union_.create_pool_response_);
      break;
    }
    // .msg.GetPgMapResponse get_pgmap_response = 8;
    case kGetPgmapResponse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *union_.get_pgmap_response_);
      break;
    }
    // .msg.DeletePoolResponse delete_pool_response = 9;
    case kDeletePoolResponse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *union_.delete_pool_response_);
      break;
    }
    // .msg.GetClusterMapResponse get_cluster_map_response = 10;
    case kGetClusterMapResponse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *union_.get_cluster_map_response_);
      break;
    }
    case UNION_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg.Response)
  GOOGLE_DCHECK_NE(&from, this);
  const Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg.Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg.Response)
    MergeFrom(*source);
  }
}

void Response::MergeFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.union_case()) {
    case kBootResponse: {
      _internal_mutable_boot_response()->::msg::BootResponse::MergeFrom(from._internal_boot_response());
      break;
    }
    case kOsdStopResponse: {
      _internal_mutable_osd_stop_response()->::msg::OsdStopResponse::MergeFrom(from._internal_osd_stop_response());
      break;
    }
    case kHeartbeatResponse: {
      _internal_mutable_heartbeat_response()->::msg::HeartbeatResponse::MergeFrom(from._internal_heartbeat_response());
      break;
    }
    case kGetOsdmapResponse: {
      _internal_mutable_get_osdmap_response()->::msg::GetOsdMapResponse::MergeFrom(from._internal_get_osdmap_response());
      break;
    }
    case kListPoolsResponse: {
      _internal_mutable_list_pools_response()->::msg::ListPoolsResponse::MergeFrom(from._internal_list_pools_response());
      break;
    }
    case kApplyIdResponse: {
      _internal_mutable_apply_id_response()->::msg::ApplyIDResponse::MergeFrom(from._internal_apply_id_response());
      break;
    }
    case kCreatePoolResponse: {
      _internal_mutable_create_pool_response()->::msg::CreatePoolResponse::MergeFrom(from._internal_create_pool_response());
      break;
    }
    case kGetPgmapResponse: {
      _internal_mutable_get_pgmap_response()->::msg::GetPgMapResponse::MergeFrom(from._internal_get_pgmap_response());
      break;
    }
    case kDeletePoolResponse: {
      _internal_mutable_delete_pool_response()->::msg::DeletePoolResponse::MergeFrom(from._internal_delete_pool_response());
      break;
    }
    case kGetClusterMapResponse: {
      _internal_mutable_get_cluster_map_response()->::msg::GetClusterMapResponse::MergeFrom(from._internal_get_cluster_map_response());
      break;
    }
    case UNION_NOT_SET: {
      break;
    }
  }
}

void Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response::CopyFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response::IsInitialized() const {
  return true;
}

void Response::InternalSwap(Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(union_, other->union_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Response::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace msg
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::msg::CreatePoolRequest* Arena::CreateMaybeMessage< ::msg::CreatePoolRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CreatePoolRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CreatePoolResponse* Arena::CreateMaybeMessage< ::msg::CreatePoolResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CreatePoolResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::ListPoolsRequest* Arena::CreateMaybeMessage< ::msg::ListPoolsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::ListPoolsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::poolinfo* Arena::CreateMaybeMessage< ::msg::poolinfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::poolinfo >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::ListPoolsResponse* Arena::CreateMaybeMessage< ::msg::ListPoolsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::ListPoolsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::DeletePoolRequest* Arena::CreateMaybeMessage< ::msg::DeletePoolRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::DeletePoolRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::DeletePoolResponse* Arena::CreateMaybeMessage< ::msg::DeletePoolResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::DeletePoolResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::ApplyIDRequest* Arena::CreateMaybeMessage< ::msg::ApplyIDRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::ApplyIDRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::ApplyIDResponse* Arena::CreateMaybeMessage< ::msg::ApplyIDResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::ApplyIDResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::BootRequest* Arena::CreateMaybeMessage< ::msg::BootRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::BootRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::PGInfo* Arena::CreateMaybeMessage< ::msg::PGInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::PGInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::PGInfos* Arena::CreateMaybeMessage< ::msg::PGInfos >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::PGInfos >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::GetPgMapRequest_PoolVersionsEntry_DoNotUse* Arena::CreateMaybeMessage< ::msg::GetPgMapRequest_PoolVersionsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::GetPgMapRequest_PoolVersionsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::GetPgMapRequest* Arena::CreateMaybeMessage< ::msg::GetPgMapRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::GetPgMapRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::OsdDynamicInfo* Arena::CreateMaybeMessage< ::msg::OsdDynamicInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::OsdDynamicInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::GetPgMapResponse_ErrorcodeEntry_DoNotUse* Arena::CreateMaybeMessage< ::msg::GetPgMapResponse_ErrorcodeEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::GetPgMapResponse_ErrorcodeEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::GetPgMapResponse_PoolidPgmapversionEntry_DoNotUse* Arena::CreateMaybeMessage< ::msg::GetPgMapResponse_PoolidPgmapversionEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::GetPgMapResponse_PoolidPgmapversionEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::GetPgMapResponse_PgsEntry_DoNotUse* Arena::CreateMaybeMessage< ::msg::GetPgMapResponse_PgsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::GetPgMapResponse_PgsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::GetPgMapResponse* Arena::CreateMaybeMessage< ::msg::GetPgMapResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::GetPgMapResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::GetOsdMapRequest* Arena::CreateMaybeMessage< ::msg::GetOsdMapRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::GetOsdMapRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::GetOsdMapResponse* Arena::CreateMaybeMessage< ::msg::GetOsdMapResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::GetOsdMapResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::GetClusterMapRequest* Arena::CreateMaybeMessage< ::msg::GetClusterMapRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::GetClusterMapRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::GetClusterMapResponse* Arena::CreateMaybeMessage< ::msg::GetClusterMapResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::GetClusterMapResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::BootResponse* Arena::CreateMaybeMessage< ::msg::BootResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::BootResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::OsdStopRequest* Arena::CreateMaybeMessage< ::msg::OsdStopRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::OsdStopRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::OsdStopResponse* Arena::CreateMaybeMessage< ::msg::OsdStopResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::OsdStopResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::HeartbeatRequest* Arena::CreateMaybeMessage< ::msg::HeartbeatRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::HeartbeatRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::HeartbeatResponse* Arena::CreateMaybeMessage< ::msg::HeartbeatResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::HeartbeatResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::Request* Arena::CreateMaybeMessage< ::msg::Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::Request >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::Response* Arena::CreateMaybeMessage< ::msg::Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::Response >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
